schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Query {
  Ethereum_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Token
  Ethereum_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Token_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Token!]!
  Ethereum_rewardToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_RewardToken
  Ethereum_rewardTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_RewardToken_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_RewardToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_RewardToken!]!
  Ethereum_liquidityPoolFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_LiquidityPoolFee
  Ethereum_liquidityPoolFees(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_LiquidityPoolFee_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_LiquidityPoolFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_LiquidityPoolFee!]!
  Ethereum_dexAmmProtocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_DexAmmProtocol
  Ethereum_dexAmmProtocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_DexAmmProtocol_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_DexAmmProtocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_DexAmmProtocol!]!
  Ethereum_usageMetricsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_UsageMetricsDailySnapshot
  Ethereum_usageMetricsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_UsageMetricsDailySnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_UsageMetricsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_UsageMetricsDailySnapshot!]!
  Ethereum_usageMetricsHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_UsageMetricsHourlySnapshot
  Ethereum_usageMetricsHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_UsageMetricsHourlySnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_UsageMetricsHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_UsageMetricsHourlySnapshot!]!
  Ethereum_financialsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_FinancialsDailySnapshot
  Ethereum_financialsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_FinancialsDailySnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_FinancialsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_FinancialsDailySnapshot!]!
  Ethereum_liquidityPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_LiquidityPool
  Ethereum_liquidityPools(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_LiquidityPool_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_LiquidityPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_LiquidityPool!]!
  Ethereum_liquidityPoolDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_LiquidityPoolDailySnapshot
  Ethereum_liquidityPoolDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_LiquidityPoolDailySnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_LiquidityPoolDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_LiquidityPoolDailySnapshot!]!
  Ethereum_liquidityPoolHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_LiquidityPoolHourlySnapshot
  Ethereum_liquidityPoolHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_LiquidityPoolHourlySnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_LiquidityPoolHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_LiquidityPoolHourlySnapshot!]!
  Ethereum_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Tick
  Ethereum_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Tick_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Tick!]!
  Ethereum_tickDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_TickDailySnapshot
  Ethereum_tickDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_TickDailySnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_TickDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_TickDailySnapshot!]!
  Ethereum_tickHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_TickHourlySnapshot
  Ethereum_tickHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_TickHourlySnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_TickHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_TickHourlySnapshot!]!
  Ethereum_account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Account
  Ethereum_accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Account_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Account!]!
  Ethereum_position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Position
  Ethereum_positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Position_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Position!]!
  Ethereum_positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_PositionSnapshot
  Ethereum_positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_PositionSnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_PositionSnapshot!]!
  Ethereum_deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Deposit
  Ethereum_deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Deposit_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Deposit!]!
  Ethereum_withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Withdraw
  Ethereum_withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Withdraw_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Withdraw!]!
  Ethereum_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Swap
  Ethereum_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Swap_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Swap!]!
  Ethereum_activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_ActiveAccount
  Ethereum_activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_ActiveAccount_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_ActiveAccount!]!
  Ethereum_liquidityPoolAmount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum__LiquidityPoolAmount
  Ethereum_liquidityPoolAmounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum__LiquidityPoolAmount_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum__LiquidityPoolAmount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum__LiquidityPoolAmount!]!
  Ethereum_helperStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum__HelperStore
  Ethereum_helperStores(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum__HelperStore_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum__HelperStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum__HelperStore!]!
  Ethereum_tokenWhitelist(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum__TokenWhitelist
  Ethereum_tokenWhitelists(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum__TokenWhitelist_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum__TokenWhitelist_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum__TokenWhitelist!]!
  Ethereum_tokenWhitelistSymbol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum__TokenWhitelistSymbol
  Ethereum_tokenWhitelistSymbols(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum__TokenWhitelistSymbol_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum__TokenWhitelistSymbol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum__TokenWhitelistSymbol!]!
  Ethereum_protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Protocol
  Ethereum_protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Protocol_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Protocol!]!
  """Access to subgraph metadata"""
  Ethereum__meta(block: Ethereum_Block_height): Ethereum__Meta_
  Optimism_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Token
  Optimism_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Token_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Token!]!
  Optimism_rewardToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_RewardToken
  Optimism_rewardTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_RewardToken_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_RewardToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_RewardToken!]!
  Optimism_liquidityPoolFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_LiquidityPoolFee
  Optimism_liquidityPoolFees(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_LiquidityPoolFee_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_LiquidityPoolFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_LiquidityPoolFee!]!
  Optimism_dexAmmProtocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_DexAmmProtocol
  Optimism_dexAmmProtocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_DexAmmProtocol_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_DexAmmProtocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_DexAmmProtocol!]!
  Optimism_usageMetricsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_UsageMetricsDailySnapshot
  Optimism_usageMetricsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_UsageMetricsDailySnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_UsageMetricsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_UsageMetricsDailySnapshot!]!
  Optimism_usageMetricsHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_UsageMetricsHourlySnapshot
  Optimism_usageMetricsHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_UsageMetricsHourlySnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_UsageMetricsHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_UsageMetricsHourlySnapshot!]!
  Optimism_financialsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_FinancialsDailySnapshot
  Optimism_financialsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_FinancialsDailySnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_FinancialsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_FinancialsDailySnapshot!]!
  Optimism_liquidityPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_LiquidityPool
  Optimism_liquidityPools(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_LiquidityPool_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_LiquidityPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_LiquidityPool!]!
  Optimism_liquidityPoolDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_LiquidityPoolDailySnapshot
  Optimism_liquidityPoolDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_LiquidityPoolDailySnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_LiquidityPoolDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_LiquidityPoolDailySnapshot!]!
  Optimism_liquidityPoolHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_LiquidityPoolHourlySnapshot
  Optimism_liquidityPoolHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_LiquidityPoolHourlySnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_LiquidityPoolHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_LiquidityPoolHourlySnapshot!]!
  Optimism_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Tick
  Optimism_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Tick_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Tick!]!
  Optimism_tickDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_TickDailySnapshot
  Optimism_tickDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_TickDailySnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_TickDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_TickDailySnapshot!]!
  Optimism_tickHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_TickHourlySnapshot
  Optimism_tickHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_TickHourlySnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_TickHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_TickHourlySnapshot!]!
  Optimism_account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Account
  Optimism_accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Account_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Account!]!
  Optimism_position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Position
  Optimism_positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Position_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Position!]!
  Optimism_positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_PositionSnapshot
  Optimism_positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_PositionSnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_PositionSnapshot!]!
  Optimism_deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Deposit
  Optimism_deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Deposit_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Deposit!]!
  Optimism_withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Withdraw
  Optimism_withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Withdraw_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Withdraw!]!
  Optimism_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Swap
  Optimism_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Swap_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Swap!]!
  Optimism_activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_ActiveAccount
  Optimism_activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_ActiveAccount_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_ActiveAccount!]!
  Optimism_liquidityPoolAmount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism__LiquidityPoolAmount
  Optimism_liquidityPoolAmounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism__LiquidityPoolAmount_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism__LiquidityPoolAmount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism__LiquidityPoolAmount!]!
  Optimism_helperStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism__HelperStore
  Optimism_helperStores(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism__HelperStore_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism__HelperStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism__HelperStore!]!
  Optimism_tokenWhitelist(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism__TokenWhitelist
  Optimism_tokenWhitelists(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism__TokenWhitelist_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism__TokenWhitelist_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism__TokenWhitelist!]!
  Optimism_tokenWhitelistSymbol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism__TokenWhitelistSymbol
  Optimism_tokenWhitelistSymbols(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism__TokenWhitelistSymbol_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism__TokenWhitelistSymbol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism__TokenWhitelistSymbol!]!
  Optimism_protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Protocol
  Optimism_protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Protocol_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Protocol!]!
  """Access to subgraph metadata"""
  Optimism__meta(block: Optimism_Block_height): Optimism__Meta_
  Arbitrum_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Token
  Arbitrum_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Token_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Token!]!
  Arbitrum_rewardToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_RewardToken
  Arbitrum_rewardTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_RewardToken_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_RewardToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_RewardToken!]!
  Arbitrum_liquidityPoolFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_LiquidityPoolFee
  Arbitrum_liquidityPoolFees(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_LiquidityPoolFee_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_LiquidityPoolFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_LiquidityPoolFee!]!
  Arbitrum_dexAmmProtocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_DexAmmProtocol
  Arbitrum_dexAmmProtocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_DexAmmProtocol_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_DexAmmProtocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_DexAmmProtocol!]!
  Arbitrum_usageMetricsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_UsageMetricsDailySnapshot
  Arbitrum_usageMetricsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_UsageMetricsDailySnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_UsageMetricsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_UsageMetricsDailySnapshot!]!
  Arbitrum_usageMetricsHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_UsageMetricsHourlySnapshot
  Arbitrum_usageMetricsHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_UsageMetricsHourlySnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_UsageMetricsHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_UsageMetricsHourlySnapshot!]!
  Arbitrum_financialsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_FinancialsDailySnapshot
  Arbitrum_financialsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_FinancialsDailySnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_FinancialsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_FinancialsDailySnapshot!]!
  Arbitrum_liquidityPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_LiquidityPool
  Arbitrum_liquidityPools(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_LiquidityPool_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_LiquidityPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_LiquidityPool!]!
  Arbitrum_liquidityPoolDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_LiquidityPoolDailySnapshot
  Arbitrum_liquidityPoolDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_LiquidityPoolDailySnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_LiquidityPoolDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_LiquidityPoolDailySnapshot!]!
  Arbitrum_liquidityPoolHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_LiquidityPoolHourlySnapshot
  Arbitrum_liquidityPoolHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_LiquidityPoolHourlySnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_LiquidityPoolHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_LiquidityPoolHourlySnapshot!]!
  Arbitrum_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Tick
  Arbitrum_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Tick_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Tick!]!
  Arbitrum_tickDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_TickDailySnapshot
  Arbitrum_tickDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_TickDailySnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_TickDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_TickDailySnapshot!]!
  Arbitrum_tickHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_TickHourlySnapshot
  Arbitrum_tickHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_TickHourlySnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_TickHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_TickHourlySnapshot!]!
  Arbitrum_account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Account
  Arbitrum_accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Account_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Account!]!
  Arbitrum_position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Position
  Arbitrum_positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Position_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Position!]!
  Arbitrum_positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_PositionSnapshot
  Arbitrum_positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_PositionSnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_PositionSnapshot!]!
  Arbitrum_deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Deposit
  Arbitrum_deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Deposit_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Deposit!]!
  Arbitrum_withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Withdraw
  Arbitrum_withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Withdraw_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Withdraw!]!
  Arbitrum_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Swap
  Arbitrum_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Swap_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Swap!]!
  Arbitrum_activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_ActiveAccount
  Arbitrum_activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_ActiveAccount_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_ActiveAccount!]!
  Arbitrum_liquidityPoolAmount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum__LiquidityPoolAmount
  Arbitrum_liquidityPoolAmounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum__LiquidityPoolAmount_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum__LiquidityPoolAmount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum__LiquidityPoolAmount!]!
  Arbitrum_helperStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum__HelperStore
  Arbitrum_helperStores(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum__HelperStore_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum__HelperStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum__HelperStore!]!
  Arbitrum_tokenWhitelist(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum__TokenWhitelist
  Arbitrum_tokenWhitelists(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum__TokenWhitelist_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum__TokenWhitelist_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum__TokenWhitelist!]!
  Arbitrum_tokenWhitelistSymbol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum__TokenWhitelistSymbol
  Arbitrum_tokenWhitelistSymbols(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum__TokenWhitelistSymbol_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum__TokenWhitelistSymbol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum__TokenWhitelistSymbol!]!
  Arbitrum_protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Protocol
  Arbitrum_protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Protocol_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Protocol!]!
  """Access to subgraph metadata"""
  Arbitrum__meta(block: Arbitrum_Block_height): Arbitrum__Meta_
  Base_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Token
  Base_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Token_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Token!]!
  Base_rewardToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_RewardToken
  Base_rewardTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_RewardToken_orderBy
    orderDirection: Base_OrderDirection
    where: Base_RewardToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_RewardToken!]!
  Base_liquidityPoolFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_LiquidityPoolFee
  Base_liquidityPoolFees(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_LiquidityPoolFee_orderBy
    orderDirection: Base_OrderDirection
    where: Base_LiquidityPoolFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_LiquidityPoolFee!]!
  Base_dexAmmProtocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_DexAmmProtocol
  Base_dexAmmProtocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_DexAmmProtocol_orderBy
    orderDirection: Base_OrderDirection
    where: Base_DexAmmProtocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_DexAmmProtocol!]!
  Base_usageMetricsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_UsageMetricsDailySnapshot
  Base_usageMetricsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_UsageMetricsDailySnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_UsageMetricsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_UsageMetricsDailySnapshot!]!
  Base_usageMetricsHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_UsageMetricsHourlySnapshot
  Base_usageMetricsHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_UsageMetricsHourlySnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_UsageMetricsHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_UsageMetricsHourlySnapshot!]!
  Base_financialsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_FinancialsDailySnapshot
  Base_financialsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_FinancialsDailySnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_FinancialsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_FinancialsDailySnapshot!]!
  Base_liquidityPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_LiquidityPool
  Base_liquidityPools(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_LiquidityPool_orderBy
    orderDirection: Base_OrderDirection
    where: Base_LiquidityPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_LiquidityPool!]!
  Base_liquidityPoolDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_LiquidityPoolDailySnapshot
  Base_liquidityPoolDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_LiquidityPoolDailySnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_LiquidityPoolDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_LiquidityPoolDailySnapshot!]!
  Base_liquidityPoolHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_LiquidityPoolHourlySnapshot
  Base_liquidityPoolHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_LiquidityPoolHourlySnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_LiquidityPoolHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_LiquidityPoolHourlySnapshot!]!
  Base_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Tick
  Base_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Tick_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Tick!]!
  Base_tickDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_TickDailySnapshot
  Base_tickDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_TickDailySnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_TickDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_TickDailySnapshot!]!
  Base_tickHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_TickHourlySnapshot
  Base_tickHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_TickHourlySnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_TickHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_TickHourlySnapshot!]!
  Base_account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Account
  Base_accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Account_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Account!]!
  Base_position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Position
  Base_positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Position_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Position!]!
  Base_positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_PositionSnapshot
  Base_positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_PositionSnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_PositionSnapshot!]!
  Base_deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Deposit
  Base_deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Deposit_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Deposit!]!
  Base_withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Withdraw
  Base_withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Withdraw_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Withdraw!]!
  Base_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Swap
  Base_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Swap_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Swap!]!
  Base_activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_ActiveAccount
  Base_activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_ActiveAccount_orderBy
    orderDirection: Base_OrderDirection
    where: Base_ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_ActiveAccount!]!
  Base_liquidityPoolAmount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base__LiquidityPoolAmount
  Base_liquidityPoolAmounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Base__LiquidityPoolAmount_orderBy
    orderDirection: Base_OrderDirection
    where: Base__LiquidityPoolAmount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base__LiquidityPoolAmount!]!
  Base_helperStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base__HelperStore
  Base_helperStores(
    skip: Int = 0
    first: Int = 100
    orderBy: Base__HelperStore_orderBy
    orderDirection: Base_OrderDirection
    where: Base__HelperStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base__HelperStore!]!
  Base_tokenWhitelist(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base__TokenWhitelist
  Base_tokenWhitelists(
    skip: Int = 0
    first: Int = 100
    orderBy: Base__TokenWhitelist_orderBy
    orderDirection: Base_OrderDirection
    where: Base__TokenWhitelist_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base__TokenWhitelist!]!
  Base_tokenWhitelistSymbol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base__TokenWhitelistSymbol
  Base_tokenWhitelistSymbols(
    skip: Int = 0
    first: Int = 100
    orderBy: Base__TokenWhitelistSymbol_orderBy
    orderDirection: Base_OrderDirection
    where: Base__TokenWhitelistSymbol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base__TokenWhitelistSymbol!]!
  Base_protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Protocol
  Base_protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Protocol_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Protocol!]!
  """Access to subgraph metadata"""
  Base__meta(block: Base_Block_height): Base__Meta_
  uniswapV3Ethereum: Query
  uniswapV3Optimism: Query
  uniswapV3Arbitrum: Query
  uniswapV3Base: Query
}

type Subscription {
  Ethereum_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Token
  Ethereum_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Token_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Token!]!
  Ethereum_rewardToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_RewardToken
  Ethereum_rewardTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_RewardToken_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_RewardToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_RewardToken!]!
  Ethereum_liquidityPoolFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_LiquidityPoolFee
  Ethereum_liquidityPoolFees(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_LiquidityPoolFee_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_LiquidityPoolFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_LiquidityPoolFee!]!
  Ethereum_dexAmmProtocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_DexAmmProtocol
  Ethereum_dexAmmProtocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_DexAmmProtocol_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_DexAmmProtocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_DexAmmProtocol!]!
  Ethereum_usageMetricsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_UsageMetricsDailySnapshot
  Ethereum_usageMetricsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_UsageMetricsDailySnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_UsageMetricsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_UsageMetricsDailySnapshot!]!
  Ethereum_usageMetricsHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_UsageMetricsHourlySnapshot
  Ethereum_usageMetricsHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_UsageMetricsHourlySnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_UsageMetricsHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_UsageMetricsHourlySnapshot!]!
  Ethereum_financialsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_FinancialsDailySnapshot
  Ethereum_financialsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_FinancialsDailySnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_FinancialsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_FinancialsDailySnapshot!]!
  Ethereum_liquidityPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_LiquidityPool
  Ethereum_liquidityPools(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_LiquidityPool_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_LiquidityPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_LiquidityPool!]!
  Ethereum_liquidityPoolDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_LiquidityPoolDailySnapshot
  Ethereum_liquidityPoolDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_LiquidityPoolDailySnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_LiquidityPoolDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_LiquidityPoolDailySnapshot!]!
  Ethereum_liquidityPoolHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_LiquidityPoolHourlySnapshot
  Ethereum_liquidityPoolHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_LiquidityPoolHourlySnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_LiquidityPoolHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_LiquidityPoolHourlySnapshot!]!
  Ethereum_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Tick
  Ethereum_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Tick_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Tick!]!
  Ethereum_tickDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_TickDailySnapshot
  Ethereum_tickDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_TickDailySnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_TickDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_TickDailySnapshot!]!
  Ethereum_tickHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_TickHourlySnapshot
  Ethereum_tickHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_TickHourlySnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_TickHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_TickHourlySnapshot!]!
  Ethereum_account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Account
  Ethereum_accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Account_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Account!]!
  Ethereum_position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Position
  Ethereum_positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Position_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Position!]!
  Ethereum_positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_PositionSnapshot
  Ethereum_positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_PositionSnapshot_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_PositionSnapshot!]!
  Ethereum_deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Deposit
  Ethereum_deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Deposit_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Deposit!]!
  Ethereum_withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Withdraw
  Ethereum_withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Withdraw_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Withdraw!]!
  Ethereum_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Swap
  Ethereum_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Swap_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Swap!]!
  Ethereum_activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_ActiveAccount
  Ethereum_activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_ActiveAccount_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_ActiveAccount!]!
  Ethereum_liquidityPoolAmount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum__LiquidityPoolAmount
  Ethereum_liquidityPoolAmounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum__LiquidityPoolAmount_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum__LiquidityPoolAmount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum__LiquidityPoolAmount!]!
  Ethereum_helperStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum__HelperStore
  Ethereum_helperStores(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum__HelperStore_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum__HelperStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum__HelperStore!]!
  Ethereum_tokenWhitelist(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum__TokenWhitelist
  Ethereum_tokenWhitelists(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum__TokenWhitelist_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum__TokenWhitelist_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum__TokenWhitelist!]!
  Ethereum_tokenWhitelistSymbol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum__TokenWhitelistSymbol
  Ethereum_tokenWhitelistSymbols(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum__TokenWhitelistSymbol_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum__TokenWhitelistSymbol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum__TokenWhitelistSymbol!]!
  Ethereum_protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): Ethereum_Protocol
  Ethereum_protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Ethereum_Protocol_orderBy
    orderDirection: Ethereum_OrderDirection
    where: Ethereum_Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Ethereum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Ethereum__SubgraphErrorPolicy_! = deny
  ): [Ethereum_Protocol!]!
  """Access to subgraph metadata"""
  Ethereum__meta(block: Ethereum_Block_height): Ethereum__Meta_
  Optimism_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Token
  Optimism_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Token_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Token!]!
  Optimism_rewardToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_RewardToken
  Optimism_rewardTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_RewardToken_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_RewardToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_RewardToken!]!
  Optimism_liquidityPoolFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_LiquidityPoolFee
  Optimism_liquidityPoolFees(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_LiquidityPoolFee_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_LiquidityPoolFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_LiquidityPoolFee!]!
  Optimism_dexAmmProtocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_DexAmmProtocol
  Optimism_dexAmmProtocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_DexAmmProtocol_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_DexAmmProtocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_DexAmmProtocol!]!
  Optimism_usageMetricsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_UsageMetricsDailySnapshot
  Optimism_usageMetricsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_UsageMetricsDailySnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_UsageMetricsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_UsageMetricsDailySnapshot!]!
  Optimism_usageMetricsHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_UsageMetricsHourlySnapshot
  Optimism_usageMetricsHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_UsageMetricsHourlySnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_UsageMetricsHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_UsageMetricsHourlySnapshot!]!
  Optimism_financialsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_FinancialsDailySnapshot
  Optimism_financialsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_FinancialsDailySnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_FinancialsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_FinancialsDailySnapshot!]!
  Optimism_liquidityPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_LiquidityPool
  Optimism_liquidityPools(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_LiquidityPool_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_LiquidityPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_LiquidityPool!]!
  Optimism_liquidityPoolDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_LiquidityPoolDailySnapshot
  Optimism_liquidityPoolDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_LiquidityPoolDailySnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_LiquidityPoolDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_LiquidityPoolDailySnapshot!]!
  Optimism_liquidityPoolHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_LiquidityPoolHourlySnapshot
  Optimism_liquidityPoolHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_LiquidityPoolHourlySnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_LiquidityPoolHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_LiquidityPoolHourlySnapshot!]!
  Optimism_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Tick
  Optimism_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Tick_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Tick!]!
  Optimism_tickDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_TickDailySnapshot
  Optimism_tickDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_TickDailySnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_TickDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_TickDailySnapshot!]!
  Optimism_tickHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_TickHourlySnapshot
  Optimism_tickHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_TickHourlySnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_TickHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_TickHourlySnapshot!]!
  Optimism_account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Account
  Optimism_accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Account_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Account!]!
  Optimism_position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Position
  Optimism_positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Position_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Position!]!
  Optimism_positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_PositionSnapshot
  Optimism_positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_PositionSnapshot_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_PositionSnapshot!]!
  Optimism_deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Deposit
  Optimism_deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Deposit_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Deposit!]!
  Optimism_withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Withdraw
  Optimism_withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Withdraw_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Withdraw!]!
  Optimism_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Swap
  Optimism_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Swap_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Swap!]!
  Optimism_activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_ActiveAccount
  Optimism_activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_ActiveAccount_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_ActiveAccount!]!
  Optimism_liquidityPoolAmount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism__LiquidityPoolAmount
  Optimism_liquidityPoolAmounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism__LiquidityPoolAmount_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism__LiquidityPoolAmount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism__LiquidityPoolAmount!]!
  Optimism_helperStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism__HelperStore
  Optimism_helperStores(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism__HelperStore_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism__HelperStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism__HelperStore!]!
  Optimism_tokenWhitelist(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism__TokenWhitelist
  Optimism_tokenWhitelists(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism__TokenWhitelist_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism__TokenWhitelist_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism__TokenWhitelist!]!
  Optimism_tokenWhitelistSymbol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism__TokenWhitelistSymbol
  Optimism_tokenWhitelistSymbols(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism__TokenWhitelistSymbol_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism__TokenWhitelistSymbol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism__TokenWhitelistSymbol!]!
  Optimism_protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): Optimism_Protocol
  Optimism_protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Optimism_Protocol_orderBy
    orderDirection: Optimism_OrderDirection
    where: Optimism_Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Optimism__SubgraphErrorPolicy_! = deny
  ): [Optimism_Protocol!]!
  """Access to subgraph metadata"""
  Optimism__meta(block: Optimism_Block_height): Optimism__Meta_
  Arbitrum_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Token
  Arbitrum_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Token_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Token!]!
  Arbitrum_rewardToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_RewardToken
  Arbitrum_rewardTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_RewardToken_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_RewardToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_RewardToken!]!
  Arbitrum_liquidityPoolFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_LiquidityPoolFee
  Arbitrum_liquidityPoolFees(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_LiquidityPoolFee_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_LiquidityPoolFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_LiquidityPoolFee!]!
  Arbitrum_dexAmmProtocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_DexAmmProtocol
  Arbitrum_dexAmmProtocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_DexAmmProtocol_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_DexAmmProtocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_DexAmmProtocol!]!
  Arbitrum_usageMetricsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_UsageMetricsDailySnapshot
  Arbitrum_usageMetricsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_UsageMetricsDailySnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_UsageMetricsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_UsageMetricsDailySnapshot!]!
  Arbitrum_usageMetricsHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_UsageMetricsHourlySnapshot
  Arbitrum_usageMetricsHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_UsageMetricsHourlySnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_UsageMetricsHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_UsageMetricsHourlySnapshot!]!
  Arbitrum_financialsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_FinancialsDailySnapshot
  Arbitrum_financialsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_FinancialsDailySnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_FinancialsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_FinancialsDailySnapshot!]!
  Arbitrum_liquidityPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_LiquidityPool
  Arbitrum_liquidityPools(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_LiquidityPool_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_LiquidityPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_LiquidityPool!]!
  Arbitrum_liquidityPoolDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_LiquidityPoolDailySnapshot
  Arbitrum_liquidityPoolDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_LiquidityPoolDailySnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_LiquidityPoolDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_LiquidityPoolDailySnapshot!]!
  Arbitrum_liquidityPoolHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_LiquidityPoolHourlySnapshot
  Arbitrum_liquidityPoolHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_LiquidityPoolHourlySnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_LiquidityPoolHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_LiquidityPoolHourlySnapshot!]!
  Arbitrum_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Tick
  Arbitrum_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Tick_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Tick!]!
  Arbitrum_tickDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_TickDailySnapshot
  Arbitrum_tickDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_TickDailySnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_TickDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_TickDailySnapshot!]!
  Arbitrum_tickHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_TickHourlySnapshot
  Arbitrum_tickHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_TickHourlySnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_TickHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_TickHourlySnapshot!]!
  Arbitrum_account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Account
  Arbitrum_accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Account_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Account!]!
  Arbitrum_position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Position
  Arbitrum_positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Position_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Position!]!
  Arbitrum_positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_PositionSnapshot
  Arbitrum_positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_PositionSnapshot_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_PositionSnapshot!]!
  Arbitrum_deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Deposit
  Arbitrum_deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Deposit_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Deposit!]!
  Arbitrum_withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Withdraw
  Arbitrum_withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Withdraw_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Withdraw!]!
  Arbitrum_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Swap
  Arbitrum_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Swap_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Swap!]!
  Arbitrum_activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_ActiveAccount
  Arbitrum_activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_ActiveAccount_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_ActiveAccount!]!
  Arbitrum_liquidityPoolAmount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum__LiquidityPoolAmount
  Arbitrum_liquidityPoolAmounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum__LiquidityPoolAmount_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum__LiquidityPoolAmount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum__LiquidityPoolAmount!]!
  Arbitrum_helperStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum__HelperStore
  Arbitrum_helperStores(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum__HelperStore_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum__HelperStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum__HelperStore!]!
  Arbitrum_tokenWhitelist(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum__TokenWhitelist
  Arbitrum_tokenWhitelists(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum__TokenWhitelist_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum__TokenWhitelist_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum__TokenWhitelist!]!
  Arbitrum_tokenWhitelistSymbol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum__TokenWhitelistSymbol
  Arbitrum_tokenWhitelistSymbols(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum__TokenWhitelistSymbol_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum__TokenWhitelistSymbol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum__TokenWhitelistSymbol!]!
  Arbitrum_protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): Arbitrum_Protocol
  Arbitrum_protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Arbitrum_Protocol_orderBy
    orderDirection: Arbitrum_OrderDirection
    where: Arbitrum_Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Arbitrum_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Arbitrum__SubgraphErrorPolicy_! = deny
  ): [Arbitrum_Protocol!]!
  """Access to subgraph metadata"""
  Arbitrum__meta(block: Arbitrum_Block_height): Arbitrum__Meta_
  Base_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Token
  Base_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Token_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Token!]!
  Base_rewardToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_RewardToken
  Base_rewardTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_RewardToken_orderBy
    orderDirection: Base_OrderDirection
    where: Base_RewardToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_RewardToken!]!
  Base_liquidityPoolFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_LiquidityPoolFee
  Base_liquidityPoolFees(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_LiquidityPoolFee_orderBy
    orderDirection: Base_OrderDirection
    where: Base_LiquidityPoolFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_LiquidityPoolFee!]!
  Base_dexAmmProtocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_DexAmmProtocol
  Base_dexAmmProtocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_DexAmmProtocol_orderBy
    orderDirection: Base_OrderDirection
    where: Base_DexAmmProtocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_DexAmmProtocol!]!
  Base_usageMetricsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_UsageMetricsDailySnapshot
  Base_usageMetricsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_UsageMetricsDailySnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_UsageMetricsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_UsageMetricsDailySnapshot!]!
  Base_usageMetricsHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_UsageMetricsHourlySnapshot
  Base_usageMetricsHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_UsageMetricsHourlySnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_UsageMetricsHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_UsageMetricsHourlySnapshot!]!
  Base_financialsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_FinancialsDailySnapshot
  Base_financialsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_FinancialsDailySnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_FinancialsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_FinancialsDailySnapshot!]!
  Base_liquidityPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_LiquidityPool
  Base_liquidityPools(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_LiquidityPool_orderBy
    orderDirection: Base_OrderDirection
    where: Base_LiquidityPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_LiquidityPool!]!
  Base_liquidityPoolDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_LiquidityPoolDailySnapshot
  Base_liquidityPoolDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_LiquidityPoolDailySnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_LiquidityPoolDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_LiquidityPoolDailySnapshot!]!
  Base_liquidityPoolHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_LiquidityPoolHourlySnapshot
  Base_liquidityPoolHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_LiquidityPoolHourlySnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_LiquidityPoolHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_LiquidityPoolHourlySnapshot!]!
  Base_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Tick
  Base_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Tick_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Tick!]!
  Base_tickDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_TickDailySnapshot
  Base_tickDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_TickDailySnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_TickDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_TickDailySnapshot!]!
  Base_tickHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_TickHourlySnapshot
  Base_tickHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_TickHourlySnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_TickHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_TickHourlySnapshot!]!
  Base_account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Account
  Base_accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Account_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Account!]!
  Base_position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Position
  Base_positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Position_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Position!]!
  Base_positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_PositionSnapshot
  Base_positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_PositionSnapshot_orderBy
    orderDirection: Base_OrderDirection
    where: Base_PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_PositionSnapshot!]!
  Base_deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Deposit
  Base_deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Deposit_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Deposit!]!
  Base_withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Withdraw
  Base_withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Withdraw_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Withdraw!]!
  Base_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Swap
  Base_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Swap_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Swap!]!
  Base_activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_ActiveAccount
  Base_activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_ActiveAccount_orderBy
    orderDirection: Base_OrderDirection
    where: Base_ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_ActiveAccount!]!
  Base_liquidityPoolAmount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base__LiquidityPoolAmount
  Base_liquidityPoolAmounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Base__LiquidityPoolAmount_orderBy
    orderDirection: Base_OrderDirection
    where: Base__LiquidityPoolAmount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base__LiquidityPoolAmount!]!
  Base_helperStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base__HelperStore
  Base_helperStores(
    skip: Int = 0
    first: Int = 100
    orderBy: Base__HelperStore_orderBy
    orderDirection: Base_OrderDirection
    where: Base__HelperStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base__HelperStore!]!
  Base_tokenWhitelist(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base__TokenWhitelist
  Base_tokenWhitelists(
    skip: Int = 0
    first: Int = 100
    orderBy: Base__TokenWhitelist_orderBy
    orderDirection: Base_OrderDirection
    where: Base__TokenWhitelist_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base__TokenWhitelist!]!
  Base_tokenWhitelistSymbol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base__TokenWhitelistSymbol
  Base_tokenWhitelistSymbols(
    skip: Int = 0
    first: Int = 100
    orderBy: Base__TokenWhitelistSymbol_orderBy
    orderDirection: Base_OrderDirection
    where: Base__TokenWhitelistSymbol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base__TokenWhitelistSymbol!]!
  Base_protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): Base_Protocol
  Base_protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Base_Protocol_orderBy
    orderDirection: Base_OrderDirection
    where: Base_Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Base_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: Base__SubgraphErrorPolicy_! = deny
  ): [Base_Protocol!]!
  """Access to subgraph metadata"""
  Base__meta(block: Base_Block_height): Base__Meta_
}

type Ethereum_Account {
  """ { Account address } """
  id: Ethereum_Bytes!
  """ Number of positions this account has """
  positionCount: Int!
  """ All positions that belong to this account """
  positions(skip: Int = 0, first: Int = 100, orderBy: Ethereum_Position_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_Position_filter): [Ethereum_Position!]!
  """ Number of open positions this account has """
  openPositionCount: Int!
  """ Number of closed positions this account has """
  closedPositionCount: Int!
  """ Number of deposits this account made """
  depositCount: Int!
  """ All deposit events of this account """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Ethereum_Deposit_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_Deposit_filter): [Ethereum_Deposit!]!
  """ Number of withdrawals this account made """
  withdrawCount: Int!
  """ All withdraw events of this account """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Ethereum_Withdraw_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_Withdraw_filter): [Ethereum_Withdraw!]!
  """ Number of times this account has traded/swapped"""
  swapCount: Int!
  """ All swap events of this account """
  swaps(skip: Int = 0, first: Int = 100, orderBy: Ethereum_Swap_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_Swap_filter): [Ethereum_Swap!]!
}

input Ethereum_Account_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  positions_: Ethereum_Position_filter
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  deposits_: Ethereum_Deposit_filter
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  withdraws_: Ethereum_Withdraw_filter
  swapCount: Int
  swapCount_not: Int
  swapCount_gt: Int
  swapCount_lt: Int
  swapCount_gte: Int
  swapCount_lte: Int
  swapCount_in: [Int!]
  swapCount_not_in: [Int!]
  swaps_: Ethereum_Swap_filter
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_Account_filter]
  or: [Ethereum_Account_filter]
}

enum Ethereum_Account_orderBy {
  id
  positionCount
  positions
  openPositionCount
  closedPositionCount
  depositCount
  deposits
  withdrawCount
  withdraws
  swapCount
  swaps
}

type Ethereum_ActiveAccount {
  """ { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch } 
  """
  id: Ethereum_Bytes!
}

input Ethereum_ActiveAccount_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_ActiveAccount_filter]
  or: [Ethereum_ActiveAccount_filter]
}

enum Ethereum_ActiveAccount_orderBy {
  id
}

enum Ethereum_Aggregation_interval {
  hour
  day
}

scalar Ethereum_BigDecimal

scalar BigInt

input Ethereum_BlockChangedFilter {
  number_gte: Int!
}

input Ethereum_Block_height {
  hash: Ethereum_Bytes
  number: Int
  number_gte: Int
}

scalar Ethereum_Bytes

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.

"""
type Ethereum_Deposit {
  """ { Transaction hash }-{ Log index } """
  id: Ethereum_Bytes!
  """ Transaction hash of the transaction that emitted this event """
  hash: Ethereum_Bytes!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Gas limit of the transaction that emitted this event """
  gasLimit: BigInt
  """ Gas used in this transaction. (Optional because not every chain will support this) 
  """
  gasUsed: BigInt
  """ Gas price of the transaction that emitted this event """
  gasPrice: BigInt
  """ The protocol this transaction belongs to """
  protocol: Ethereum_DexAmmProtocol!
  """ Account that emitted this event """
  account: Ethereum_Account!
  """ The user position changed by this event """
  position: Ethereum_Position
  """ The pool involving this event """
  pool: Ethereum_LiquidityPool!
  """ lower tick of position """
  tickLower: BigInt
  """ upper tick of position """
  tickUpper: BigInt
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ Amount of liquidity minted """
  liquidity: BigInt!
  """ Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Ethereum_Token_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_Token_filter): [Ethereum_Token!]!
  """ Amount of input tokens in the token's native unit """
  inputTokenAmounts: [BigInt!]!
  """ Amount of input tokens in the liquidity pool """
  reserveAmounts: [BigInt!]
  """ USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool) 
  """
  amountUSD: Ethereum_BigDecimal!
}

input Ethereum_Deposit_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  hash: Ethereum_Bytes
  hash_not: Ethereum_Bytes
  hash_gt: Ethereum_Bytes
  hash_lt: Ethereum_Bytes
  hash_gte: Ethereum_Bytes
  hash_lte: Ethereum_Bytes
  hash_in: [Ethereum_Bytes!]
  hash_not_in: [Ethereum_Bytes!]
  hash_contains: Ethereum_Bytes
  hash_not_contains: Ethereum_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Ethereum_DexAmmProtocol_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Ethereum_Account_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Ethereum_Position_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Ethereum_LiquidityPool_filter
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Ethereum_Token_filter
  inputTokenAmounts: [BigInt!]
  inputTokenAmounts_not: [BigInt!]
  inputTokenAmounts_contains: [BigInt!]
  inputTokenAmounts_contains_nocase: [BigInt!]
  inputTokenAmounts_not_contains: [BigInt!]
  inputTokenAmounts_not_contains_nocase: [BigInt!]
  reserveAmounts: [BigInt!]
  reserveAmounts_not: [BigInt!]
  reserveAmounts_contains: [BigInt!]
  reserveAmounts_contains_nocase: [BigInt!]
  reserveAmounts_not_contains: [BigInt!]
  reserveAmounts_not_contains_nocase: [BigInt!]
  amountUSD: Ethereum_BigDecimal
  amountUSD_not: Ethereum_BigDecimal
  amountUSD_gt: Ethereum_BigDecimal
  amountUSD_lt: Ethereum_BigDecimal
  amountUSD_gte: Ethereum_BigDecimal
  amountUSD_lte: Ethereum_BigDecimal
  amountUSD_in: [Ethereum_BigDecimal!]
  amountUSD_not_in: [Ethereum_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_Deposit_filter]
  or: [Ethereum_Deposit_filter]
}

enum Ethereum_Deposit_orderBy {
  id
  hash
  nonce
  logIndex
  gasLimit
  gasUsed
  gasPrice
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__liquidityTokenType
  position__liquidity
  position__liquidityUSD
  position__cumulativeDepositUSD
  position__cumulativeWithdrawUSD
  position__depositCount
  position__withdrawCount
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  tickLower
  tickUpper
  blockNumber
  timestamp
  liquidity
  inputTokens
  inputTokenAmounts
  reserveAmounts
  amountUSD
}

type Ethereum_DexAmmProtocol implements Ethereum_Protocol {
  """ Smart contract address of the protocol's main contract (Factory, Registry, etc) 
  """
  id: Ethereum_Bytes!
  """ Name of the protocol, including version. e.g. Uniswap v3 """
  name: String!
  """ Slug of protocol, including version. e.g. uniswap-v3 """
  slug: String!
  """ Version of the subgraph schema, in SemVer format (e.g. 1.0.0) """
  schemaVersion: String!
  """ Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) 
  """
  subgraphVersion: String!
  """ Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) 
  """
  methodologyVersion: String!
  """ The blockchain network this subgraph is indexing on """
  network: Ethereum_Network!
  """ The type of protocol (e.g. DEX, Lending, Yield, etc) """
  type: Ethereum_ProtocolType!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: Ethereum_BigDecimal!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Ethereum_BigDecimal!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Ethereum_BigDecimal!
  """ All protocol-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedProtocolSideValueUSD: Ethereum_BigDecimal!
  """ All supply-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedSupplySideValueUSD: Ethereum_BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: Ethereum_BigDecimal
  """ All historical volume in USD """
  cumulativeVolumeUSD: Ethereum_BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: Ethereum_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: Ethereum_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: Ethereum_BigDecimal!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Number of cumulative liquidity providers """
  cumulativeUniqueLPs: Int!
  """ Number of cumulative traders """
  cumulativeUniqueTraders: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Total number of open positions """
  openPositionCount: Int!
  """ Total number of positions (open and closed) """
  cumulativePositionCount: Int!
  """ Day ID of the most recent daily snapshot """
  lastSnapshotDayID: Int!
  """ Timestamp of the last time this entity was updated """
  lastUpdateTimestamp: BigInt!
  """ Block number of the last time this entity was updated """
  lastUpdateBlockNumber: BigInt!
  """ Daily usage metrics for this protocol """
  dailyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Ethereum_UsageMetricsDailySnapshot_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_UsageMetricsDailySnapshot_filter): [Ethereum_UsageMetricsDailySnapshot!]!
  """ Hourly usage metrics for this protocol """
  hourlyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Ethereum_UsageMetricsHourlySnapshot_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_UsageMetricsHourlySnapshot_filter): [Ethereum_UsageMetricsHourlySnapshot!]!
  """ Daily financial metrics for this protocol """
  financialMetrics(skip: Int = 0, first: Int = 100, orderBy: Ethereum_FinancialsDailySnapshot_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_FinancialsDailySnapshot_filter): [Ethereum_FinancialsDailySnapshot!]!
  """ All pools that belong to this protocol """
  pools(skip: Int = 0, first: Int = 100, orderBy: Ethereum_LiquidityPool_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_LiquidityPool_filter): [Ethereum_LiquidityPool!]!
  """ This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis 
  """
  _regenesis: Boolean!
}

input Ethereum_DexAmmProtocol_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  schemaVersion: String
  schemaVersion_not: String
  schemaVersion_gt: String
  schemaVersion_lt: String
  schemaVersion_gte: String
  schemaVersion_lte: String
  schemaVersion_in: [String!]
  schemaVersion_not_in: [String!]
  schemaVersion_contains: String
  schemaVersion_contains_nocase: String
  schemaVersion_not_contains: String
  schemaVersion_not_contains_nocase: String
  schemaVersion_starts_with: String
  schemaVersion_starts_with_nocase: String
  schemaVersion_not_starts_with: String
  schemaVersion_not_starts_with_nocase: String
  schemaVersion_ends_with: String
  schemaVersion_ends_with_nocase: String
  schemaVersion_not_ends_with: String
  schemaVersion_not_ends_with_nocase: String
  subgraphVersion: String
  subgraphVersion_not: String
  subgraphVersion_gt: String
  subgraphVersion_lt: String
  subgraphVersion_gte: String
  subgraphVersion_lte: String
  subgraphVersion_in: [String!]
  subgraphVersion_not_in: [String!]
  subgraphVersion_contains: String
  subgraphVersion_contains_nocase: String
  subgraphVersion_not_contains: String
  subgraphVersion_not_contains_nocase: String
  subgraphVersion_starts_with: String
  subgraphVersion_starts_with_nocase: String
  subgraphVersion_not_starts_with: String
  subgraphVersion_not_starts_with_nocase: String
  subgraphVersion_ends_with: String
  subgraphVersion_ends_with_nocase: String
  subgraphVersion_not_ends_with: String
  subgraphVersion_not_ends_with_nocase: String
  methodologyVersion: String
  methodologyVersion_not: String
  methodologyVersion_gt: String
  methodologyVersion_lt: String
  methodologyVersion_gte: String
  methodologyVersion_lte: String
  methodologyVersion_in: [String!]
  methodologyVersion_not_in: [String!]
  methodologyVersion_contains: String
  methodologyVersion_contains_nocase: String
  methodologyVersion_not_contains: String
  methodologyVersion_not_contains_nocase: String
  methodologyVersion_starts_with: String
  methodologyVersion_starts_with_nocase: String
  methodologyVersion_not_starts_with: String
  methodologyVersion_not_starts_with_nocase: String
  methodologyVersion_ends_with: String
  methodologyVersion_ends_with_nocase: String
  methodologyVersion_not_ends_with: String
  methodologyVersion_not_ends_with_nocase: String
  network: Ethereum_Network
  network_not: Ethereum_Network
  network_in: [Ethereum_Network!]
  network_not_in: [Ethereum_Network!]
  type: Ethereum_ProtocolType
  type_not: Ethereum_ProtocolType
  type_in: [Ethereum_ProtocolType!]
  type_not_in: [Ethereum_ProtocolType!]
  totalValueLockedUSD: Ethereum_BigDecimal
  totalValueLockedUSD_not: Ethereum_BigDecimal
  totalValueLockedUSD_gt: Ethereum_BigDecimal
  totalValueLockedUSD_lt: Ethereum_BigDecimal
  totalValueLockedUSD_gte: Ethereum_BigDecimal
  totalValueLockedUSD_lte: Ethereum_BigDecimal
  totalValueLockedUSD_in: [Ethereum_BigDecimal!]
  totalValueLockedUSD_not_in: [Ethereum_BigDecimal!]
  totalLiquidityUSD: Ethereum_BigDecimal
  totalLiquidityUSD_not: Ethereum_BigDecimal
  totalLiquidityUSD_gt: Ethereum_BigDecimal
  totalLiquidityUSD_lt: Ethereum_BigDecimal
  totalLiquidityUSD_gte: Ethereum_BigDecimal
  totalLiquidityUSD_lte: Ethereum_BigDecimal
  totalLiquidityUSD_in: [Ethereum_BigDecimal!]
  totalLiquidityUSD_not_in: [Ethereum_BigDecimal!]
  activeLiquidityUSD: Ethereum_BigDecimal
  activeLiquidityUSD_not: Ethereum_BigDecimal
  activeLiquidityUSD_gt: Ethereum_BigDecimal
  activeLiquidityUSD_lt: Ethereum_BigDecimal
  activeLiquidityUSD_gte: Ethereum_BigDecimal
  activeLiquidityUSD_lte: Ethereum_BigDecimal
  activeLiquidityUSD_in: [Ethereum_BigDecimal!]
  activeLiquidityUSD_not_in: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValueUSD: Ethereum_BigDecimal
  uncollectedProtocolSideValueUSD_not: Ethereum_BigDecimal
  uncollectedProtocolSideValueUSD_gt: Ethereum_BigDecimal
  uncollectedProtocolSideValueUSD_lt: Ethereum_BigDecimal
  uncollectedProtocolSideValueUSD_gte: Ethereum_BigDecimal
  uncollectedProtocolSideValueUSD_lte: Ethereum_BigDecimal
  uncollectedProtocolSideValueUSD_in: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValueUSD_not_in: [Ethereum_BigDecimal!]
  uncollectedSupplySideValueUSD: Ethereum_BigDecimal
  uncollectedSupplySideValueUSD_not: Ethereum_BigDecimal
  uncollectedSupplySideValueUSD_gt: Ethereum_BigDecimal
  uncollectedSupplySideValueUSD_lt: Ethereum_BigDecimal
  uncollectedSupplySideValueUSD_gte: Ethereum_BigDecimal
  uncollectedSupplySideValueUSD_lte: Ethereum_BigDecimal
  uncollectedSupplySideValueUSD_in: [Ethereum_BigDecimal!]
  uncollectedSupplySideValueUSD_not_in: [Ethereum_BigDecimal!]
  protocolControlledValueUSD: Ethereum_BigDecimal
  protocolControlledValueUSD_not: Ethereum_BigDecimal
  protocolControlledValueUSD_gt: Ethereum_BigDecimal
  protocolControlledValueUSD_lt: Ethereum_BigDecimal
  protocolControlledValueUSD_gte: Ethereum_BigDecimal
  protocolControlledValueUSD_lte: Ethereum_BigDecimal
  protocolControlledValueUSD_in: [Ethereum_BigDecimal!]
  protocolControlledValueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeVolumeUSD: Ethereum_BigDecimal
  cumulativeVolumeUSD_not: Ethereum_BigDecimal
  cumulativeVolumeUSD_gt: Ethereum_BigDecimal
  cumulativeVolumeUSD_lt: Ethereum_BigDecimal
  cumulativeVolumeUSD_gte: Ethereum_BigDecimal
  cumulativeVolumeUSD_lte: Ethereum_BigDecimal
  cumulativeVolumeUSD_in: [Ethereum_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeTotalRevenueUSD: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_not: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  cumulativeUniqueLPs: Int
  cumulativeUniqueLPs_not: Int
  cumulativeUniqueLPs_gt: Int
  cumulativeUniqueLPs_lt: Int
  cumulativeUniqueLPs_gte: Int
  cumulativeUniqueLPs_lte: Int
  cumulativeUniqueLPs_in: [Int!]
  cumulativeUniqueLPs_not_in: [Int!]
  cumulativeUniqueTraders: Int
  cumulativeUniqueTraders_not: Int
  cumulativeUniqueTraders_gt: Int
  cumulativeUniqueTraders_lt: Int
  cumulativeUniqueTraders_gte: Int
  cumulativeUniqueTraders_lte: Int
  cumulativeUniqueTraders_in: [Int!]
  cumulativeUniqueTraders_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  cumulativePositionCount: Int
  cumulativePositionCount_not: Int
  cumulativePositionCount_gt: Int
  cumulativePositionCount_lt: Int
  cumulativePositionCount_gte: Int
  cumulativePositionCount_lte: Int
  cumulativePositionCount_in: [Int!]
  cumulativePositionCount_not_in: [Int!]
  lastSnapshotDayID: Int
  lastSnapshotDayID_not: Int
  lastSnapshotDayID_gt: Int
  lastSnapshotDayID_lt: Int
  lastSnapshotDayID_gte: Int
  lastSnapshotDayID_lte: Int
  lastSnapshotDayID_in: [Int!]
  lastSnapshotDayID_not_in: [Int!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  dailyUsageMetrics_: Ethereum_UsageMetricsDailySnapshot_filter
  hourlyUsageMetrics_: Ethereum_UsageMetricsHourlySnapshot_filter
  financialMetrics_: Ethereum_FinancialsDailySnapshot_filter
  pools_: Ethereum_LiquidityPool_filter
  _regenesis: Boolean
  _regenesis_not: Boolean
  _regenesis_in: [Boolean!]
  _regenesis_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_DexAmmProtocol_filter]
  or: [Ethereum_DexAmmProtocol_filter]
}

enum Ethereum_DexAmmProtocol_orderBy {
  id
  name
  slug
  schemaVersion
  subgraphVersion
  methodologyVersion
  network
  type
  totalValueLockedUSD
  totalLiquidityUSD
  activeLiquidityUSD
  uncollectedProtocolSideValueUSD
  uncollectedSupplySideValueUSD
  protocolControlledValueUSD
  cumulativeVolumeUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  cumulativeUniqueUsers
  cumulativeUniqueLPs
  cumulativeUniqueTraders
  totalPoolCount
  openPositionCount
  cumulativePositionCount
  lastSnapshotDayID
  lastUpdateTimestamp
  lastUpdateBlockNumber
  dailyUsageMetrics
  hourlyUsageMetrics
  financialMetrics
  pools
  _regenesis
}

type Ethereum_FinancialsDailySnapshot {
  """ ID is # of days since Unix epoch time """
  id: Ethereum_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ Protocol this snapshot is associated with """
  protocol: Ethereum_DexAmmProtocol!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: Ethereum_BigDecimal!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Ethereum_BigDecimal!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Ethereum_BigDecimal!
  """ All protocol-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedProtocolSideValueUSD: Ethereum_BigDecimal!
  """ All supply-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedSupplySideValueUSD: Ethereum_BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: Ethereum_BigDecimal
  """ All trade volume occurred in a given day, in USD """
  dailyVolumeUSD: Ethereum_BigDecimal!
  """ All historical trade volume in USD """
  cumulativeVolumeUSD: Ethereum_BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  dailySupplySideRevenueUSD: Ethereum_BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: Ethereum_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  dailyProtocolSideRevenueUSD: Ethereum_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: Ethereum_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  dailyTotalRevenueUSD: Ethereum_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: Ethereum_BigDecimal!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Ethereum_FinancialsDailySnapshot_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Ethereum_DexAmmProtocol_filter
  totalValueLockedUSD: Ethereum_BigDecimal
  totalValueLockedUSD_not: Ethereum_BigDecimal
  totalValueLockedUSD_gt: Ethereum_BigDecimal
  totalValueLockedUSD_lt: Ethereum_BigDecimal
  totalValueLockedUSD_gte: Ethereum_BigDecimal
  totalValueLockedUSD_lte: Ethereum_BigDecimal
  totalValueLockedUSD_in: [Ethereum_BigDecimal!]
  totalValueLockedUSD_not_in: [Ethereum_BigDecimal!]
  totalLiquidityUSD: Ethereum_BigDecimal
  totalLiquidityUSD_not: Ethereum_BigDecimal
  totalLiquidityUSD_gt: Ethereum_BigDecimal
  totalLiquidityUSD_lt: Ethereum_BigDecimal
  totalLiquidityUSD_gte: Ethereum_BigDecimal
  totalLiquidityUSD_lte: Ethereum_BigDecimal
  totalLiquidityUSD_in: [Ethereum_BigDecimal!]
  totalLiquidityUSD_not_in: [Ethereum_BigDecimal!]
  activeLiquidityUSD: Ethereum_BigDecimal
  activeLiquidityUSD_not: Ethereum_BigDecimal
  activeLiquidityUSD_gt: Ethereum_BigDecimal
  activeLiquidityUSD_lt: Ethereum_BigDecimal
  activeLiquidityUSD_gte: Ethereum_BigDecimal
  activeLiquidityUSD_lte: Ethereum_BigDecimal
  activeLiquidityUSD_in: [Ethereum_BigDecimal!]
  activeLiquidityUSD_not_in: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValueUSD: Ethereum_BigDecimal
  uncollectedProtocolSideValueUSD_not: Ethereum_BigDecimal
  uncollectedProtocolSideValueUSD_gt: Ethereum_BigDecimal
  uncollectedProtocolSideValueUSD_lt: Ethereum_BigDecimal
  uncollectedProtocolSideValueUSD_gte: Ethereum_BigDecimal
  uncollectedProtocolSideValueUSD_lte: Ethereum_BigDecimal
  uncollectedProtocolSideValueUSD_in: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValueUSD_not_in: [Ethereum_BigDecimal!]
  uncollectedSupplySideValueUSD: Ethereum_BigDecimal
  uncollectedSupplySideValueUSD_not: Ethereum_BigDecimal
  uncollectedSupplySideValueUSD_gt: Ethereum_BigDecimal
  uncollectedSupplySideValueUSD_lt: Ethereum_BigDecimal
  uncollectedSupplySideValueUSD_gte: Ethereum_BigDecimal
  uncollectedSupplySideValueUSD_lte: Ethereum_BigDecimal
  uncollectedSupplySideValueUSD_in: [Ethereum_BigDecimal!]
  uncollectedSupplySideValueUSD_not_in: [Ethereum_BigDecimal!]
  protocolControlledValueUSD: Ethereum_BigDecimal
  protocolControlledValueUSD_not: Ethereum_BigDecimal
  protocolControlledValueUSD_gt: Ethereum_BigDecimal
  protocolControlledValueUSD_lt: Ethereum_BigDecimal
  protocolControlledValueUSD_gte: Ethereum_BigDecimal
  protocolControlledValueUSD_lte: Ethereum_BigDecimal
  protocolControlledValueUSD_in: [Ethereum_BigDecimal!]
  protocolControlledValueUSD_not_in: [Ethereum_BigDecimal!]
  dailyVolumeUSD: Ethereum_BigDecimal
  dailyVolumeUSD_not: Ethereum_BigDecimal
  dailyVolumeUSD_gt: Ethereum_BigDecimal
  dailyVolumeUSD_lt: Ethereum_BigDecimal
  dailyVolumeUSD_gte: Ethereum_BigDecimal
  dailyVolumeUSD_lte: Ethereum_BigDecimal
  dailyVolumeUSD_in: [Ethereum_BigDecimal!]
  dailyVolumeUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeVolumeUSD: Ethereum_BigDecimal
  cumulativeVolumeUSD_not: Ethereum_BigDecimal
  cumulativeVolumeUSD_gt: Ethereum_BigDecimal
  cumulativeVolumeUSD_lt: Ethereum_BigDecimal
  cumulativeVolumeUSD_gte: Ethereum_BigDecimal
  cumulativeVolumeUSD_lte: Ethereum_BigDecimal
  cumulativeVolumeUSD_in: [Ethereum_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Ethereum_BigDecimal!]
  dailySupplySideRevenueUSD: Ethereum_BigDecimal
  dailySupplySideRevenueUSD_not: Ethereum_BigDecimal
  dailySupplySideRevenueUSD_gt: Ethereum_BigDecimal
  dailySupplySideRevenueUSD_lt: Ethereum_BigDecimal
  dailySupplySideRevenueUSD_gte: Ethereum_BigDecimal
  dailySupplySideRevenueUSD_lte: Ethereum_BigDecimal
  dailySupplySideRevenueUSD_in: [Ethereum_BigDecimal!]
  dailySupplySideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  dailyProtocolSideRevenueUSD: Ethereum_BigDecimal
  dailyProtocolSideRevenueUSD_not: Ethereum_BigDecimal
  dailyProtocolSideRevenueUSD_gt: Ethereum_BigDecimal
  dailyProtocolSideRevenueUSD_lt: Ethereum_BigDecimal
  dailyProtocolSideRevenueUSD_gte: Ethereum_BigDecimal
  dailyProtocolSideRevenueUSD_lte: Ethereum_BigDecimal
  dailyProtocolSideRevenueUSD_in: [Ethereum_BigDecimal!]
  dailyProtocolSideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  dailyTotalRevenueUSD: Ethereum_BigDecimal
  dailyTotalRevenueUSD_not: Ethereum_BigDecimal
  dailyTotalRevenueUSD_gt: Ethereum_BigDecimal
  dailyTotalRevenueUSD_lt: Ethereum_BigDecimal
  dailyTotalRevenueUSD_gte: Ethereum_BigDecimal
  dailyTotalRevenueUSD_lte: Ethereum_BigDecimal
  dailyTotalRevenueUSD_in: [Ethereum_BigDecimal!]
  dailyTotalRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeTotalRevenueUSD: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_not: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Ethereum_BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_FinancialsDailySnapshot_filter]
  or: [Ethereum_FinancialsDailySnapshot_filter]
}

enum Ethereum_FinancialsDailySnapshot_orderBy {
  id
  day
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  totalValueLockedUSD
  totalLiquidityUSD
  activeLiquidityUSD
  uncollectedProtocolSideValueUSD
  uncollectedSupplySideValueUSD
  protocolControlledValueUSD
  dailyVolumeUSD
  cumulativeVolumeUSD
  dailySupplySideRevenueUSD
  cumulativeSupplySideRevenueUSD
  dailyProtocolSideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  dailyTotalRevenueUSD
  cumulativeTotalRevenueUSD
  timestamp
  blockNumber
}

"""
8 bytes signed integer

"""
scalar Ethereum_Int8

type Ethereum_LiquidityPool {
  """ Smart contract address of the pool """
  id: Ethereum_Bytes!
  """ The protocol this pool belongs to """
  protocol: Ethereum_DexAmmProtocol!
  """ Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT) """
  name: String
  """ Symbol of liquidity pool (e.g. 3CRV) """
  symbol: String
  """ Token that is to represent ownership of liquidity """
  liquidityToken: Ethereum_Token
  """ Type of token used to track liquidity """
  liquidityTokenType: Ethereum_TokenType
  """ Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer 
  """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Ethereum_Token_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_Token_filter): [Ethereum_Token!]!
  """ Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon 
  """
  rewardTokens(skip: Int = 0, first: Int = 100, orderBy: Ethereum_RewardToken_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_RewardToken_filter): [Ethereum_RewardToken!]
  """ Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee. ) 
  """
  fees(skip: Int = 0, first: Int = 100, orderBy: Ethereum_LiquidityPoolFee_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_LiquidityPoolFee_filter): [Ethereum_LiquidityPoolFee!]!
  """ Whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol. 
  """
  isSingleSided: Boolean!
  """ Creation timestamp """
  createdTimestamp: BigInt!
  """ Creation block number """
  createdBlockNumber: BigInt!
  """ Current tick representing the price of token0/token1 """
  tick: BigInt
  """ Current TVL (Total Value Locked) of this pool in USD """
  totalValueLockedUSD: Ethereum_BigDecimal!
  """ The sum of all active and non-active liquidity for this pool. """
  totalLiquidity: BigInt!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Ethereum_BigDecimal!
  """ All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidity: BigInt!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Ethereum_BigDecimal!
  """ All protocol-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  """ All protocol-side value locking in USD that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideValuesUSD: [Ethereum_BigDecimal!]!
  """ All supply-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  """ All supply-side value locked in USD that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideValuesUSD: [Ethereum_BigDecimal!]!
  """ All revenue generated by the liquidity pool, accrued to the supply side. 
  """
  cumulativeSupplySideRevenueUSD: Ethereum_BigDecimal!
  """ All revenue generated by the liquidity pool, accrued to the protocol. 
  """
  cumulativeProtocolSideRevenueUSD: Ethereum_BigDecimal!
  """ All revenue generated by the liquidity pool. """
  cumulativeTotalRevenueUSD: Ethereum_BigDecimal!
  """ All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenAmount: [BigInt!]!
  """ All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenUSD: [Ethereum_BigDecimal!]!
  """ All historical trade volume occurred in this pool, in USD """
  cumulativeVolumeUSD: Ethereum_BigDecimal!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalancesUSD: [Ethereum_BigDecimal!]!
  """ Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool 
  """
  inputTokenWeights: [Ethereum_BigDecimal!]!
  """ Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. 
  """
  stakedOutputTokenAmount: BigInt
  """ Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [Ethereum_BigDecimal!]
  """ Total number of deposits (add liquidity) """
  cumulativeDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) """
  cumulativeWithdrawCount: Int!
  """ Total number of trades (swaps) """
  cumulativeSwapCount: Int!
  """ All positions in this market """
  positions(skip: Int = 0, first: Int = 100, orderBy: Ethereum_Position_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_Position_filter): [Ethereum_Position!]!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Day ID of the most recent daily snapshot """
  lastSnapshotDayID: Int!
  """ Hour ID of the most recent hourly snapshot """
  lastSnapshotHourID: Int!
  """ Timestamp of the last time this entity was updated """
  lastUpdateTimestamp: BigInt!
  """ Block number of the last time this entity was updated """
  lastUpdateBlockNumber: BigInt!
  """ Liquidity pool daily snapshots """
  dailySnapshots(skip: Int = 0, first: Int = 100, orderBy: Ethereum_LiquidityPoolDailySnapshot_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_LiquidityPoolDailySnapshot_filter): [Ethereum_LiquidityPoolDailySnapshot!]!
  """ Liquidity pool hourly snapshots """
  hourlySnapshots(skip: Int = 0, first: Int = 100, orderBy: Ethereum_LiquidityPoolHourlySnapshot_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_LiquidityPoolHourlySnapshot_filter): [Ethereum_LiquidityPoolHourlySnapshot!]!
  """ All deposit (add liquidity) events occurred in this pool """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Ethereum_Deposit_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_Deposit_filter): [Ethereum_Deposit!]!
  """ All withdraw (remove liquidity) events occurred in this pool """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Ethereum_Withdraw_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_Withdraw_filter): [Ethereum_Withdraw!]!
  """ All trade (swap) events occurred in this pool """
  swaps(skip: Int = 0, first: Int = 100, orderBy: Ethereum_Swap_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_Swap_filter): [Ethereum_Swap!]!
}

type Ethereum_LiquidityPoolDailySnapshot {
  """ { Smart contract address of the pool }-{ # of days since Unix epoch time } 
  """
  id: Ethereum_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ The protocol this snapshot belongs to """
  protocol: Ethereum_DexAmmProtocol!
  """ The pool this snapshot belongs to """
  pool: Ethereum_LiquidityPool!
  """ Current tick representing the price of token0/token1 """
  tick: BigInt
  """ Current TVL (Total Value Locked) of this pool """
  totalValueLockedUSD: Ethereum_BigDecimal!
  """ The sum of all active and non-active liquidity for this pool. """
  totalLiquidity: BigInt!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Ethereum_BigDecimal!
  """ All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidity: BigInt!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Ethereum_BigDecimal!
  """ All protocol-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  """ All protocol-side value locking in USD that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideValuesUSD: [Ethereum_BigDecimal!]!
  """ All supply-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  """ All supply-side value locked in USD that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideValuesUSD: [Ethereum_BigDecimal!]!
  """ All revenue generated by the liquidity pool, accrued to the supply side. 
  """
  cumulativeSupplySideRevenueUSD: Ethereum_BigDecimal!
  """ Daily revenue generated by the liquidity pool, accrued to the supply side. 
  """
  dailySupplySideRevenueUSD: Ethereum_BigDecimal!
  """ All revenue generated by the liquidity pool, accrued to the protocol. 
  """
  cumulativeProtocolSideRevenueUSD: Ethereum_BigDecimal!
  """ Daily revenue generated by the liquidity pool, accrued to the protocol. 
  """
  dailyProtocolSideRevenueUSD: Ethereum_BigDecimal!
  """ All revenue generated by the liquidity pool. """
  cumulativeTotalRevenueUSD: Ethereum_BigDecimal!
  """ Daily revenue generated by the liquidity pool. """
  dailyTotalRevenueUSD: Ethereum_BigDecimal!
  """ All historical trade volume occurred in this pool, in USD """
  cumulativeVolumeUSD: Ethereum_BigDecimal!
  """ All trade volume occurred in a given day, in USD """
  dailyVolumeUSD: Ethereum_BigDecimal!
  """ All trade volume , in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenAmount: [BigInt!]!
  """ All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  dailyVolumeByTokenAmount: [BigInt!]!
  """ All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenUSD: [Ethereum_BigDecimal!]!
  """ All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  dailyVolumeByTokenUSD: [Ethereum_BigDecimal!]!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalancesUSD: [Ethereum_BigDecimal!]!
  """ Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool 
  """
  inputTokenWeights: [Ethereum_BigDecimal!]!
  """ Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. 
  """
  stakedOutputTokenAmount: BigInt
  """ Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [Ethereum_BigDecimal!]
  """ Total number of deposits (add liquidity) """
  cumulativeDepositCount: Int!
  """ Total number of deposits (add liquidity) in a day """
  dailyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) """
  cumulativeWithdrawCount: Int!
  """ Total number of withdrawals (remove liquidity) in a day """
  dailyWithdrawCount: Int!
  """ Total number of trades (swaps) """
  cumulativeSwapCount: Int!
  """ Total number of trades (swaps) in a day """
  dailySwapCount: Int!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Ethereum_LiquidityPoolDailySnapshot_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Ethereum_DexAmmProtocol_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Ethereum_LiquidityPool_filter
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  totalValueLockedUSD: Ethereum_BigDecimal
  totalValueLockedUSD_not: Ethereum_BigDecimal
  totalValueLockedUSD_gt: Ethereum_BigDecimal
  totalValueLockedUSD_lt: Ethereum_BigDecimal
  totalValueLockedUSD_gte: Ethereum_BigDecimal
  totalValueLockedUSD_lte: Ethereum_BigDecimal
  totalValueLockedUSD_in: [Ethereum_BigDecimal!]
  totalValueLockedUSD_not_in: [Ethereum_BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalLiquidityUSD: Ethereum_BigDecimal
  totalLiquidityUSD_not: Ethereum_BigDecimal
  totalLiquidityUSD_gt: Ethereum_BigDecimal
  totalLiquidityUSD_lt: Ethereum_BigDecimal
  totalLiquidityUSD_gte: Ethereum_BigDecimal
  totalLiquidityUSD_lte: Ethereum_BigDecimal
  totalLiquidityUSD_in: [Ethereum_BigDecimal!]
  totalLiquidityUSD_not_in: [Ethereum_BigDecimal!]
  activeLiquidity: BigInt
  activeLiquidity_not: BigInt
  activeLiquidity_gt: BigInt
  activeLiquidity_lt: BigInt
  activeLiquidity_gte: BigInt
  activeLiquidity_lte: BigInt
  activeLiquidity_in: [BigInt!]
  activeLiquidity_not_in: [BigInt!]
  activeLiquidityUSD: Ethereum_BigDecimal
  activeLiquidityUSD_not: Ethereum_BigDecimal
  activeLiquidityUSD_gt: Ethereum_BigDecimal
  activeLiquidityUSD_lt: Ethereum_BigDecimal
  activeLiquidityUSD_gte: Ethereum_BigDecimal
  activeLiquidityUSD_lte: Ethereum_BigDecimal
  activeLiquidityUSD_in: [Ethereum_BigDecimal!]
  activeLiquidityUSD_not_in: [Ethereum_BigDecimal!]
  uncollectedProtocolSideTokenAmounts: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedProtocolSideValuesUSD: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains_nocase: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  uncollectedSupplySideTokenAmounts: [BigInt!]
  uncollectedSupplySideTokenAmounts_not: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedSupplySideValuesUSD: [Ethereum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not: [Ethereum_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains: [Ethereum_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains_nocase: [Ethereum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains: [Ethereum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  dailySupplySideRevenueUSD: Ethereum_BigDecimal
  dailySupplySideRevenueUSD_not: Ethereum_BigDecimal
  dailySupplySideRevenueUSD_gt: Ethereum_BigDecimal
  dailySupplySideRevenueUSD_lt: Ethereum_BigDecimal
  dailySupplySideRevenueUSD_gte: Ethereum_BigDecimal
  dailySupplySideRevenueUSD_lte: Ethereum_BigDecimal
  dailySupplySideRevenueUSD_in: [Ethereum_BigDecimal!]
  dailySupplySideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  dailyProtocolSideRevenueUSD: Ethereum_BigDecimal
  dailyProtocolSideRevenueUSD_not: Ethereum_BigDecimal
  dailyProtocolSideRevenueUSD_gt: Ethereum_BigDecimal
  dailyProtocolSideRevenueUSD_lt: Ethereum_BigDecimal
  dailyProtocolSideRevenueUSD_gte: Ethereum_BigDecimal
  dailyProtocolSideRevenueUSD_lte: Ethereum_BigDecimal
  dailyProtocolSideRevenueUSD_in: [Ethereum_BigDecimal!]
  dailyProtocolSideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeTotalRevenueUSD: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_not: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Ethereum_BigDecimal!]
  dailyTotalRevenueUSD: Ethereum_BigDecimal
  dailyTotalRevenueUSD_not: Ethereum_BigDecimal
  dailyTotalRevenueUSD_gt: Ethereum_BigDecimal
  dailyTotalRevenueUSD_lt: Ethereum_BigDecimal
  dailyTotalRevenueUSD_gte: Ethereum_BigDecimal
  dailyTotalRevenueUSD_lte: Ethereum_BigDecimal
  dailyTotalRevenueUSD_in: [Ethereum_BigDecimal!]
  dailyTotalRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeVolumeUSD: Ethereum_BigDecimal
  cumulativeVolumeUSD_not: Ethereum_BigDecimal
  cumulativeVolumeUSD_gt: Ethereum_BigDecimal
  cumulativeVolumeUSD_lt: Ethereum_BigDecimal
  cumulativeVolumeUSD_gte: Ethereum_BigDecimal
  cumulativeVolumeUSD_lte: Ethereum_BigDecimal
  cumulativeVolumeUSD_in: [Ethereum_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Ethereum_BigDecimal!]
  dailyVolumeUSD: Ethereum_BigDecimal
  dailyVolumeUSD_not: Ethereum_BigDecimal
  dailyVolumeUSD_gt: Ethereum_BigDecimal
  dailyVolumeUSD_lt: Ethereum_BigDecimal
  dailyVolumeUSD_gte: Ethereum_BigDecimal
  dailyVolumeUSD_lte: Ethereum_BigDecimal
  dailyVolumeUSD_in: [Ethereum_BigDecimal!]
  dailyVolumeUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenAmount: [BigInt!]
  cumulativeVolumeByTokenAmount_not: [BigInt!]
  cumulativeVolumeByTokenAmount_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  dailyVolumeByTokenAmount: [BigInt!]
  dailyVolumeByTokenAmount_not: [BigInt!]
  dailyVolumeByTokenAmount_contains: [BigInt!]
  dailyVolumeByTokenAmount_contains_nocase: [BigInt!]
  dailyVolumeByTokenAmount_not_contains: [BigInt!]
  dailyVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenUSD: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains_nocase: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  dailyVolumeByTokenUSD: [Ethereum_BigDecimal!]
  dailyVolumeByTokenUSD_not: [Ethereum_BigDecimal!]
  dailyVolumeByTokenUSD_contains: [Ethereum_BigDecimal!]
  dailyVolumeByTokenUSD_contains_nocase: [Ethereum_BigDecimal!]
  dailyVolumeByTokenUSD_not_contains: [Ethereum_BigDecimal!]
  dailyVolumeByTokenUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenBalancesUSD: [Ethereum_BigDecimal!]
  inputTokenBalancesUSD_not: [Ethereum_BigDecimal!]
  inputTokenBalancesUSD_contains: [Ethereum_BigDecimal!]
  inputTokenBalancesUSD_contains_nocase: [Ethereum_BigDecimal!]
  inputTokenBalancesUSD_not_contains: [Ethereum_BigDecimal!]
  inputTokenBalancesUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  inputTokenWeights: [Ethereum_BigDecimal!]
  inputTokenWeights_not: [Ethereum_BigDecimal!]
  inputTokenWeights_contains: [Ethereum_BigDecimal!]
  inputTokenWeights_contains_nocase: [Ethereum_BigDecimal!]
  inputTokenWeights_not_contains: [Ethereum_BigDecimal!]
  inputTokenWeights_not_contains_nocase: [Ethereum_BigDecimal!]
  stakedOutputTokenAmount: BigInt
  stakedOutputTokenAmount_not: BigInt
  stakedOutputTokenAmount_gt: BigInt
  stakedOutputTokenAmount_lt: BigInt
  stakedOutputTokenAmount_gte: BigInt
  stakedOutputTokenAmount_lte: BigInt
  stakedOutputTokenAmount_in: [BigInt!]
  stakedOutputTokenAmount_not_in: [BigInt!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [Ethereum_BigDecimal!]
  rewardTokenEmissionsUSD_not: [Ethereum_BigDecimal!]
  rewardTokenEmissionsUSD_contains: [Ethereum_BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [Ethereum_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [Ethereum_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  cumulativeDepositCount: Int
  cumulativeDepositCount_not: Int
  cumulativeDepositCount_gt: Int
  cumulativeDepositCount_lt: Int
  cumulativeDepositCount_gte: Int
  cumulativeDepositCount_lte: Int
  cumulativeDepositCount_in: [Int!]
  cumulativeDepositCount_not_in: [Int!]
  dailyDepositCount: Int
  dailyDepositCount_not: Int
  dailyDepositCount_gt: Int
  dailyDepositCount_lt: Int
  dailyDepositCount_gte: Int
  dailyDepositCount_lte: Int
  dailyDepositCount_in: [Int!]
  dailyDepositCount_not_in: [Int!]
  cumulativeWithdrawCount: Int
  cumulativeWithdrawCount_not: Int
  cumulativeWithdrawCount_gt: Int
  cumulativeWithdrawCount_lt: Int
  cumulativeWithdrawCount_gte: Int
  cumulativeWithdrawCount_lte: Int
  cumulativeWithdrawCount_in: [Int!]
  cumulativeWithdrawCount_not_in: [Int!]
  dailyWithdrawCount: Int
  dailyWithdrawCount_not: Int
  dailyWithdrawCount_gt: Int
  dailyWithdrawCount_lt: Int
  dailyWithdrawCount_gte: Int
  dailyWithdrawCount_lte: Int
  dailyWithdrawCount_in: [Int!]
  dailyWithdrawCount_not_in: [Int!]
  cumulativeSwapCount: Int
  cumulativeSwapCount_not: Int
  cumulativeSwapCount_gt: Int
  cumulativeSwapCount_lt: Int
  cumulativeSwapCount_gte: Int
  cumulativeSwapCount_lte: Int
  cumulativeSwapCount_in: [Int!]
  cumulativeSwapCount_not_in: [Int!]
  dailySwapCount: Int
  dailySwapCount_not: Int
  dailySwapCount_gt: Int
  dailySwapCount_lt: Int
  dailySwapCount_gte: Int
  dailySwapCount_lte: Int
  dailySwapCount_in: [Int!]
  dailySwapCount_not_in: [Int!]
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_LiquidityPoolDailySnapshot_filter]
  or: [Ethereum_LiquidityPoolDailySnapshot_filter]
}

enum Ethereum_LiquidityPoolDailySnapshot_orderBy {
  id
  day
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  tick
  totalValueLockedUSD
  totalLiquidity
  totalLiquidityUSD
  activeLiquidity
  activeLiquidityUSD
  uncollectedProtocolSideTokenAmounts
  uncollectedProtocolSideValuesUSD
  uncollectedSupplySideTokenAmounts
  uncollectedSupplySideValuesUSD
  cumulativeSupplySideRevenueUSD
  dailySupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  dailyProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  dailyTotalRevenueUSD
  cumulativeVolumeUSD
  dailyVolumeUSD
  cumulativeVolumeByTokenAmount
  dailyVolumeByTokenAmount
  cumulativeVolumeByTokenUSD
  dailyVolumeByTokenUSD
  inputTokenBalances
  inputTokenBalancesUSD
  inputTokenWeights
  stakedOutputTokenAmount
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  cumulativeDepositCount
  dailyDepositCount
  cumulativeWithdrawCount
  dailyWithdrawCount
  cumulativeSwapCount
  dailySwapCount
  positionCount
  openPositionCount
  closedPositionCount
  timestamp
  blockNumber
}

type Ethereum_LiquidityPoolFee {
  """ { Fee type }-{ Pool address } """
  id: Ethereum_Bytes!
  """ Fee as a percentage of the trade (swap) amount. Does not always apply 
  """
  feePercentage: Ethereum_BigDecimal
  """ Type of fee this pool uses """
  feeType: Ethereum_LiquidityPoolFeeType!
}

enum Ethereum_LiquidityPoolFeeType {
  """ Total fixed fee paid by the user per trade, as a percentage of the traded amount. e.g. 0.3% for Uniswap v2, 0.3% for Sushiswap, 0.04% for Curve v1. 
  """
  FIXED_TRADING_FEE
  """ Some protocols use tiered fees instead of fixed fee (e.g. DYDX, DODO). Set `feePercentage` as 0 but handle the tiered fees in the mapping code. 
  """
  TIERED_TRADING_FEE
  """ Some protocols use dynamic fees instead of fixed fee (e.g. Balancer v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. 
  """
  DYNAMIC_TRADING_FEE
  """ Fixed fee that's paid to the LP, as a percentage of the traded amount. e.g. 0.25% for Sushiswap, 0.02% for Curve v1. 
  """
  FIXED_LP_FEE
  """ Some protocols use dynamic LP fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. 
  """
  DYNAMIC_LP_FEE
  """ Fixed fee that's paid to the protocol, as a percentage of the traded amount. e.g. 0.05% for Sushiswap, 0.02% for Curve v1. 
  """
  FIXED_PROTOCOL_FEE
  """ Some protocols use dynamic protocol fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. 
  """
  DYNAMIC_PROTOCOL_FEE
  """ One-time fee charged by the protocol during deposit, in percentages of the deposit token 
  """
  DEPOSIT_FEE
  """ One-time fee charged by the protocol (e.g. Bancor v3) during withdrawal, in percentages of the withdrawal token 
  """
  WITHDRAWAL_FEE
}

input Ethereum_LiquidityPoolFee_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  feePercentage: Ethereum_BigDecimal
  feePercentage_not: Ethereum_BigDecimal
  feePercentage_gt: Ethereum_BigDecimal
  feePercentage_lt: Ethereum_BigDecimal
  feePercentage_gte: Ethereum_BigDecimal
  feePercentage_lte: Ethereum_BigDecimal
  feePercentage_in: [Ethereum_BigDecimal!]
  feePercentage_not_in: [Ethereum_BigDecimal!]
  feeType: Ethereum_LiquidityPoolFeeType
  feeType_not: Ethereum_LiquidityPoolFeeType
  feeType_in: [Ethereum_LiquidityPoolFeeType!]
  feeType_not_in: [Ethereum_LiquidityPoolFeeType!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_LiquidityPoolFee_filter]
  or: [Ethereum_LiquidityPoolFee_filter]
}

enum Ethereum_LiquidityPoolFee_orderBy {
  id
  feePercentage
  feeType
}

type Ethereum_LiquidityPoolHourlySnapshot {
  """ { Smart contract address of the pool }-{ # of hours since Unix epoch time } 
  """
  id: Ethereum_Bytes!
  """ Number of hours since Unix epoch time """
  hour: Int!
  """ The protocol this snapshot belongs to """
  protocol: Ethereum_DexAmmProtocol!
  """ The pool this snapshot belongs to """
  pool: Ethereum_LiquidityPool!
  """ Current tick representing the price of token0/token1 """
  tick: BigInt
  """ Current TVL (Total Value Locked) of this pool """
  totalValueLockedUSD: Ethereum_BigDecimal!
  """ The sum of all active and non-active liquidity for this pool. """
  totalLiquidity: BigInt!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Ethereum_BigDecimal!
  """ All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidity: BigInt!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Ethereum_BigDecimal!
  """ All protocol-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  """ All protocol-side value locking in USD that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideValuesUSD: [Ethereum_BigDecimal!]!
  """ All supply-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  """ All supply-side value locked in USD that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideValuesUSD: [Ethereum_BigDecimal!]!
  """ All revenue generated by the liquidity pool, accrued to the supply side. 
  """
  cumulativeSupplySideRevenueUSD: Ethereum_BigDecimal!
  """ Hourly revenue generated by the liquidity pool, accrued to the supply side. 
  """
  hourlySupplySideRevenueUSD: Ethereum_BigDecimal!
  """ All revenue generated by the liquidity pool, accrued to the protocol. 
  """
  cumulativeProtocolSideRevenueUSD: Ethereum_BigDecimal!
  """ Hourly revenue generated by the liquidity pool, accrued to the protocol. 
  """
  hourlyProtocolSideRevenueUSD: Ethereum_BigDecimal!
  """ All revenue generated by the liquidity pool. """
  cumulativeTotalRevenueUSD: Ethereum_BigDecimal!
  """ Hourly revenue generated by the liquidity pool. """
  hourlyTotalRevenueUSD: Ethereum_BigDecimal!
  """ All historical trade volume occurred in this pool, in USD """
  cumulativeVolumeUSD: Ethereum_BigDecimal!
  """ All trade volume occurred in a given hour, in USD """
  hourlyVolumeUSD: Ethereum_BigDecimal!
  """ All trade volume, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenAmount: [BigInt!]!
  """ All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  hourlyVolumeByTokenAmount: [BigInt!]!
  """ All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenUSD: [Ethereum_BigDecimal!]!
  """ All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  hourlyVolumeByTokenUSD: [Ethereum_BigDecimal!]!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalancesUSD: [Ethereum_BigDecimal!]!
  """ Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool 
  """
  inputTokenWeights: [Ethereum_BigDecimal!]!
  """ Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. 
  """
  stakedOutputTokenAmount: BigInt
  """ Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [Ethereum_BigDecimal!]
  """ Total number of deposits (add liquidity) """
  cumulativeDepositCount: Int!
  """ Total number of deposits (add liquidity) in an hour """
  hourlyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) """
  cumulativeWithdrawCount: Int!
  """ Total number of withdrawals (remove liquidity) in an hour """
  hourlyWithdrawCount: Int!
  """ Total number of trades (swaps) """
  cumulativeSwapCount: Int!
  """ Total number of trades (swaps) in an hour """
  hourlySwapCount: Int!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Ethereum_LiquidityPoolHourlySnapshot_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  hour: Int
  hour_not: Int
  hour_gt: Int
  hour_lt: Int
  hour_gte: Int
  hour_lte: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Ethereum_DexAmmProtocol_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Ethereum_LiquidityPool_filter
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  totalValueLockedUSD: Ethereum_BigDecimal
  totalValueLockedUSD_not: Ethereum_BigDecimal
  totalValueLockedUSD_gt: Ethereum_BigDecimal
  totalValueLockedUSD_lt: Ethereum_BigDecimal
  totalValueLockedUSD_gte: Ethereum_BigDecimal
  totalValueLockedUSD_lte: Ethereum_BigDecimal
  totalValueLockedUSD_in: [Ethereum_BigDecimal!]
  totalValueLockedUSD_not_in: [Ethereum_BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalLiquidityUSD: Ethereum_BigDecimal
  totalLiquidityUSD_not: Ethereum_BigDecimal
  totalLiquidityUSD_gt: Ethereum_BigDecimal
  totalLiquidityUSD_lt: Ethereum_BigDecimal
  totalLiquidityUSD_gte: Ethereum_BigDecimal
  totalLiquidityUSD_lte: Ethereum_BigDecimal
  totalLiquidityUSD_in: [Ethereum_BigDecimal!]
  totalLiquidityUSD_not_in: [Ethereum_BigDecimal!]
  activeLiquidity: BigInt
  activeLiquidity_not: BigInt
  activeLiquidity_gt: BigInt
  activeLiquidity_lt: BigInt
  activeLiquidity_gte: BigInt
  activeLiquidity_lte: BigInt
  activeLiquidity_in: [BigInt!]
  activeLiquidity_not_in: [BigInt!]
  activeLiquidityUSD: Ethereum_BigDecimal
  activeLiquidityUSD_not: Ethereum_BigDecimal
  activeLiquidityUSD_gt: Ethereum_BigDecimal
  activeLiquidityUSD_lt: Ethereum_BigDecimal
  activeLiquidityUSD_gte: Ethereum_BigDecimal
  activeLiquidityUSD_lte: Ethereum_BigDecimal
  activeLiquidityUSD_in: [Ethereum_BigDecimal!]
  activeLiquidityUSD_not_in: [Ethereum_BigDecimal!]
  uncollectedProtocolSideTokenAmounts: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedProtocolSideValuesUSD: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains_nocase: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  uncollectedSupplySideTokenAmounts: [BigInt!]
  uncollectedSupplySideTokenAmounts_not: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedSupplySideValuesUSD: [Ethereum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not: [Ethereum_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains: [Ethereum_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains_nocase: [Ethereum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains: [Ethereum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  hourlySupplySideRevenueUSD: Ethereum_BigDecimal
  hourlySupplySideRevenueUSD_not: Ethereum_BigDecimal
  hourlySupplySideRevenueUSD_gt: Ethereum_BigDecimal
  hourlySupplySideRevenueUSD_lt: Ethereum_BigDecimal
  hourlySupplySideRevenueUSD_gte: Ethereum_BigDecimal
  hourlySupplySideRevenueUSD_lte: Ethereum_BigDecimal
  hourlySupplySideRevenueUSD_in: [Ethereum_BigDecimal!]
  hourlySupplySideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  hourlyProtocolSideRevenueUSD: Ethereum_BigDecimal
  hourlyProtocolSideRevenueUSD_not: Ethereum_BigDecimal
  hourlyProtocolSideRevenueUSD_gt: Ethereum_BigDecimal
  hourlyProtocolSideRevenueUSD_lt: Ethereum_BigDecimal
  hourlyProtocolSideRevenueUSD_gte: Ethereum_BigDecimal
  hourlyProtocolSideRevenueUSD_lte: Ethereum_BigDecimal
  hourlyProtocolSideRevenueUSD_in: [Ethereum_BigDecimal!]
  hourlyProtocolSideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeTotalRevenueUSD: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_not: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Ethereum_BigDecimal!]
  hourlyTotalRevenueUSD: Ethereum_BigDecimal
  hourlyTotalRevenueUSD_not: Ethereum_BigDecimal
  hourlyTotalRevenueUSD_gt: Ethereum_BigDecimal
  hourlyTotalRevenueUSD_lt: Ethereum_BigDecimal
  hourlyTotalRevenueUSD_gte: Ethereum_BigDecimal
  hourlyTotalRevenueUSD_lte: Ethereum_BigDecimal
  hourlyTotalRevenueUSD_in: [Ethereum_BigDecimal!]
  hourlyTotalRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeVolumeUSD: Ethereum_BigDecimal
  cumulativeVolumeUSD_not: Ethereum_BigDecimal
  cumulativeVolumeUSD_gt: Ethereum_BigDecimal
  cumulativeVolumeUSD_lt: Ethereum_BigDecimal
  cumulativeVolumeUSD_gte: Ethereum_BigDecimal
  cumulativeVolumeUSD_lte: Ethereum_BigDecimal
  cumulativeVolumeUSD_in: [Ethereum_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Ethereum_BigDecimal!]
  hourlyVolumeUSD: Ethereum_BigDecimal
  hourlyVolumeUSD_not: Ethereum_BigDecimal
  hourlyVolumeUSD_gt: Ethereum_BigDecimal
  hourlyVolumeUSD_lt: Ethereum_BigDecimal
  hourlyVolumeUSD_gte: Ethereum_BigDecimal
  hourlyVolumeUSD_lte: Ethereum_BigDecimal
  hourlyVolumeUSD_in: [Ethereum_BigDecimal!]
  hourlyVolumeUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenAmount: [BigInt!]
  cumulativeVolumeByTokenAmount_not: [BigInt!]
  cumulativeVolumeByTokenAmount_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  hourlyVolumeByTokenAmount: [BigInt!]
  hourlyVolumeByTokenAmount_not: [BigInt!]
  hourlyVolumeByTokenAmount_contains: [BigInt!]
  hourlyVolumeByTokenAmount_contains_nocase: [BigInt!]
  hourlyVolumeByTokenAmount_not_contains: [BigInt!]
  hourlyVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenUSD: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains_nocase: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  hourlyVolumeByTokenUSD: [Ethereum_BigDecimal!]
  hourlyVolumeByTokenUSD_not: [Ethereum_BigDecimal!]
  hourlyVolumeByTokenUSD_contains: [Ethereum_BigDecimal!]
  hourlyVolumeByTokenUSD_contains_nocase: [Ethereum_BigDecimal!]
  hourlyVolumeByTokenUSD_not_contains: [Ethereum_BigDecimal!]
  hourlyVolumeByTokenUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenBalancesUSD: [Ethereum_BigDecimal!]
  inputTokenBalancesUSD_not: [Ethereum_BigDecimal!]
  inputTokenBalancesUSD_contains: [Ethereum_BigDecimal!]
  inputTokenBalancesUSD_contains_nocase: [Ethereum_BigDecimal!]
  inputTokenBalancesUSD_not_contains: [Ethereum_BigDecimal!]
  inputTokenBalancesUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  inputTokenWeights: [Ethereum_BigDecimal!]
  inputTokenWeights_not: [Ethereum_BigDecimal!]
  inputTokenWeights_contains: [Ethereum_BigDecimal!]
  inputTokenWeights_contains_nocase: [Ethereum_BigDecimal!]
  inputTokenWeights_not_contains: [Ethereum_BigDecimal!]
  inputTokenWeights_not_contains_nocase: [Ethereum_BigDecimal!]
  stakedOutputTokenAmount: BigInt
  stakedOutputTokenAmount_not: BigInt
  stakedOutputTokenAmount_gt: BigInt
  stakedOutputTokenAmount_lt: BigInt
  stakedOutputTokenAmount_gte: BigInt
  stakedOutputTokenAmount_lte: BigInt
  stakedOutputTokenAmount_in: [BigInt!]
  stakedOutputTokenAmount_not_in: [BigInt!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [Ethereum_BigDecimal!]
  rewardTokenEmissionsUSD_not: [Ethereum_BigDecimal!]
  rewardTokenEmissionsUSD_contains: [Ethereum_BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [Ethereum_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [Ethereum_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  cumulativeDepositCount: Int
  cumulativeDepositCount_not: Int
  cumulativeDepositCount_gt: Int
  cumulativeDepositCount_lt: Int
  cumulativeDepositCount_gte: Int
  cumulativeDepositCount_lte: Int
  cumulativeDepositCount_in: [Int!]
  cumulativeDepositCount_not_in: [Int!]
  hourlyDepositCount: Int
  hourlyDepositCount_not: Int
  hourlyDepositCount_gt: Int
  hourlyDepositCount_lt: Int
  hourlyDepositCount_gte: Int
  hourlyDepositCount_lte: Int
  hourlyDepositCount_in: [Int!]
  hourlyDepositCount_not_in: [Int!]
  cumulativeWithdrawCount: Int
  cumulativeWithdrawCount_not: Int
  cumulativeWithdrawCount_gt: Int
  cumulativeWithdrawCount_lt: Int
  cumulativeWithdrawCount_gte: Int
  cumulativeWithdrawCount_lte: Int
  cumulativeWithdrawCount_in: [Int!]
  cumulativeWithdrawCount_not_in: [Int!]
  hourlyWithdrawCount: Int
  hourlyWithdrawCount_not: Int
  hourlyWithdrawCount_gt: Int
  hourlyWithdrawCount_lt: Int
  hourlyWithdrawCount_gte: Int
  hourlyWithdrawCount_lte: Int
  hourlyWithdrawCount_in: [Int!]
  hourlyWithdrawCount_not_in: [Int!]
  cumulativeSwapCount: Int
  cumulativeSwapCount_not: Int
  cumulativeSwapCount_gt: Int
  cumulativeSwapCount_lt: Int
  cumulativeSwapCount_gte: Int
  cumulativeSwapCount_lte: Int
  cumulativeSwapCount_in: [Int!]
  cumulativeSwapCount_not_in: [Int!]
  hourlySwapCount: Int
  hourlySwapCount_not: Int
  hourlySwapCount_gt: Int
  hourlySwapCount_lt: Int
  hourlySwapCount_gte: Int
  hourlySwapCount_lte: Int
  hourlySwapCount_in: [Int!]
  hourlySwapCount_not_in: [Int!]
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_LiquidityPoolHourlySnapshot_filter]
  or: [Ethereum_LiquidityPoolHourlySnapshot_filter]
}

enum Ethereum_LiquidityPoolHourlySnapshot_orderBy {
  id
  hour
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  tick
  totalValueLockedUSD
  totalLiquidity
  totalLiquidityUSD
  activeLiquidity
  activeLiquidityUSD
  uncollectedProtocolSideTokenAmounts
  uncollectedProtocolSideValuesUSD
  uncollectedSupplySideTokenAmounts
  uncollectedSupplySideValuesUSD
  cumulativeSupplySideRevenueUSD
  hourlySupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  hourlyProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  hourlyTotalRevenueUSD
  cumulativeVolumeUSD
  hourlyVolumeUSD
  cumulativeVolumeByTokenAmount
  hourlyVolumeByTokenAmount
  cumulativeVolumeByTokenUSD
  hourlyVolumeByTokenUSD
  inputTokenBalances
  inputTokenBalancesUSD
  inputTokenWeights
  stakedOutputTokenAmount
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  cumulativeDepositCount
  hourlyDepositCount
  cumulativeWithdrawCount
  hourlyWithdrawCount
  cumulativeSwapCount
  hourlySwapCount
  positionCount
  openPositionCount
  closedPositionCount
  timestamp
  blockNumber
}

input Ethereum_LiquidityPool_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Ethereum_DexAmmProtocol_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  liquidityToken: String
  liquidityToken_not: String
  liquidityToken_gt: String
  liquidityToken_lt: String
  liquidityToken_gte: String
  liquidityToken_lte: String
  liquidityToken_in: [String!]
  liquidityToken_not_in: [String!]
  liquidityToken_contains: String
  liquidityToken_contains_nocase: String
  liquidityToken_not_contains: String
  liquidityToken_not_contains_nocase: String
  liquidityToken_starts_with: String
  liquidityToken_starts_with_nocase: String
  liquidityToken_not_starts_with: String
  liquidityToken_not_starts_with_nocase: String
  liquidityToken_ends_with: String
  liquidityToken_ends_with_nocase: String
  liquidityToken_not_ends_with: String
  liquidityToken_not_ends_with_nocase: String
  liquidityToken_: Ethereum_Token_filter
  liquidityTokenType: Ethereum_TokenType
  liquidityTokenType_not: Ethereum_TokenType
  liquidityTokenType_in: [Ethereum_TokenType!]
  liquidityTokenType_not_in: [Ethereum_TokenType!]
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Ethereum_Token_filter
  rewardTokens: [String!]
  rewardTokens_not: [String!]
  rewardTokens_contains: [String!]
  rewardTokens_contains_nocase: [String!]
  rewardTokens_not_contains: [String!]
  rewardTokens_not_contains_nocase: [String!]
  rewardTokens_: Ethereum_RewardToken_filter
  fees: [String!]
  fees_not: [String!]
  fees_contains: [String!]
  fees_contains_nocase: [String!]
  fees_not_contains: [String!]
  fees_not_contains_nocase: [String!]
  fees_: Ethereum_LiquidityPoolFee_filter
  isSingleSided: Boolean
  isSingleSided_not: Boolean
  isSingleSided_in: [Boolean!]
  isSingleSided_not_in: [Boolean!]
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  totalValueLockedUSD: Ethereum_BigDecimal
  totalValueLockedUSD_not: Ethereum_BigDecimal
  totalValueLockedUSD_gt: Ethereum_BigDecimal
  totalValueLockedUSD_lt: Ethereum_BigDecimal
  totalValueLockedUSD_gte: Ethereum_BigDecimal
  totalValueLockedUSD_lte: Ethereum_BigDecimal
  totalValueLockedUSD_in: [Ethereum_BigDecimal!]
  totalValueLockedUSD_not_in: [Ethereum_BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalLiquidityUSD: Ethereum_BigDecimal
  totalLiquidityUSD_not: Ethereum_BigDecimal
  totalLiquidityUSD_gt: Ethereum_BigDecimal
  totalLiquidityUSD_lt: Ethereum_BigDecimal
  totalLiquidityUSD_gte: Ethereum_BigDecimal
  totalLiquidityUSD_lte: Ethereum_BigDecimal
  totalLiquidityUSD_in: [Ethereum_BigDecimal!]
  totalLiquidityUSD_not_in: [Ethereum_BigDecimal!]
  activeLiquidity: BigInt
  activeLiquidity_not: BigInt
  activeLiquidity_gt: BigInt
  activeLiquidity_lt: BigInt
  activeLiquidity_gte: BigInt
  activeLiquidity_lte: BigInt
  activeLiquidity_in: [BigInt!]
  activeLiquidity_not_in: [BigInt!]
  activeLiquidityUSD: Ethereum_BigDecimal
  activeLiquidityUSD_not: Ethereum_BigDecimal
  activeLiquidityUSD_gt: Ethereum_BigDecimal
  activeLiquidityUSD_lt: Ethereum_BigDecimal
  activeLiquidityUSD_gte: Ethereum_BigDecimal
  activeLiquidityUSD_lte: Ethereum_BigDecimal
  activeLiquidityUSD_in: [Ethereum_BigDecimal!]
  activeLiquidityUSD_not_in: [Ethereum_BigDecimal!]
  uncollectedProtocolSideTokenAmounts: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedProtocolSideValuesUSD: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains_nocase: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains: [Ethereum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  uncollectedSupplySideTokenAmounts: [BigInt!]
  uncollectedSupplySideTokenAmounts_not: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedSupplySideValuesUSD: [Ethereum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not: [Ethereum_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains: [Ethereum_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains_nocase: [Ethereum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains: [Ethereum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeTotalRevenueUSD: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_not: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenAmount: [BigInt!]
  cumulativeVolumeByTokenAmount_not: [BigInt!]
  cumulativeVolumeByTokenAmount_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenUSD: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains_nocase: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains: [Ethereum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  cumulativeVolumeUSD: Ethereum_BigDecimal
  cumulativeVolumeUSD_not: Ethereum_BigDecimal
  cumulativeVolumeUSD_gt: Ethereum_BigDecimal
  cumulativeVolumeUSD_lt: Ethereum_BigDecimal
  cumulativeVolumeUSD_gte: Ethereum_BigDecimal
  cumulativeVolumeUSD_lte: Ethereum_BigDecimal
  cumulativeVolumeUSD_in: [Ethereum_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Ethereum_BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenBalancesUSD: [Ethereum_BigDecimal!]
  inputTokenBalancesUSD_not: [Ethereum_BigDecimal!]
  inputTokenBalancesUSD_contains: [Ethereum_BigDecimal!]
  inputTokenBalancesUSD_contains_nocase: [Ethereum_BigDecimal!]
  inputTokenBalancesUSD_not_contains: [Ethereum_BigDecimal!]
  inputTokenBalancesUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  inputTokenWeights: [Ethereum_BigDecimal!]
  inputTokenWeights_not: [Ethereum_BigDecimal!]
  inputTokenWeights_contains: [Ethereum_BigDecimal!]
  inputTokenWeights_contains_nocase: [Ethereum_BigDecimal!]
  inputTokenWeights_not_contains: [Ethereum_BigDecimal!]
  inputTokenWeights_not_contains_nocase: [Ethereum_BigDecimal!]
  stakedOutputTokenAmount: BigInt
  stakedOutputTokenAmount_not: BigInt
  stakedOutputTokenAmount_gt: BigInt
  stakedOutputTokenAmount_lt: BigInt
  stakedOutputTokenAmount_gte: BigInt
  stakedOutputTokenAmount_lte: BigInt
  stakedOutputTokenAmount_in: [BigInt!]
  stakedOutputTokenAmount_not_in: [BigInt!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [Ethereum_BigDecimal!]
  rewardTokenEmissionsUSD_not: [Ethereum_BigDecimal!]
  rewardTokenEmissionsUSD_contains: [Ethereum_BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [Ethereum_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [Ethereum_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [Ethereum_BigDecimal!]
  cumulativeDepositCount: Int
  cumulativeDepositCount_not: Int
  cumulativeDepositCount_gt: Int
  cumulativeDepositCount_lt: Int
  cumulativeDepositCount_gte: Int
  cumulativeDepositCount_lte: Int
  cumulativeDepositCount_in: [Int!]
  cumulativeDepositCount_not_in: [Int!]
  cumulativeWithdrawCount: Int
  cumulativeWithdrawCount_not: Int
  cumulativeWithdrawCount_gt: Int
  cumulativeWithdrawCount_lt: Int
  cumulativeWithdrawCount_gte: Int
  cumulativeWithdrawCount_lte: Int
  cumulativeWithdrawCount_in: [Int!]
  cumulativeWithdrawCount_not_in: [Int!]
  cumulativeSwapCount: Int
  cumulativeSwapCount_not: Int
  cumulativeSwapCount_gt: Int
  cumulativeSwapCount_lt: Int
  cumulativeSwapCount_gte: Int
  cumulativeSwapCount_lte: Int
  cumulativeSwapCount_in: [Int!]
  cumulativeSwapCount_not_in: [Int!]
  positions_: Ethereum_Position_filter
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  lastSnapshotDayID: Int
  lastSnapshotDayID_not: Int
  lastSnapshotDayID_gt: Int
  lastSnapshotDayID_lt: Int
  lastSnapshotDayID_gte: Int
  lastSnapshotDayID_lte: Int
  lastSnapshotDayID_in: [Int!]
  lastSnapshotDayID_not_in: [Int!]
  lastSnapshotHourID: Int
  lastSnapshotHourID_not: Int
  lastSnapshotHourID_gt: Int
  lastSnapshotHourID_lt: Int
  lastSnapshotHourID_gte: Int
  lastSnapshotHourID_lte: Int
  lastSnapshotHourID_in: [Int!]
  lastSnapshotHourID_not_in: [Int!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  dailySnapshots_: Ethereum_LiquidityPoolDailySnapshot_filter
  hourlySnapshots_: Ethereum_LiquidityPoolHourlySnapshot_filter
  deposits_: Ethereum_Deposit_filter
  withdraws_: Ethereum_Withdraw_filter
  swaps_: Ethereum_Swap_filter
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_LiquidityPool_filter]
  or: [Ethereum_LiquidityPool_filter]
}

enum Ethereum_LiquidityPool_orderBy {
  id
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  name
  symbol
  liquidityToken
  liquidityToken__id
  liquidityToken__name
  liquidityToken__symbol
  liquidityToken__decimals
  liquidityToken__lastPriceUSD
  liquidityToken__lastPriceBlockNumber
  liquidityToken___lastPricePool
  liquidityToken___totalSupply
  liquidityToken___totalValueLockedUSD
  liquidityToken___largePriceChangeBuffer
  liquidityToken___largeTVLImpactBuffer
  liquidityTokenType
  inputTokens
  rewardTokens
  fees
  isSingleSided
  createdTimestamp
  createdBlockNumber
  tick
  totalValueLockedUSD
  totalLiquidity
  totalLiquidityUSD
  activeLiquidity
  activeLiquidityUSD
  uncollectedProtocolSideTokenAmounts
  uncollectedProtocolSideValuesUSD
  uncollectedSupplySideTokenAmounts
  uncollectedSupplySideValuesUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  cumulativeVolumeByTokenAmount
  cumulativeVolumeByTokenUSD
  cumulativeVolumeUSD
  inputTokenBalances
  inputTokenBalancesUSD
  inputTokenWeights
  stakedOutputTokenAmount
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  cumulativeDepositCount
  cumulativeWithdrawCount
  cumulativeSwapCount
  positions
  positionCount
  openPositionCount
  closedPositionCount
  lastSnapshotDayID
  lastSnapshotHourID
  lastUpdateTimestamp
  lastUpdateBlockNumber
  dailySnapshots
  hourlySnapshots
  deposits
  withdraws
  swaps
}

enum Ethereum_Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BASE
  BOBA
  BSC
  CELO
  COSMOS
  CRONOS
  MAINNET
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC
  XDAI
}

"""Defines the order direction, either ascending or descending"""
enum Ethereum_OrderDirection {
  asc
  desc
}

type Ethereum_Position {
  """ { Account address }-{ Market address }-{ Count } """
  id: Ethereum_Bytes!
  """ Account that owns this position """
  account: Ethereum_Account!
  """ The liquidity pool in which this position was opened """
  pool: Ethereum_LiquidityPool!
  """ The hash of the transaction that opened this position """
  hashOpened: Ethereum_Bytes!
  """ The hash of the transaction that closed this position """
  hashClosed: Ethereum_Bytes
  """ Block number of when the position was opened """
  blockNumberOpened: BigInt!
  """ Timestamp when the position was opened """
  timestampOpened: BigInt!
  """ Block number of when the position was closed (0 if still open) """
  blockNumberClosed: BigInt
  """ Timestamp when the position was closed (0 if still open) """
  timestampClosed: BigInt
  """ lower tick of the position """
  tickLower: Ethereum_Tick
  """ upper tick of the position """
  tickUpper: Ethereum_Tick
  """ Token that is to represent ownership of liquidity """
  liquidityToken: Ethereum_Token
  """ Type of token used to track liquidity """
  liquidityTokenType: Ethereum_TokenType
  """ total position liquidity """
  liquidity: BigInt!
  """ total position liquidity in USD """
  liquidityUSD: Ethereum_BigDecimal!
  """ amount of tokens ever deposited to position """
  cumulativeDepositTokenAmounts: [BigInt!]!
  """ amount of tokens in USD deposited to position """
  cumulativeDepositUSD: Ethereum_BigDecimal!
  """ amount of tokens ever withdrawn from position (without fees) """
  cumulativeWithdrawTokenAmounts: [BigInt!]!
  """ amount of tokens in USD withdrawn from position (without fees) """
  cumulativeWithdrawUSD: Ethereum_BigDecimal!
  """ Total reward token accumulated under this position, in USD """
  cumulativeRewardUSD: [BigInt!]
  """ Number of deposits related to this position """
  depositCount: Int!
  """ All deposit events of this position """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Ethereum_Deposit_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_Deposit_filter): [Ethereum_Deposit!]!
  """ Number of withdrawals related to this position """
  withdrawCount: Int!
  """ All withdraw events of this position """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Ethereum_Withdraw_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_Withdraw_filter): [Ethereum_Withdraw!]!
  """ Position daily snapshots for open positions """
  snapshots(skip: Int = 0, first: Int = 100, orderBy: Ethereum_PositionSnapshot_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_PositionSnapshot_filter): [Ethereum_PositionSnapshot!]!
}

type Ethereum_PositionSnapshot {
  """ { Position ID }-{ Transaction hash }-{ Log index } """
  id: Ethereum_Bytes!
  """ Transaction hash of the transaction that triggered this snapshot """
  hash: Ethereum_Bytes!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Nonce of the transaction that triggered this snapshot """
  nonce: BigInt!
  """ Position of this snapshot """
  position: Ethereum_Position!
  """ Type of token used to track liquidity """
  liquidityTokenType: Ethereum_TokenType
  """ total position liquidity """
  liquidity: BigInt
  """ total position liquidity in USD """
  liquidityUSD: Ethereum_BigDecimal
  """ amount of tokens ever deposited to position """
  cumulativeDepositTokenAmounts: [BigInt!]!
  """ amount of tokens in USD deposited to position """
  cumulativeDepositUSD: Ethereum_BigDecimal!
  """ amount of tokens ever withdrawn from position (without fees) """
  cumulativeWithdrawTokenAmounts: [BigInt!]!
  """ amount of tokens in USD withdrawn from position (without fees) """
  cumulativeWithdrawUSD: Ethereum_BigDecimal!
  """ Total reward token accumulated under this position, in native amounts 
  """
  cumulativeRewardTokenAmounts: [BigInt!]
  """ Total reward token accumulated under this position, in USD """
  cumulativeRewardUSD: [BigInt!]
  """ Number of deposits related to this position """
  depositCount: Int!
  """ Number of withdrawals related to this position """
  withdrawCount: Int!
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
}

input Ethereum_PositionSnapshot_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  hash: Ethereum_Bytes
  hash_not: Ethereum_Bytes
  hash_gt: Ethereum_Bytes
  hash_lt: Ethereum_Bytes
  hash_gte: Ethereum_Bytes
  hash_lte: Ethereum_Bytes
  hash_in: [Ethereum_Bytes!]
  hash_not_in: [Ethereum_Bytes!]
  hash_contains: Ethereum_Bytes
  hash_not_contains: Ethereum_Bytes
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Ethereum_Position_filter
  liquidityTokenType: Ethereum_TokenType
  liquidityTokenType_not: Ethereum_TokenType
  liquidityTokenType_in: [Ethereum_TokenType!]
  liquidityTokenType_not_in: [Ethereum_TokenType!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  liquidityUSD: Ethereum_BigDecimal
  liquidityUSD_not: Ethereum_BigDecimal
  liquidityUSD_gt: Ethereum_BigDecimal
  liquidityUSD_lt: Ethereum_BigDecimal
  liquidityUSD_gte: Ethereum_BigDecimal
  liquidityUSD_lte: Ethereum_BigDecimal
  liquidityUSD_in: [Ethereum_BigDecimal!]
  liquidityUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeDepositTokenAmounts: [BigInt!]
  cumulativeDepositTokenAmounts_not: [BigInt!]
  cumulativeDepositTokenAmounts_contains: [BigInt!]
  cumulativeDepositTokenAmounts_contains_nocase: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeDepositUSD: Ethereum_BigDecimal
  cumulativeDepositUSD_not: Ethereum_BigDecimal
  cumulativeDepositUSD_gt: Ethereum_BigDecimal
  cumulativeDepositUSD_lt: Ethereum_BigDecimal
  cumulativeDepositUSD_gte: Ethereum_BigDecimal
  cumulativeDepositUSD_lte: Ethereum_BigDecimal
  cumulativeDepositUSD_in: [Ethereum_BigDecimal!]
  cumulativeDepositUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeWithdrawTokenAmounts: [BigInt!]
  cumulativeWithdrawTokenAmounts_not: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains_nocase: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeWithdrawUSD: Ethereum_BigDecimal
  cumulativeWithdrawUSD_not: Ethereum_BigDecimal
  cumulativeWithdrawUSD_gt: Ethereum_BigDecimal
  cumulativeWithdrawUSD_lt: Ethereum_BigDecimal
  cumulativeWithdrawUSD_gte: Ethereum_BigDecimal
  cumulativeWithdrawUSD_lte: Ethereum_BigDecimal
  cumulativeWithdrawUSD_in: [Ethereum_BigDecimal!]
  cumulativeWithdrawUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeRewardTokenAmounts: [BigInt!]
  cumulativeRewardTokenAmounts_not: [BigInt!]
  cumulativeRewardTokenAmounts_contains: [BigInt!]
  cumulativeRewardTokenAmounts_contains_nocase: [BigInt!]
  cumulativeRewardTokenAmounts_not_contains: [BigInt!]
  cumulativeRewardTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeRewardUSD: [BigInt!]
  cumulativeRewardUSD_not: [BigInt!]
  cumulativeRewardUSD_contains: [BigInt!]
  cumulativeRewardUSD_contains_nocase: [BigInt!]
  cumulativeRewardUSD_not_contains: [BigInt!]
  cumulativeRewardUSD_not_contains_nocase: [BigInt!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_PositionSnapshot_filter]
  or: [Ethereum_PositionSnapshot_filter]
}

enum Ethereum_PositionSnapshot_orderBy {
  id
  hash
  logIndex
  nonce
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__liquidityTokenType
  position__liquidity
  position__liquidityUSD
  position__cumulativeDepositUSD
  position__cumulativeWithdrawUSD
  position__depositCount
  position__withdrawCount
  liquidityTokenType
  liquidity
  liquidityUSD
  cumulativeDepositTokenAmounts
  cumulativeDepositUSD
  cumulativeWithdrawTokenAmounts
  cumulativeWithdrawUSD
  cumulativeRewardTokenAmounts
  cumulativeRewardUSD
  depositCount
  withdrawCount
  blockNumber
  timestamp
}

input Ethereum_Position_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Ethereum_Account_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Ethereum_LiquidityPool_filter
  hashOpened: Ethereum_Bytes
  hashOpened_not: Ethereum_Bytes
  hashOpened_gt: Ethereum_Bytes
  hashOpened_lt: Ethereum_Bytes
  hashOpened_gte: Ethereum_Bytes
  hashOpened_lte: Ethereum_Bytes
  hashOpened_in: [Ethereum_Bytes!]
  hashOpened_not_in: [Ethereum_Bytes!]
  hashOpened_contains: Ethereum_Bytes
  hashOpened_not_contains: Ethereum_Bytes
  hashClosed: Ethereum_Bytes
  hashClosed_not: Ethereum_Bytes
  hashClosed_gt: Ethereum_Bytes
  hashClosed_lt: Ethereum_Bytes
  hashClosed_gte: Ethereum_Bytes
  hashClosed_lte: Ethereum_Bytes
  hashClosed_in: [Ethereum_Bytes!]
  hashClosed_not_in: [Ethereum_Bytes!]
  hashClosed_contains: Ethereum_Bytes
  hashClosed_not_contains: Ethereum_Bytes
  blockNumberOpened: BigInt
  blockNumberOpened_not: BigInt
  blockNumberOpened_gt: BigInt
  blockNumberOpened_lt: BigInt
  blockNumberOpened_gte: BigInt
  blockNumberOpened_lte: BigInt
  blockNumberOpened_in: [BigInt!]
  blockNumberOpened_not_in: [BigInt!]
  timestampOpened: BigInt
  timestampOpened_not: BigInt
  timestampOpened_gt: BigInt
  timestampOpened_lt: BigInt
  timestampOpened_gte: BigInt
  timestampOpened_lte: BigInt
  timestampOpened_in: [BigInt!]
  timestampOpened_not_in: [BigInt!]
  blockNumberClosed: BigInt
  blockNumberClosed_not: BigInt
  blockNumberClosed_gt: BigInt
  blockNumberClosed_lt: BigInt
  blockNumberClosed_gte: BigInt
  blockNumberClosed_lte: BigInt
  blockNumberClosed_in: [BigInt!]
  blockNumberClosed_not_in: [BigInt!]
  timestampClosed: BigInt
  timestampClosed_not: BigInt
  timestampClosed_gt: BigInt
  timestampClosed_lt: BigInt
  timestampClosed_gte: BigInt
  timestampClosed_lte: BigInt
  timestampClosed_in: [BigInt!]
  timestampClosed_not_in: [BigInt!]
  tickLower: String
  tickLower_not: String
  tickLower_gt: String
  tickLower_lt: String
  tickLower_gte: String
  tickLower_lte: String
  tickLower_in: [String!]
  tickLower_not_in: [String!]
  tickLower_contains: String
  tickLower_contains_nocase: String
  tickLower_not_contains: String
  tickLower_not_contains_nocase: String
  tickLower_starts_with: String
  tickLower_starts_with_nocase: String
  tickLower_not_starts_with: String
  tickLower_not_starts_with_nocase: String
  tickLower_ends_with: String
  tickLower_ends_with_nocase: String
  tickLower_not_ends_with: String
  tickLower_not_ends_with_nocase: String
  tickLower_: Ethereum_Tick_filter
  tickUpper: String
  tickUpper_not: String
  tickUpper_gt: String
  tickUpper_lt: String
  tickUpper_gte: String
  tickUpper_lte: String
  tickUpper_in: [String!]
  tickUpper_not_in: [String!]
  tickUpper_contains: String
  tickUpper_contains_nocase: String
  tickUpper_not_contains: String
  tickUpper_not_contains_nocase: String
  tickUpper_starts_with: String
  tickUpper_starts_with_nocase: String
  tickUpper_not_starts_with: String
  tickUpper_not_starts_with_nocase: String
  tickUpper_ends_with: String
  tickUpper_ends_with_nocase: String
  tickUpper_not_ends_with: String
  tickUpper_not_ends_with_nocase: String
  tickUpper_: Ethereum_Tick_filter
  liquidityToken: String
  liquidityToken_not: String
  liquidityToken_gt: String
  liquidityToken_lt: String
  liquidityToken_gte: String
  liquidityToken_lte: String
  liquidityToken_in: [String!]
  liquidityToken_not_in: [String!]
  liquidityToken_contains: String
  liquidityToken_contains_nocase: String
  liquidityToken_not_contains: String
  liquidityToken_not_contains_nocase: String
  liquidityToken_starts_with: String
  liquidityToken_starts_with_nocase: String
  liquidityToken_not_starts_with: String
  liquidityToken_not_starts_with_nocase: String
  liquidityToken_ends_with: String
  liquidityToken_ends_with_nocase: String
  liquidityToken_not_ends_with: String
  liquidityToken_not_ends_with_nocase: String
  liquidityToken_: Ethereum_Token_filter
  liquidityTokenType: Ethereum_TokenType
  liquidityTokenType_not: Ethereum_TokenType
  liquidityTokenType_in: [Ethereum_TokenType!]
  liquidityTokenType_not_in: [Ethereum_TokenType!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  liquidityUSD: Ethereum_BigDecimal
  liquidityUSD_not: Ethereum_BigDecimal
  liquidityUSD_gt: Ethereum_BigDecimal
  liquidityUSD_lt: Ethereum_BigDecimal
  liquidityUSD_gte: Ethereum_BigDecimal
  liquidityUSD_lte: Ethereum_BigDecimal
  liquidityUSD_in: [Ethereum_BigDecimal!]
  liquidityUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeDepositTokenAmounts: [BigInt!]
  cumulativeDepositTokenAmounts_not: [BigInt!]
  cumulativeDepositTokenAmounts_contains: [BigInt!]
  cumulativeDepositTokenAmounts_contains_nocase: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeDepositUSD: Ethereum_BigDecimal
  cumulativeDepositUSD_not: Ethereum_BigDecimal
  cumulativeDepositUSD_gt: Ethereum_BigDecimal
  cumulativeDepositUSD_lt: Ethereum_BigDecimal
  cumulativeDepositUSD_gte: Ethereum_BigDecimal
  cumulativeDepositUSD_lte: Ethereum_BigDecimal
  cumulativeDepositUSD_in: [Ethereum_BigDecimal!]
  cumulativeDepositUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeWithdrawTokenAmounts: [BigInt!]
  cumulativeWithdrawTokenAmounts_not: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains_nocase: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeWithdrawUSD: Ethereum_BigDecimal
  cumulativeWithdrawUSD_not: Ethereum_BigDecimal
  cumulativeWithdrawUSD_gt: Ethereum_BigDecimal
  cumulativeWithdrawUSD_lt: Ethereum_BigDecimal
  cumulativeWithdrawUSD_gte: Ethereum_BigDecimal
  cumulativeWithdrawUSD_lte: Ethereum_BigDecimal
  cumulativeWithdrawUSD_in: [Ethereum_BigDecimal!]
  cumulativeWithdrawUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeRewardUSD: [BigInt!]
  cumulativeRewardUSD_not: [BigInt!]
  cumulativeRewardUSD_contains: [BigInt!]
  cumulativeRewardUSD_contains_nocase: [BigInt!]
  cumulativeRewardUSD_not_contains: [BigInt!]
  cumulativeRewardUSD_not_contains_nocase: [BigInt!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  deposits_: Ethereum_Deposit_filter
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  withdraws_: Ethereum_Withdraw_filter
  snapshots_: Ethereum_PositionSnapshot_filter
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_Position_filter]
  or: [Ethereum_Position_filter]
}

enum Ethereum_Position_orderBy {
  id
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  hashOpened
  hashClosed
  blockNumberOpened
  timestampOpened
  blockNumberClosed
  timestampClosed
  tickLower
  tickLower__id
  tickLower__index
  tickLower__createdTimestamp
  tickLower__createdBlockNumber
  tickLower__liquidityGross
  tickLower__liquidityGrossUSD
  tickLower__liquidityNet
  tickLower__liquidityNetUSD
  tickLower__lastSnapshotDayID
  tickLower__lastSnapshotHourID
  tickLower__lastUpdateTimestamp
  tickLower__lastUpdateBlockNumber
  tickUpper
  tickUpper__id
  tickUpper__index
  tickUpper__createdTimestamp
  tickUpper__createdBlockNumber
  tickUpper__liquidityGross
  tickUpper__liquidityGrossUSD
  tickUpper__liquidityNet
  tickUpper__liquidityNetUSD
  tickUpper__lastSnapshotDayID
  tickUpper__lastSnapshotHourID
  tickUpper__lastUpdateTimestamp
  tickUpper__lastUpdateBlockNumber
  liquidityToken
  liquidityToken__id
  liquidityToken__name
  liquidityToken__symbol
  liquidityToken__decimals
  liquidityToken__lastPriceUSD
  liquidityToken__lastPriceBlockNumber
  liquidityToken___lastPricePool
  liquidityToken___totalSupply
  liquidityToken___totalValueLockedUSD
  liquidityToken___largePriceChangeBuffer
  liquidityToken___largeTVLImpactBuffer
  liquidityTokenType
  liquidity
  liquidityUSD
  cumulativeDepositTokenAmounts
  cumulativeDepositUSD
  cumulativeWithdrawTokenAmounts
  cumulativeWithdrawUSD
  cumulativeRewardUSD
  depositCount
  deposits
  withdrawCount
  withdraws
  snapshots
}

interface Ethereum_Protocol {
  """ Smart contract address of the protocol's main contract (Factory, Registry, etc) 
  """
  id: Ethereum_Bytes!
  """ Name of the protocol, including version. e.g. Uniswap v3 """
  name: String!
  """ Slug of protocol, including version. e.g. uniswap-v3 """
  slug: String!
  """ Version of the subgraph schema, in SemVer format (e.g. 1.0.0) """
  schemaVersion: String!
  """ Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) 
  """
  subgraphVersion: String!
  """ Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) 
  """
  methodologyVersion: String!
  """ The blockchain network this subgraph is indexing on """
  network: Ethereum_Network!
  """ The type of protocol (e.g. DEX, Lending, Yield, etc) """
  type: Ethereum_ProtocolType!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: Ethereum_BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: Ethereum_BigDecimal
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: Ethereum_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: Ethereum_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: Ethereum_BigDecimal!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Daily usage metrics for this protocol """
  dailyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Ethereum_UsageMetricsDailySnapshot_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_UsageMetricsDailySnapshot_filter): [Ethereum_UsageMetricsDailySnapshot!]!
  """ Hourly usage metrics for this protocol """
  hourlyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Ethereum_UsageMetricsHourlySnapshot_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_UsageMetricsHourlySnapshot_filter): [Ethereum_UsageMetricsHourlySnapshot!]!
  """ Daily financial metrics for this protocol """
  financialMetrics(skip: Int = 0, first: Int = 100, orderBy: Ethereum_FinancialsDailySnapshot_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_FinancialsDailySnapshot_filter): [Ethereum_FinancialsDailySnapshot!]!
}

enum Ethereum_ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
}

input Ethereum_Protocol_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  schemaVersion: String
  schemaVersion_not: String
  schemaVersion_gt: String
  schemaVersion_lt: String
  schemaVersion_gte: String
  schemaVersion_lte: String
  schemaVersion_in: [String!]
  schemaVersion_not_in: [String!]
  schemaVersion_contains: String
  schemaVersion_contains_nocase: String
  schemaVersion_not_contains: String
  schemaVersion_not_contains_nocase: String
  schemaVersion_starts_with: String
  schemaVersion_starts_with_nocase: String
  schemaVersion_not_starts_with: String
  schemaVersion_not_starts_with_nocase: String
  schemaVersion_ends_with: String
  schemaVersion_ends_with_nocase: String
  schemaVersion_not_ends_with: String
  schemaVersion_not_ends_with_nocase: String
  subgraphVersion: String
  subgraphVersion_not: String
  subgraphVersion_gt: String
  subgraphVersion_lt: String
  subgraphVersion_gte: String
  subgraphVersion_lte: String
  subgraphVersion_in: [String!]
  subgraphVersion_not_in: [String!]
  subgraphVersion_contains: String
  subgraphVersion_contains_nocase: String
  subgraphVersion_not_contains: String
  subgraphVersion_not_contains_nocase: String
  subgraphVersion_starts_with: String
  subgraphVersion_starts_with_nocase: String
  subgraphVersion_not_starts_with: String
  subgraphVersion_not_starts_with_nocase: String
  subgraphVersion_ends_with: String
  subgraphVersion_ends_with_nocase: String
  subgraphVersion_not_ends_with: String
  subgraphVersion_not_ends_with_nocase: String
  methodologyVersion: String
  methodologyVersion_not: String
  methodologyVersion_gt: String
  methodologyVersion_lt: String
  methodologyVersion_gte: String
  methodologyVersion_lte: String
  methodologyVersion_in: [String!]
  methodologyVersion_not_in: [String!]
  methodologyVersion_contains: String
  methodologyVersion_contains_nocase: String
  methodologyVersion_not_contains: String
  methodologyVersion_not_contains_nocase: String
  methodologyVersion_starts_with: String
  methodologyVersion_starts_with_nocase: String
  methodologyVersion_not_starts_with: String
  methodologyVersion_not_starts_with_nocase: String
  methodologyVersion_ends_with: String
  methodologyVersion_ends_with_nocase: String
  methodologyVersion_not_ends_with: String
  methodologyVersion_not_ends_with_nocase: String
  network: Ethereum_Network
  network_not: Ethereum_Network
  network_in: [Ethereum_Network!]
  network_not_in: [Ethereum_Network!]
  type: Ethereum_ProtocolType
  type_not: Ethereum_ProtocolType
  type_in: [Ethereum_ProtocolType!]
  type_not_in: [Ethereum_ProtocolType!]
  totalValueLockedUSD: Ethereum_BigDecimal
  totalValueLockedUSD_not: Ethereum_BigDecimal
  totalValueLockedUSD_gt: Ethereum_BigDecimal
  totalValueLockedUSD_lt: Ethereum_BigDecimal
  totalValueLockedUSD_gte: Ethereum_BigDecimal
  totalValueLockedUSD_lte: Ethereum_BigDecimal
  totalValueLockedUSD_in: [Ethereum_BigDecimal!]
  totalValueLockedUSD_not_in: [Ethereum_BigDecimal!]
  protocolControlledValueUSD: Ethereum_BigDecimal
  protocolControlledValueUSD_not: Ethereum_BigDecimal
  protocolControlledValueUSD_gt: Ethereum_BigDecimal
  protocolControlledValueUSD_lt: Ethereum_BigDecimal
  protocolControlledValueUSD_gte: Ethereum_BigDecimal
  protocolControlledValueUSD_lte: Ethereum_BigDecimal
  protocolControlledValueUSD_in: [Ethereum_BigDecimal!]
  protocolControlledValueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeTotalRevenueUSD: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_not: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_gt: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_lt: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_gte: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_lte: Ethereum_BigDecimal
  cumulativeTotalRevenueUSD_in: [Ethereum_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Ethereum_BigDecimal!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  dailyUsageMetrics_: Ethereum_UsageMetricsDailySnapshot_filter
  hourlyUsageMetrics_: Ethereum_UsageMetricsHourlySnapshot_filter
  financialMetrics_: Ethereum_FinancialsDailySnapshot_filter
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_Protocol_filter]
  or: [Ethereum_Protocol_filter]
}

enum Ethereum_Protocol_orderBy {
  id
  name
  slug
  schemaVersion
  subgraphVersion
  methodologyVersion
  network
  type
  totalValueLockedUSD
  protocolControlledValueUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  cumulativeUniqueUsers
  totalPoolCount
  dailyUsageMetrics
  hourlyUsageMetrics
  financialMetrics
}

type Ethereum_RewardToken {
  """ { Reward token type }-{ Smart contract address of the reward token } """
  id: Ethereum_Bytes!
  """ Reference to the actual token """
  token: Ethereum_Token!
  """ The type of the reward token """
  type: Ethereum_RewardTokenType!
}

enum Ethereum_RewardTokenType {
  """ For reward tokens awarded to LPs/lenders """
  DEPOSIT
  """ For reward tokens awarded to borrowers """
  BORROW
}

input Ethereum_RewardToken_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Ethereum_Token_filter
  type: Ethereum_RewardTokenType
  type_not: Ethereum_RewardTokenType
  type_in: [Ethereum_RewardTokenType!]
  type_not_in: [Ethereum_RewardTokenType!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_RewardToken_filter]
  or: [Ethereum_RewardToken_filter]
}

enum Ethereum_RewardToken_orderBy {
  id
  token
  token__id
  token__name
  token__symbol
  token__decimals
  token__lastPriceUSD
  token__lastPriceBlockNumber
  token___lastPricePool
  token___totalSupply
  token___totalValueLockedUSD
  token___largePriceChangeBuffer
  token___largeTVLImpactBuffer
  type
}

type Ethereum_Swap {
  """ { Transaction hash }-{ Log index } """
  id: Ethereum_Bytes!
  """ Transaction hash of the transaction that emitted this event """
  hash: Ethereum_Bytes!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Gas limit of the transaction that emitted this event """
  gasLimit: BigInt
  """ Gas used in this transaction. (Optional because not every chain will support this) 
  """
  gasUsed: BigInt
  """ Gas price of the transaction that emitted this event """
  gasPrice: BigInt
  """ The protocol this transaction belongs to """
  protocol: Ethereum_DexAmmProtocol!
  """ Account that emitted this event """
  account: Ethereum_Account!
  """ The pool involving this event """
  pool: Ethereum_LiquidityPool!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ the tick after the swap """
  tick: BigInt
  """ Token deposited into pool """
  tokenIn: Ethereum_Token!
  """ Amount of token deposited into pool in native units """
  amountIn: BigInt!
  """ Amount of token deposited into pool in USD """
  amountInUSD: Ethereum_BigDecimal!
  """ Token withdrawn from pool """
  tokenOut: Ethereum_Token!
  """ Amount of token withdrawn from pool in native units """
  amountOut: BigInt!
  """ Amount of token withdrawn from pool in USD """
  amountOutUSD: Ethereum_BigDecimal!
  """ Amount of input tokens in the liquidity pool """
  reserveAmounts: [BigInt!]
}

input Ethereum_Swap_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  hash: Ethereum_Bytes
  hash_not: Ethereum_Bytes
  hash_gt: Ethereum_Bytes
  hash_lt: Ethereum_Bytes
  hash_gte: Ethereum_Bytes
  hash_lte: Ethereum_Bytes
  hash_in: [Ethereum_Bytes!]
  hash_not_in: [Ethereum_Bytes!]
  hash_contains: Ethereum_Bytes
  hash_not_contains: Ethereum_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Ethereum_DexAmmProtocol_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Ethereum_Account_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Ethereum_LiquidityPool_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  tokenIn: String
  tokenIn_not: String
  tokenIn_gt: String
  tokenIn_lt: String
  tokenIn_gte: String
  tokenIn_lte: String
  tokenIn_in: [String!]
  tokenIn_not_in: [String!]
  tokenIn_contains: String
  tokenIn_contains_nocase: String
  tokenIn_not_contains: String
  tokenIn_not_contains_nocase: String
  tokenIn_starts_with: String
  tokenIn_starts_with_nocase: String
  tokenIn_not_starts_with: String
  tokenIn_not_starts_with_nocase: String
  tokenIn_ends_with: String
  tokenIn_ends_with_nocase: String
  tokenIn_not_ends_with: String
  tokenIn_not_ends_with_nocase: String
  tokenIn_: Ethereum_Token_filter
  amountIn: BigInt
  amountIn_not: BigInt
  amountIn_gt: BigInt
  amountIn_lt: BigInt
  amountIn_gte: BigInt
  amountIn_lte: BigInt
  amountIn_in: [BigInt!]
  amountIn_not_in: [BigInt!]
  amountInUSD: Ethereum_BigDecimal
  amountInUSD_not: Ethereum_BigDecimal
  amountInUSD_gt: Ethereum_BigDecimal
  amountInUSD_lt: Ethereum_BigDecimal
  amountInUSD_gte: Ethereum_BigDecimal
  amountInUSD_lte: Ethereum_BigDecimal
  amountInUSD_in: [Ethereum_BigDecimal!]
  amountInUSD_not_in: [Ethereum_BigDecimal!]
  tokenOut: String
  tokenOut_not: String
  tokenOut_gt: String
  tokenOut_lt: String
  tokenOut_gte: String
  tokenOut_lte: String
  tokenOut_in: [String!]
  tokenOut_not_in: [String!]
  tokenOut_contains: String
  tokenOut_contains_nocase: String
  tokenOut_not_contains: String
  tokenOut_not_contains_nocase: String
  tokenOut_starts_with: String
  tokenOut_starts_with_nocase: String
  tokenOut_not_starts_with: String
  tokenOut_not_starts_with_nocase: String
  tokenOut_ends_with: String
  tokenOut_ends_with_nocase: String
  tokenOut_not_ends_with: String
  tokenOut_not_ends_with_nocase: String
  tokenOut_: Ethereum_Token_filter
  amountOut: BigInt
  amountOut_not: BigInt
  amountOut_gt: BigInt
  amountOut_lt: BigInt
  amountOut_gte: BigInt
  amountOut_lte: BigInt
  amountOut_in: [BigInt!]
  amountOut_not_in: [BigInt!]
  amountOutUSD: Ethereum_BigDecimal
  amountOutUSD_not: Ethereum_BigDecimal
  amountOutUSD_gt: Ethereum_BigDecimal
  amountOutUSD_lt: Ethereum_BigDecimal
  amountOutUSD_gte: Ethereum_BigDecimal
  amountOutUSD_lte: Ethereum_BigDecimal
  amountOutUSD_in: [Ethereum_BigDecimal!]
  amountOutUSD_not_in: [Ethereum_BigDecimal!]
  reserveAmounts: [BigInt!]
  reserveAmounts_not: [BigInt!]
  reserveAmounts_contains: [BigInt!]
  reserveAmounts_contains_nocase: [BigInt!]
  reserveAmounts_not_contains: [BigInt!]
  reserveAmounts_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_Swap_filter]
  or: [Ethereum_Swap_filter]
}

enum Ethereum_Swap_orderBy {
  id
  hash
  nonce
  logIndex
  gasLimit
  gasUsed
  gasPrice
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  blockNumber
  timestamp
  tick
  tokenIn
  tokenIn__id
  tokenIn__name
  tokenIn__symbol
  tokenIn__decimals
  tokenIn__lastPriceUSD
  tokenIn__lastPriceBlockNumber
  tokenIn___lastPricePool
  tokenIn___totalSupply
  tokenIn___totalValueLockedUSD
  tokenIn___largePriceChangeBuffer
  tokenIn___largeTVLImpactBuffer
  amountIn
  amountInUSD
  tokenOut
  tokenOut__id
  tokenOut__name
  tokenOut__symbol
  tokenOut__decimals
  tokenOut__lastPriceUSD
  tokenOut__lastPriceBlockNumber
  tokenOut___lastPricePool
  tokenOut___totalSupply
  tokenOut___totalValueLockedUSD
  tokenOut___largePriceChangeBuffer
  tokenOut___largeTVLImpactBuffer
  amountOut
  amountOutUSD
  reserveAmounts
}

type Ethereum_Tick {
  """ { pool address }-{ tick index } """
  id: Ethereum_Bytes!
  """ tick index """
  index: BigInt!
  """ Liquidity pool this tick belongs to """
  pool: Ethereum_LiquidityPool!
  """ Creation timestamp """
  createdTimestamp: BigInt!
  """ Creation block number """
  createdBlockNumber: BigInt!
  """ calculated price of token0 of tick within this pool - constant """
  prices: [Ethereum_BigDecimal!]!
  """ total liquidity pool has as tick lower or upper """
  liquidityGross: BigInt!
  """ total liquidity in USD pool has as tick lower or upper """
  liquidityGrossUSD: Ethereum_BigDecimal!
  """ how much liquidity changes when tick crossed """
  liquidityNet: BigInt!
  """ how much liquidity in USD changes when tick crossed """
  liquidityNetUSD: Ethereum_BigDecimal!
  """ Day ID of the most recent daily snapshot """
  lastSnapshotDayID: Int!
  """ Hour ID of the most recent hourly snapshot """
  lastSnapshotHourID: Int!
  """ Timestamp of the last time this entity was updated """
  lastUpdateTimestamp: BigInt!
  """ Block number of the last time this entity was updated """
  lastUpdateBlockNumber: BigInt!
}

type Ethereum_TickDailySnapshot {
  """ { pool address }-{ tick index }-{ day ID } """
  id: Ethereum_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ tick index """
  tick: Ethereum_Tick!
  """ liquidity pool this tick belongs to """
  pool: Ethereum_LiquidityPool!
  """ total liquidity pool has as tick lower or upper """
  liquidityGross: BigInt!
  """ total liquidity in USD pool has as tick lower or upper """
  liquidityGrossUSD: Ethereum_BigDecimal!
  """ how much liquidity changes when tick crossed """
  liquidityNet: BigInt!
  """ how much liquidity in USD changes when tick crossed """
  liquidityNetUSD: Ethereum_BigDecimal!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Ethereum_TickDailySnapshot_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Ethereum_Tick_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Ethereum_LiquidityPool_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityGrossUSD: Ethereum_BigDecimal
  liquidityGrossUSD_not: Ethereum_BigDecimal
  liquidityGrossUSD_gt: Ethereum_BigDecimal
  liquidityGrossUSD_lt: Ethereum_BigDecimal
  liquidityGrossUSD_gte: Ethereum_BigDecimal
  liquidityGrossUSD_lte: Ethereum_BigDecimal
  liquidityGrossUSD_in: [Ethereum_BigDecimal!]
  liquidityGrossUSD_not_in: [Ethereum_BigDecimal!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  liquidityNetUSD: Ethereum_BigDecimal
  liquidityNetUSD_not: Ethereum_BigDecimal
  liquidityNetUSD_gt: Ethereum_BigDecimal
  liquidityNetUSD_lt: Ethereum_BigDecimal
  liquidityNetUSD_gte: Ethereum_BigDecimal
  liquidityNetUSD_lte: Ethereum_BigDecimal
  liquidityNetUSD_in: [Ethereum_BigDecimal!]
  liquidityNetUSD_not_in: [Ethereum_BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_TickDailySnapshot_filter]
  or: [Ethereum_TickDailySnapshot_filter]
}

enum Ethereum_TickDailySnapshot_orderBy {
  id
  day
  tick
  tick__id
  tick__index
  tick__createdTimestamp
  tick__createdBlockNumber
  tick__liquidityGross
  tick__liquidityGrossUSD
  tick__liquidityNet
  tick__liquidityNetUSD
  tick__lastSnapshotDayID
  tick__lastSnapshotHourID
  tick__lastUpdateTimestamp
  tick__lastUpdateBlockNumber
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  liquidityGross
  liquidityGrossUSD
  liquidityNet
  liquidityNetUSD
  timestamp
  blockNumber
}

type Ethereum_TickHourlySnapshot {
  """ { pool address }-{ tick index }-{ hour ID } """
  id: Ethereum_Bytes!
  """ Number of hours since Unix epoch time """
  hour: Int!
  """ tick index """
  tick: Ethereum_Tick!
  """ liquidity pool this tick belongs to """
  pool: Ethereum_LiquidityPool!
  """ total liquidity pool has as tick lower or upper """
  liquidityGross: BigInt!
  """ total liquidity in USD pool has as tick lower or upper """
  liquidityGrossUSD: Ethereum_BigDecimal!
  """ how much liquidity changes when tick crossed """
  liquidityNet: BigInt!
  """ how much liquidity in USD changes when tick crossed """
  liquidityNetUSD: Ethereum_BigDecimal!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Ethereum_TickHourlySnapshot_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  hour: Int
  hour_not: Int
  hour_gt: Int
  hour_lt: Int
  hour_gte: Int
  hour_lte: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Ethereum_Tick_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Ethereum_LiquidityPool_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityGrossUSD: Ethereum_BigDecimal
  liquidityGrossUSD_not: Ethereum_BigDecimal
  liquidityGrossUSD_gt: Ethereum_BigDecimal
  liquidityGrossUSD_lt: Ethereum_BigDecimal
  liquidityGrossUSD_gte: Ethereum_BigDecimal
  liquidityGrossUSD_lte: Ethereum_BigDecimal
  liquidityGrossUSD_in: [Ethereum_BigDecimal!]
  liquidityGrossUSD_not_in: [Ethereum_BigDecimal!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  liquidityNetUSD: Ethereum_BigDecimal
  liquidityNetUSD_not: Ethereum_BigDecimal
  liquidityNetUSD_gt: Ethereum_BigDecimal
  liquidityNetUSD_lt: Ethereum_BigDecimal
  liquidityNetUSD_gte: Ethereum_BigDecimal
  liquidityNetUSD_lte: Ethereum_BigDecimal
  liquidityNetUSD_in: [Ethereum_BigDecimal!]
  liquidityNetUSD_not_in: [Ethereum_BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_TickHourlySnapshot_filter]
  or: [Ethereum_TickHourlySnapshot_filter]
}

enum Ethereum_TickHourlySnapshot_orderBy {
  id
  hour
  tick
  tick__id
  tick__index
  tick__createdTimestamp
  tick__createdBlockNumber
  tick__liquidityGross
  tick__liquidityGrossUSD
  tick__liquidityNet
  tick__liquidityNetUSD
  tick__lastSnapshotDayID
  tick__lastSnapshotHourID
  tick__lastUpdateTimestamp
  tick__lastUpdateBlockNumber
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  liquidityGross
  liquidityGrossUSD
  liquidityNet
  liquidityNetUSD
  timestamp
  blockNumber
}

input Ethereum_Tick_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Ethereum_LiquidityPool_filter
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  prices: [Ethereum_BigDecimal!]
  prices_not: [Ethereum_BigDecimal!]
  prices_contains: [Ethereum_BigDecimal!]
  prices_contains_nocase: [Ethereum_BigDecimal!]
  prices_not_contains: [Ethereum_BigDecimal!]
  prices_not_contains_nocase: [Ethereum_BigDecimal!]
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityGrossUSD: Ethereum_BigDecimal
  liquidityGrossUSD_not: Ethereum_BigDecimal
  liquidityGrossUSD_gt: Ethereum_BigDecimal
  liquidityGrossUSD_lt: Ethereum_BigDecimal
  liquidityGrossUSD_gte: Ethereum_BigDecimal
  liquidityGrossUSD_lte: Ethereum_BigDecimal
  liquidityGrossUSD_in: [Ethereum_BigDecimal!]
  liquidityGrossUSD_not_in: [Ethereum_BigDecimal!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  liquidityNetUSD: Ethereum_BigDecimal
  liquidityNetUSD_not: Ethereum_BigDecimal
  liquidityNetUSD_gt: Ethereum_BigDecimal
  liquidityNetUSD_lt: Ethereum_BigDecimal
  liquidityNetUSD_gte: Ethereum_BigDecimal
  liquidityNetUSD_lte: Ethereum_BigDecimal
  liquidityNetUSD_in: [Ethereum_BigDecimal!]
  liquidityNetUSD_not_in: [Ethereum_BigDecimal!]
  lastSnapshotDayID: Int
  lastSnapshotDayID_not: Int
  lastSnapshotDayID_gt: Int
  lastSnapshotDayID_lt: Int
  lastSnapshotDayID_gte: Int
  lastSnapshotDayID_lte: Int
  lastSnapshotDayID_in: [Int!]
  lastSnapshotDayID_not_in: [Int!]
  lastSnapshotHourID: Int
  lastSnapshotHourID_not: Int
  lastSnapshotHourID_gt: Int
  lastSnapshotHourID_lt: Int
  lastSnapshotHourID_gte: Int
  lastSnapshotHourID_lte: Int
  lastSnapshotHourID_in: [Int!]
  lastSnapshotHourID_not_in: [Int!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_Tick_filter]
  or: [Ethereum_Tick_filter]
}

enum Ethereum_Tick_orderBy {
  id
  index
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  createdTimestamp
  createdBlockNumber
  prices
  liquidityGross
  liquidityGrossUSD
  liquidityNet
  liquidityNetUSD
  lastSnapshotDayID
  lastSnapshotHourID
  lastUpdateTimestamp
  lastUpdateBlockNumber
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type Ethereum_Token {
  """ Smart contract address of the token """
  id: Ethereum_Bytes!
  """ Name of the token, mirrored from the smart contract """
  name: String!
  """ Symbol of the token, mirrored from the smart contract """
  symbol: String!
  """ The number of decimal places this token uses, default to 18 """
  decimals: Int!
  """ Optional field to track the price of a token, mostly for caching purposes 
  """
  lastPriceUSD: Ethereum_BigDecimal
  """ Optional field to track the block number of the last token price """
  lastPriceBlockNumber: BigInt
  """ last pool that gave this token a price """
  _lastPricePool: Ethereum_Bytes
  """ amount of tokens in the protocol """
  _totalSupply: BigInt!
  """ Total value locked in the protocol """
  _totalValueLockedUSD: Ethereum_BigDecimal!
  _largePriceChangeBuffer: Int!
  _largeTVLImpactBuffer: Int!
}

enum Ethereum_TokenType {
  MULTIPLE
  UNKNOWN
  ERC20
  ERC721
  ERC1155
  BEP20
  BEP721
  BEP1155
}

input Ethereum_Token_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  lastPriceUSD: Ethereum_BigDecimal
  lastPriceUSD_not: Ethereum_BigDecimal
  lastPriceUSD_gt: Ethereum_BigDecimal
  lastPriceUSD_lt: Ethereum_BigDecimal
  lastPriceUSD_gte: Ethereum_BigDecimal
  lastPriceUSD_lte: Ethereum_BigDecimal
  lastPriceUSD_in: [Ethereum_BigDecimal!]
  lastPriceUSD_not_in: [Ethereum_BigDecimal!]
  lastPriceBlockNumber: BigInt
  lastPriceBlockNumber_not: BigInt
  lastPriceBlockNumber_gt: BigInt
  lastPriceBlockNumber_lt: BigInt
  lastPriceBlockNumber_gte: BigInt
  lastPriceBlockNumber_lte: BigInt
  lastPriceBlockNumber_in: [BigInt!]
  lastPriceBlockNumber_not_in: [BigInt!]
  _lastPricePool: Ethereum_Bytes
  _lastPricePool_not: Ethereum_Bytes
  _lastPricePool_gt: Ethereum_Bytes
  _lastPricePool_lt: Ethereum_Bytes
  _lastPricePool_gte: Ethereum_Bytes
  _lastPricePool_lte: Ethereum_Bytes
  _lastPricePool_in: [Ethereum_Bytes!]
  _lastPricePool_not_in: [Ethereum_Bytes!]
  _lastPricePool_contains: Ethereum_Bytes
  _lastPricePool_not_contains: Ethereum_Bytes
  _totalSupply: BigInt
  _totalSupply_not: BigInt
  _totalSupply_gt: BigInt
  _totalSupply_lt: BigInt
  _totalSupply_gte: BigInt
  _totalSupply_lte: BigInt
  _totalSupply_in: [BigInt!]
  _totalSupply_not_in: [BigInt!]
  _totalValueLockedUSD: Ethereum_BigDecimal
  _totalValueLockedUSD_not: Ethereum_BigDecimal
  _totalValueLockedUSD_gt: Ethereum_BigDecimal
  _totalValueLockedUSD_lt: Ethereum_BigDecimal
  _totalValueLockedUSD_gte: Ethereum_BigDecimal
  _totalValueLockedUSD_lte: Ethereum_BigDecimal
  _totalValueLockedUSD_in: [Ethereum_BigDecimal!]
  _totalValueLockedUSD_not_in: [Ethereum_BigDecimal!]
  _largePriceChangeBuffer: Int
  _largePriceChangeBuffer_not: Int
  _largePriceChangeBuffer_gt: Int
  _largePriceChangeBuffer_lt: Int
  _largePriceChangeBuffer_gte: Int
  _largePriceChangeBuffer_lte: Int
  _largePriceChangeBuffer_in: [Int!]
  _largePriceChangeBuffer_not_in: [Int!]
  _largeTVLImpactBuffer: Int
  _largeTVLImpactBuffer_not: Int
  _largeTVLImpactBuffer_gt: Int
  _largeTVLImpactBuffer_lt: Int
  _largeTVLImpactBuffer_gte: Int
  _largeTVLImpactBuffer_lte: Int
  _largeTVLImpactBuffer_in: [Int!]
  _largeTVLImpactBuffer_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_Token_filter]
  or: [Ethereum_Token_filter]
}

enum Ethereum_Token_orderBy {
  id
  name
  symbol
  decimals
  lastPriceUSD
  lastPriceBlockNumber
  _lastPricePool
  _totalSupply
  _totalValueLockedUSD
  _largePriceChangeBuffer
  _largeTVLImpactBuffer
}

type Ethereum_UsageMetricsDailySnapshot {
  """ ID is # of days since Unix epoch time """
  id: Ethereum_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ Protocol this snapshot is associated with """
  protocol: Ethereum_DexAmmProtocol!
  """ Number of unique daily active users """
  dailyActiveUsers: Int!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. 
  """
  dailyTransactionCount: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Total number of deposits (add liquidity) in an day """
  dailyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) in an day """
  dailyWithdrawCount: Int!
  """ Total number of trades (swaps) in an day """
  dailySwapCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Ethereum_UsageMetricsDailySnapshot_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Ethereum_DexAmmProtocol_filter
  dailyActiveUsers: Int
  dailyActiveUsers_not: Int
  dailyActiveUsers_gt: Int
  dailyActiveUsers_lt: Int
  dailyActiveUsers_gte: Int
  dailyActiveUsers_lte: Int
  dailyActiveUsers_in: [Int!]
  dailyActiveUsers_not_in: [Int!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  dailyTransactionCount: Int
  dailyTransactionCount_not: Int
  dailyTransactionCount_gt: Int
  dailyTransactionCount_lt: Int
  dailyTransactionCount_gte: Int
  dailyTransactionCount_lte: Int
  dailyTransactionCount_in: [Int!]
  dailyTransactionCount_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  dailyDepositCount: Int
  dailyDepositCount_not: Int
  dailyDepositCount_gt: Int
  dailyDepositCount_lt: Int
  dailyDepositCount_gte: Int
  dailyDepositCount_lte: Int
  dailyDepositCount_in: [Int!]
  dailyDepositCount_not_in: [Int!]
  dailyWithdrawCount: Int
  dailyWithdrawCount_not: Int
  dailyWithdrawCount_gt: Int
  dailyWithdrawCount_lt: Int
  dailyWithdrawCount_gte: Int
  dailyWithdrawCount_lte: Int
  dailyWithdrawCount_in: [Int!]
  dailyWithdrawCount_not_in: [Int!]
  dailySwapCount: Int
  dailySwapCount_not: Int
  dailySwapCount_gt: Int
  dailySwapCount_lt: Int
  dailySwapCount_gte: Int
  dailySwapCount_lte: Int
  dailySwapCount_in: [Int!]
  dailySwapCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_UsageMetricsDailySnapshot_filter]
  or: [Ethereum_UsageMetricsDailySnapshot_filter]
}

enum Ethereum_UsageMetricsDailySnapshot_orderBy {
  id
  day
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  dailyActiveUsers
  cumulativeUniqueUsers
  dailyTransactionCount
  totalPoolCount
  dailyDepositCount
  dailyWithdrawCount
  dailySwapCount
  timestamp
  blockNumber
}

type Ethereum_UsageMetricsHourlySnapshot {
  """ { # of hours since Unix epoch time } """
  id: Ethereum_Bytes!
  """ Number of hours since Unix epoch time """
  hour: Int!
  """ Protocol this snapshot is associated with """
  protocol: Ethereum_DexAmmProtocol!
  """ Number of unique hourly active users """
  hourlyActiveUsers: Int!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. 
  """
  hourlyTransactionCount: Int!
  """ Total number of deposits (add liquidity) in an hour """
  hourlyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) in an hour """
  hourlyWithdrawCount: Int!
  """ Total number of trades (swaps) in an hour """
  hourlySwapCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Ethereum_UsageMetricsHourlySnapshot_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  hour: Int
  hour_not: Int
  hour_gt: Int
  hour_lt: Int
  hour_gte: Int
  hour_lte: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Ethereum_DexAmmProtocol_filter
  hourlyActiveUsers: Int
  hourlyActiveUsers_not: Int
  hourlyActiveUsers_gt: Int
  hourlyActiveUsers_lt: Int
  hourlyActiveUsers_gte: Int
  hourlyActiveUsers_lte: Int
  hourlyActiveUsers_in: [Int!]
  hourlyActiveUsers_not_in: [Int!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  hourlyTransactionCount: Int
  hourlyTransactionCount_not: Int
  hourlyTransactionCount_gt: Int
  hourlyTransactionCount_lt: Int
  hourlyTransactionCount_gte: Int
  hourlyTransactionCount_lte: Int
  hourlyTransactionCount_in: [Int!]
  hourlyTransactionCount_not_in: [Int!]
  hourlyDepositCount: Int
  hourlyDepositCount_not: Int
  hourlyDepositCount_gt: Int
  hourlyDepositCount_lt: Int
  hourlyDepositCount_gte: Int
  hourlyDepositCount_lte: Int
  hourlyDepositCount_in: [Int!]
  hourlyDepositCount_not_in: [Int!]
  hourlyWithdrawCount: Int
  hourlyWithdrawCount_not: Int
  hourlyWithdrawCount_gt: Int
  hourlyWithdrawCount_lt: Int
  hourlyWithdrawCount_gte: Int
  hourlyWithdrawCount_lte: Int
  hourlyWithdrawCount_in: [Int!]
  hourlyWithdrawCount_not_in: [Int!]
  hourlySwapCount: Int
  hourlySwapCount_not: Int
  hourlySwapCount_gt: Int
  hourlySwapCount_lt: Int
  hourlySwapCount_gte: Int
  hourlySwapCount_lte: Int
  hourlySwapCount_in: [Int!]
  hourlySwapCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_UsageMetricsHourlySnapshot_filter]
  or: [Ethereum_UsageMetricsHourlySnapshot_filter]
}

enum Ethereum_UsageMetricsHourlySnapshot_orderBy {
  id
  hour
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  hourlyActiveUsers
  cumulativeUniqueUsers
  hourlyTransactionCount
  hourlyDepositCount
  hourlyWithdrawCount
  hourlySwapCount
  timestamp
  blockNumber
}

type Ethereum_Withdraw {
  """ { Transaction hash }-{ Log index }"""
  id: Ethereum_Bytes!
  """ Transaction hash of the transaction that emitted this event """
  hash: Ethereum_Bytes!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Gas limit of the transaction that emitted this event """
  gasLimit: BigInt
  """ Gas used in this transaction. (Optional because not every chain will support this) 
  """
  gasUsed: BigInt
  """ Gas price of the transaction that emitted this event """
  gasPrice: BigInt
  """ The protocol this transaction belongs to """
  protocol: Ethereum_DexAmmProtocol!
  """ Account that emitted this event """
  account: Ethereum_Account!
  """ The user position changed by this event """
  position: Ethereum_Position
  """ lower tick of position """
  tickLower: BigInt
  """ upper tick of position """
  tickUpper: BigInt
  """ The pool involving this event """
  pool: Ethereum_LiquidityPool!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ Amount of liquidity burned """
  liquidity: BigInt!
  """ Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool 
  """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Ethereum_Token_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_Token_filter): [Ethereum_Token!]!
  """ Amount of input tokens in the token's native unit """
  inputTokenAmounts: [BigInt!]!
  """ Amount of input tokens in the liquidity pool """
  reserveAmounts: [BigInt!]
  """ USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool) 
  """
  amountUSD: Ethereum_BigDecimal!
}

input Ethereum_Withdraw_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  hash: Ethereum_Bytes
  hash_not: Ethereum_Bytes
  hash_gt: Ethereum_Bytes
  hash_lt: Ethereum_Bytes
  hash_gte: Ethereum_Bytes
  hash_lte: Ethereum_Bytes
  hash_in: [Ethereum_Bytes!]
  hash_not_in: [Ethereum_Bytes!]
  hash_contains: Ethereum_Bytes
  hash_not_contains: Ethereum_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Ethereum_DexAmmProtocol_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Ethereum_Account_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Ethereum_Position_filter
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Ethereum_LiquidityPool_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Ethereum_Token_filter
  inputTokenAmounts: [BigInt!]
  inputTokenAmounts_not: [BigInt!]
  inputTokenAmounts_contains: [BigInt!]
  inputTokenAmounts_contains_nocase: [BigInt!]
  inputTokenAmounts_not_contains: [BigInt!]
  inputTokenAmounts_not_contains_nocase: [BigInt!]
  reserveAmounts: [BigInt!]
  reserveAmounts_not: [BigInt!]
  reserveAmounts_contains: [BigInt!]
  reserveAmounts_contains_nocase: [BigInt!]
  reserveAmounts_not_contains: [BigInt!]
  reserveAmounts_not_contains_nocase: [BigInt!]
  amountUSD: Ethereum_BigDecimal
  amountUSD_not: Ethereum_BigDecimal
  amountUSD_gt: Ethereum_BigDecimal
  amountUSD_lt: Ethereum_BigDecimal
  amountUSD_gte: Ethereum_BigDecimal
  amountUSD_lte: Ethereum_BigDecimal
  amountUSD_in: [Ethereum_BigDecimal!]
  amountUSD_not_in: [Ethereum_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum_Withdraw_filter]
  or: [Ethereum_Withdraw_filter]
}

enum Ethereum_Withdraw_orderBy {
  id
  hash
  nonce
  logIndex
  gasLimit
  gasUsed
  gasPrice
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__liquidityTokenType
  position__liquidity
  position__liquidityUSD
  position__cumulativeDepositUSD
  position__cumulativeWithdrawUSD
  position__depositCount
  position__withdrawCount
  tickLower
  tickUpper
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  blockNumber
  timestamp
  liquidity
  inputTokens
  inputTokenAmounts
  reserveAmounts
  amountUSD
}

type Ethereum__Block_ {
  """The hash of the block"""
  hash: Ethereum_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Ethereum_Bytes
}

"""  Used to keep track of the price of Ether/TVL in USD, pool deposit count, and total unique users 
"""
type Ethereum__HelperStore {
  id: Ethereum_Bytes!
  """ Token Prices """
  valueDecimalList: [Ethereum_BigDecimal!]
  """ price of ETH/TVL in USD """
  valueDecimal: Ethereum_BigDecimal
  """ # of deposits, # of unique users """
  valueInt: Int
}

input Ethereum__HelperStore_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  valueDecimalList: [Ethereum_BigDecimal!]
  valueDecimalList_not: [Ethereum_BigDecimal!]
  valueDecimalList_contains: [Ethereum_BigDecimal!]
  valueDecimalList_contains_nocase: [Ethereum_BigDecimal!]
  valueDecimalList_not_contains: [Ethereum_BigDecimal!]
  valueDecimalList_not_contains_nocase: [Ethereum_BigDecimal!]
  valueDecimal: Ethereum_BigDecimal
  valueDecimal_not: Ethereum_BigDecimal
  valueDecimal_gt: Ethereum_BigDecimal
  valueDecimal_lt: Ethereum_BigDecimal
  valueDecimal_gte: Ethereum_BigDecimal
  valueDecimal_lte: Ethereum_BigDecimal
  valueDecimal_in: [Ethereum_BigDecimal!]
  valueDecimal_not_in: [Ethereum_BigDecimal!]
  valueInt: Int
  valueInt_not: Int
  valueInt_gt: Int
  valueInt_lt: Int
  valueInt_gte: Int
  valueInt_lte: Int
  valueInt_in: [Int!]
  valueInt_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum__HelperStore_filter]
  or: [Ethereum__HelperStore_filter]
}

enum Ethereum__HelperStore_orderBy {
  id
  valueDecimalList
  valueDecimal
  valueInt
}

type Ethereum__LiquidityPoolAmount {
  """ Smart contract address of the pool """
  id: Ethereum_Bytes!
  """ Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool 
  """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Ethereum_Token_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_Token_filter): [Ethereum_Token!]!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [Ethereum_BigDecimal!]!
  tokenPrices: [Ethereum_BigDecimal!]!
}

input Ethereum__LiquidityPoolAmount_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Ethereum_Token_filter
  inputTokenBalances: [Ethereum_BigDecimal!]
  inputTokenBalances_not: [Ethereum_BigDecimal!]
  inputTokenBalances_contains: [Ethereum_BigDecimal!]
  inputTokenBalances_contains_nocase: [Ethereum_BigDecimal!]
  inputTokenBalances_not_contains: [Ethereum_BigDecimal!]
  inputTokenBalances_not_contains_nocase: [Ethereum_BigDecimal!]
  tokenPrices: [Ethereum_BigDecimal!]
  tokenPrices_not: [Ethereum_BigDecimal!]
  tokenPrices_contains: [Ethereum_BigDecimal!]
  tokenPrices_contains_nocase: [Ethereum_BigDecimal!]
  tokenPrices_not_contains: [Ethereum_BigDecimal!]
  tokenPrices_not_contains_nocase: [Ethereum_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum__LiquidityPoolAmount_filter]
  or: [Ethereum__LiquidityPoolAmount_filter]
}

enum Ethereum__LiquidityPoolAmount_orderBy {
  id
  inputTokens
  inputTokenBalances
  tokenPrices
}

"""The type for the top-level _meta field"""
type Ethereum__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: Ethereum__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum Ethereum__SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

""" This is used to keep tract of the derived price of tokens in ethereum and the whitelisted pools to which it belongs
"""
type Ethereum__TokenWhitelist {
  """ Token Address """
  id: Ethereum_Bytes!
  """ pools token is in that are white listed for USD pricing """
  whitelistPools(skip: Int = 0, first: Int = 100, orderBy: Ethereum_LiquidityPool_orderBy, orderDirection: Ethereum_OrderDirection, where: Ethereum_LiquidityPool_filter): [Ethereum_LiquidityPool!]!
}

type Ethereum__TokenWhitelistSymbol {
  """ Whitelist Token Symbol """
  id: ID!
  """ Whitelist Token Address"""
  address: Ethereum_Bytes!
}

input Ethereum__TokenWhitelistSymbol_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Ethereum_Bytes
  address_not: Ethereum_Bytes
  address_gt: Ethereum_Bytes
  address_lt: Ethereum_Bytes
  address_gte: Ethereum_Bytes
  address_lte: Ethereum_Bytes
  address_in: [Ethereum_Bytes!]
  address_not_in: [Ethereum_Bytes!]
  address_contains: Ethereum_Bytes
  address_not_contains: Ethereum_Bytes
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum__TokenWhitelistSymbol_filter]
  or: [Ethereum__TokenWhitelistSymbol_filter]
}

enum Ethereum__TokenWhitelistSymbol_orderBy {
  id
  address
}

input Ethereum__TokenWhitelist_filter {
  id: Ethereum_Bytes
  id_not: Ethereum_Bytes
  id_gt: Ethereum_Bytes
  id_lt: Ethereum_Bytes
  id_gte: Ethereum_Bytes
  id_lte: Ethereum_Bytes
  id_in: [Ethereum_Bytes!]
  id_not_in: [Ethereum_Bytes!]
  id_contains: Ethereum_Bytes
  id_not_contains: Ethereum_Bytes
  whitelistPools: [String!]
  whitelistPools_not: [String!]
  whitelistPools_contains: [String!]
  whitelistPools_contains_nocase: [String!]
  whitelistPools_not_contains: [String!]
  whitelistPools_not_contains_nocase: [String!]
  whitelistPools_: Ethereum_LiquidityPool_filter
  """Filter for the block changed event."""
  _change_block: Ethereum_BlockChangedFilter
  and: [Ethereum__TokenWhitelist_filter]
  or: [Ethereum__TokenWhitelist_filter]
}

enum Ethereum__TokenWhitelist_orderBy {
  id
  whitelistPools
}

type Optimism_Account {
  """ { Account address } """
  id: Optimism_Bytes!
  """ Number of positions this account has """
  positionCount: Int!
  """ All positions that belong to this account """
  positions(skip: Int = 0, first: Int = 100, orderBy: Optimism_Position_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_Position_filter): [Optimism_Position!]!
  """ Number of open positions this account has """
  openPositionCount: Int!
  """ Number of closed positions this account has """
  closedPositionCount: Int!
  """ Number of deposits this account made """
  depositCount: Int!
  """ All deposit events of this account """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Optimism_Deposit_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_Deposit_filter): [Optimism_Deposit!]!
  """ Number of withdrawals this account made """
  withdrawCount: Int!
  """ All withdraw events of this account """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Optimism_Withdraw_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_Withdraw_filter): [Optimism_Withdraw!]!
  """ Number of times this account has traded/swapped"""
  swapCount: Int!
  """ All swap events of this account """
  swaps(skip: Int = 0, first: Int = 100, orderBy: Optimism_Swap_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_Swap_filter): [Optimism_Swap!]!
}

input Optimism_Account_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  positions_: Optimism_Position_filter
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  deposits_: Optimism_Deposit_filter
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  withdraws_: Optimism_Withdraw_filter
  swapCount: Int
  swapCount_not: Int
  swapCount_gt: Int
  swapCount_lt: Int
  swapCount_gte: Int
  swapCount_lte: Int
  swapCount_in: [Int!]
  swapCount_not_in: [Int!]
  swaps_: Optimism_Swap_filter
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_Account_filter]
  or: [Optimism_Account_filter]
}

enum Optimism_Account_orderBy {
  id
  positionCount
  positions
  openPositionCount
  closedPositionCount
  depositCount
  deposits
  withdrawCount
  withdraws
  swapCount
  swaps
}

type Optimism_ActiveAccount {
  """ { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch } 
  """
  id: Optimism_Bytes!
}

input Optimism_ActiveAccount_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_ActiveAccount_filter]
  or: [Optimism_ActiveAccount_filter]
}

enum Optimism_ActiveAccount_orderBy {
  id
}

enum Optimism_Aggregation_interval {
  hour
  day
}

scalar Optimism_BigDecimal

input Optimism_BlockChangedFilter {
  number_gte: Int!
}

input Optimism_Block_height {
  hash: Optimism_Bytes
  number: Int
  number_gte: Int
}

scalar Optimism_Bytes

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.

"""
type Optimism_Deposit {
  """ { Transaction hash }-{ Log index } """
  id: Optimism_Bytes!
  """ Transaction hash of the transaction that emitted this event """
  hash: Optimism_Bytes!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Gas limit of the transaction that emitted this event """
  gasLimit: BigInt
  """ Gas used in this transaction. (Optional because not every chain will support this) 
  """
  gasUsed: BigInt
  """ Gas price of the transaction that emitted this event """
  gasPrice: BigInt
  """ The protocol this transaction belongs to """
  protocol: Optimism_DexAmmProtocol!
  """ Account that emitted this event """
  account: Optimism_Account!
  """ The user position changed by this event """
  position: Optimism_Position
  """ The pool involving this event """
  pool: Optimism_LiquidityPool!
  """ lower tick of position """
  tickLower: BigInt
  """ upper tick of position """
  tickUpper: BigInt
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ Amount of liquidity minted """
  liquidity: BigInt!
  """ Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Optimism_Token_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_Token_filter): [Optimism_Token!]!
  """ Amount of input tokens in the token's native unit """
  inputTokenAmounts: [BigInt!]!
  """ Amount of input tokens in the liquidity pool """
  reserveAmounts: [BigInt!]
  """ USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool) 
  """
  amountUSD: Optimism_BigDecimal!
}

input Optimism_Deposit_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  hash: Optimism_Bytes
  hash_not: Optimism_Bytes
  hash_gt: Optimism_Bytes
  hash_lt: Optimism_Bytes
  hash_gte: Optimism_Bytes
  hash_lte: Optimism_Bytes
  hash_in: [Optimism_Bytes!]
  hash_not_in: [Optimism_Bytes!]
  hash_contains: Optimism_Bytes
  hash_not_contains: Optimism_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Optimism_DexAmmProtocol_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Optimism_Account_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Optimism_Position_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Optimism_LiquidityPool_filter
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Optimism_Token_filter
  inputTokenAmounts: [BigInt!]
  inputTokenAmounts_not: [BigInt!]
  inputTokenAmounts_contains: [BigInt!]
  inputTokenAmounts_contains_nocase: [BigInt!]
  inputTokenAmounts_not_contains: [BigInt!]
  inputTokenAmounts_not_contains_nocase: [BigInt!]
  reserveAmounts: [BigInt!]
  reserveAmounts_not: [BigInt!]
  reserveAmounts_contains: [BigInt!]
  reserveAmounts_contains_nocase: [BigInt!]
  reserveAmounts_not_contains: [BigInt!]
  reserveAmounts_not_contains_nocase: [BigInt!]
  amountUSD: Optimism_BigDecimal
  amountUSD_not: Optimism_BigDecimal
  amountUSD_gt: Optimism_BigDecimal
  amountUSD_lt: Optimism_BigDecimal
  amountUSD_gte: Optimism_BigDecimal
  amountUSD_lte: Optimism_BigDecimal
  amountUSD_in: [Optimism_BigDecimal!]
  amountUSD_not_in: [Optimism_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_Deposit_filter]
  or: [Optimism_Deposit_filter]
}

enum Optimism_Deposit_orderBy {
  id
  hash
  nonce
  logIndex
  gasLimit
  gasUsed
  gasPrice
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__liquidityTokenType
  position__liquidity
  position__liquidityUSD
  position__cumulativeDepositUSD
  position__cumulativeWithdrawUSD
  position__depositCount
  position__withdrawCount
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  tickLower
  tickUpper
  blockNumber
  timestamp
  liquidity
  inputTokens
  inputTokenAmounts
  reserveAmounts
  amountUSD
}

type Optimism_DexAmmProtocol implements Optimism_Protocol {
  """ Smart contract address of the protocol's main contract (Factory, Registry, etc) 
  """
  id: Optimism_Bytes!
  """ Name of the protocol, including version. e.g. Uniswap v3 """
  name: String!
  """ Slug of protocol, including version. e.g. uniswap-v3 """
  slug: String!
  """ Version of the subgraph schema, in SemVer format (e.g. 1.0.0) """
  schemaVersion: String!
  """ Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) 
  """
  subgraphVersion: String!
  """ Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) 
  """
  methodologyVersion: String!
  """ The blockchain network this subgraph is indexing on """
  network: Optimism_Network!
  """ The type of protocol (e.g. DEX, Lending, Yield, etc) """
  type: Optimism_ProtocolType!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: Optimism_BigDecimal!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Optimism_BigDecimal!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Optimism_BigDecimal!
  """ All protocol-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedProtocolSideValueUSD: Optimism_BigDecimal!
  """ All supply-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedSupplySideValueUSD: Optimism_BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: Optimism_BigDecimal
  """ All historical volume in USD """
  cumulativeVolumeUSD: Optimism_BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: Optimism_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: Optimism_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: Optimism_BigDecimal!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Number of cumulative liquidity providers """
  cumulativeUniqueLPs: Int!
  """ Number of cumulative traders """
  cumulativeUniqueTraders: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Total number of open positions """
  openPositionCount: Int!
  """ Total number of positions (open and closed) """
  cumulativePositionCount: Int!
  """ Day ID of the most recent daily snapshot """
  lastSnapshotDayID: Int!
  """ Timestamp of the last time this entity was updated """
  lastUpdateTimestamp: BigInt!
  """ Block number of the last time this entity was updated """
  lastUpdateBlockNumber: BigInt!
  """ Daily usage metrics for this protocol """
  dailyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Optimism_UsageMetricsDailySnapshot_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_UsageMetricsDailySnapshot_filter): [Optimism_UsageMetricsDailySnapshot!]!
  """ Hourly usage metrics for this protocol """
  hourlyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Optimism_UsageMetricsHourlySnapshot_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_UsageMetricsHourlySnapshot_filter): [Optimism_UsageMetricsHourlySnapshot!]!
  """ Daily financial metrics for this protocol """
  financialMetrics(skip: Int = 0, first: Int = 100, orderBy: Optimism_FinancialsDailySnapshot_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_FinancialsDailySnapshot_filter): [Optimism_FinancialsDailySnapshot!]!
  """ All pools that belong to this protocol """
  pools(skip: Int = 0, first: Int = 100, orderBy: Optimism_LiquidityPool_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_LiquidityPool_filter): [Optimism_LiquidityPool!]!
  """ This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis 
  """
  _regenesis: Boolean!
}

input Optimism_DexAmmProtocol_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  schemaVersion: String
  schemaVersion_not: String
  schemaVersion_gt: String
  schemaVersion_lt: String
  schemaVersion_gte: String
  schemaVersion_lte: String
  schemaVersion_in: [String!]
  schemaVersion_not_in: [String!]
  schemaVersion_contains: String
  schemaVersion_contains_nocase: String
  schemaVersion_not_contains: String
  schemaVersion_not_contains_nocase: String
  schemaVersion_starts_with: String
  schemaVersion_starts_with_nocase: String
  schemaVersion_not_starts_with: String
  schemaVersion_not_starts_with_nocase: String
  schemaVersion_ends_with: String
  schemaVersion_ends_with_nocase: String
  schemaVersion_not_ends_with: String
  schemaVersion_not_ends_with_nocase: String
  subgraphVersion: String
  subgraphVersion_not: String
  subgraphVersion_gt: String
  subgraphVersion_lt: String
  subgraphVersion_gte: String
  subgraphVersion_lte: String
  subgraphVersion_in: [String!]
  subgraphVersion_not_in: [String!]
  subgraphVersion_contains: String
  subgraphVersion_contains_nocase: String
  subgraphVersion_not_contains: String
  subgraphVersion_not_contains_nocase: String
  subgraphVersion_starts_with: String
  subgraphVersion_starts_with_nocase: String
  subgraphVersion_not_starts_with: String
  subgraphVersion_not_starts_with_nocase: String
  subgraphVersion_ends_with: String
  subgraphVersion_ends_with_nocase: String
  subgraphVersion_not_ends_with: String
  subgraphVersion_not_ends_with_nocase: String
  methodologyVersion: String
  methodologyVersion_not: String
  methodologyVersion_gt: String
  methodologyVersion_lt: String
  methodologyVersion_gte: String
  methodologyVersion_lte: String
  methodologyVersion_in: [String!]
  methodologyVersion_not_in: [String!]
  methodologyVersion_contains: String
  methodologyVersion_contains_nocase: String
  methodologyVersion_not_contains: String
  methodologyVersion_not_contains_nocase: String
  methodologyVersion_starts_with: String
  methodologyVersion_starts_with_nocase: String
  methodologyVersion_not_starts_with: String
  methodologyVersion_not_starts_with_nocase: String
  methodologyVersion_ends_with: String
  methodologyVersion_ends_with_nocase: String
  methodologyVersion_not_ends_with: String
  methodologyVersion_not_ends_with_nocase: String
  network: Optimism_Network
  network_not: Optimism_Network
  network_in: [Optimism_Network!]
  network_not_in: [Optimism_Network!]
  type: Optimism_ProtocolType
  type_not: Optimism_ProtocolType
  type_in: [Optimism_ProtocolType!]
  type_not_in: [Optimism_ProtocolType!]
  totalValueLockedUSD: Optimism_BigDecimal
  totalValueLockedUSD_not: Optimism_BigDecimal
  totalValueLockedUSD_gt: Optimism_BigDecimal
  totalValueLockedUSD_lt: Optimism_BigDecimal
  totalValueLockedUSD_gte: Optimism_BigDecimal
  totalValueLockedUSD_lte: Optimism_BigDecimal
  totalValueLockedUSD_in: [Optimism_BigDecimal!]
  totalValueLockedUSD_not_in: [Optimism_BigDecimal!]
  totalLiquidityUSD: Optimism_BigDecimal
  totalLiquidityUSD_not: Optimism_BigDecimal
  totalLiquidityUSD_gt: Optimism_BigDecimal
  totalLiquidityUSD_lt: Optimism_BigDecimal
  totalLiquidityUSD_gte: Optimism_BigDecimal
  totalLiquidityUSD_lte: Optimism_BigDecimal
  totalLiquidityUSD_in: [Optimism_BigDecimal!]
  totalLiquidityUSD_not_in: [Optimism_BigDecimal!]
  activeLiquidityUSD: Optimism_BigDecimal
  activeLiquidityUSD_not: Optimism_BigDecimal
  activeLiquidityUSD_gt: Optimism_BigDecimal
  activeLiquidityUSD_lt: Optimism_BigDecimal
  activeLiquidityUSD_gte: Optimism_BigDecimal
  activeLiquidityUSD_lte: Optimism_BigDecimal
  activeLiquidityUSD_in: [Optimism_BigDecimal!]
  activeLiquidityUSD_not_in: [Optimism_BigDecimal!]
  uncollectedProtocolSideValueUSD: Optimism_BigDecimal
  uncollectedProtocolSideValueUSD_not: Optimism_BigDecimal
  uncollectedProtocolSideValueUSD_gt: Optimism_BigDecimal
  uncollectedProtocolSideValueUSD_lt: Optimism_BigDecimal
  uncollectedProtocolSideValueUSD_gte: Optimism_BigDecimal
  uncollectedProtocolSideValueUSD_lte: Optimism_BigDecimal
  uncollectedProtocolSideValueUSD_in: [Optimism_BigDecimal!]
  uncollectedProtocolSideValueUSD_not_in: [Optimism_BigDecimal!]
  uncollectedSupplySideValueUSD: Optimism_BigDecimal
  uncollectedSupplySideValueUSD_not: Optimism_BigDecimal
  uncollectedSupplySideValueUSD_gt: Optimism_BigDecimal
  uncollectedSupplySideValueUSD_lt: Optimism_BigDecimal
  uncollectedSupplySideValueUSD_gte: Optimism_BigDecimal
  uncollectedSupplySideValueUSD_lte: Optimism_BigDecimal
  uncollectedSupplySideValueUSD_in: [Optimism_BigDecimal!]
  uncollectedSupplySideValueUSD_not_in: [Optimism_BigDecimal!]
  protocolControlledValueUSD: Optimism_BigDecimal
  protocolControlledValueUSD_not: Optimism_BigDecimal
  protocolControlledValueUSD_gt: Optimism_BigDecimal
  protocolControlledValueUSD_lt: Optimism_BigDecimal
  protocolControlledValueUSD_gte: Optimism_BigDecimal
  protocolControlledValueUSD_lte: Optimism_BigDecimal
  protocolControlledValueUSD_in: [Optimism_BigDecimal!]
  protocolControlledValueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeVolumeUSD: Optimism_BigDecimal
  cumulativeVolumeUSD_not: Optimism_BigDecimal
  cumulativeVolumeUSD_gt: Optimism_BigDecimal
  cumulativeVolumeUSD_lt: Optimism_BigDecimal
  cumulativeVolumeUSD_gte: Optimism_BigDecimal
  cumulativeVolumeUSD_lte: Optimism_BigDecimal
  cumulativeVolumeUSD_in: [Optimism_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Optimism_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeTotalRevenueUSD: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_not: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_gt: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_lt: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_gte: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_lte: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  cumulativeUniqueLPs: Int
  cumulativeUniqueLPs_not: Int
  cumulativeUniqueLPs_gt: Int
  cumulativeUniqueLPs_lt: Int
  cumulativeUniqueLPs_gte: Int
  cumulativeUniqueLPs_lte: Int
  cumulativeUniqueLPs_in: [Int!]
  cumulativeUniqueLPs_not_in: [Int!]
  cumulativeUniqueTraders: Int
  cumulativeUniqueTraders_not: Int
  cumulativeUniqueTraders_gt: Int
  cumulativeUniqueTraders_lt: Int
  cumulativeUniqueTraders_gte: Int
  cumulativeUniqueTraders_lte: Int
  cumulativeUniqueTraders_in: [Int!]
  cumulativeUniqueTraders_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  cumulativePositionCount: Int
  cumulativePositionCount_not: Int
  cumulativePositionCount_gt: Int
  cumulativePositionCount_lt: Int
  cumulativePositionCount_gte: Int
  cumulativePositionCount_lte: Int
  cumulativePositionCount_in: [Int!]
  cumulativePositionCount_not_in: [Int!]
  lastSnapshotDayID: Int
  lastSnapshotDayID_not: Int
  lastSnapshotDayID_gt: Int
  lastSnapshotDayID_lt: Int
  lastSnapshotDayID_gte: Int
  lastSnapshotDayID_lte: Int
  lastSnapshotDayID_in: [Int!]
  lastSnapshotDayID_not_in: [Int!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  dailyUsageMetrics_: Optimism_UsageMetricsDailySnapshot_filter
  hourlyUsageMetrics_: Optimism_UsageMetricsHourlySnapshot_filter
  financialMetrics_: Optimism_FinancialsDailySnapshot_filter
  pools_: Optimism_LiquidityPool_filter
  _regenesis: Boolean
  _regenesis_not: Boolean
  _regenesis_in: [Boolean!]
  _regenesis_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_DexAmmProtocol_filter]
  or: [Optimism_DexAmmProtocol_filter]
}

enum Optimism_DexAmmProtocol_orderBy {
  id
  name
  slug
  schemaVersion
  subgraphVersion
  methodologyVersion
  network
  type
  totalValueLockedUSD
  totalLiquidityUSD
  activeLiquidityUSD
  uncollectedProtocolSideValueUSD
  uncollectedSupplySideValueUSD
  protocolControlledValueUSD
  cumulativeVolumeUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  cumulativeUniqueUsers
  cumulativeUniqueLPs
  cumulativeUniqueTraders
  totalPoolCount
  openPositionCount
  cumulativePositionCount
  lastSnapshotDayID
  lastUpdateTimestamp
  lastUpdateBlockNumber
  dailyUsageMetrics
  hourlyUsageMetrics
  financialMetrics
  pools
  _regenesis
}

type Optimism_FinancialsDailySnapshot {
  """ ID is # of days since Unix epoch time """
  id: Optimism_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ Protocol this snapshot is associated with """
  protocol: Optimism_DexAmmProtocol!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: Optimism_BigDecimal!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Optimism_BigDecimal!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Optimism_BigDecimal!
  """ All protocol-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedProtocolSideValueUSD: Optimism_BigDecimal!
  """ All supply-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedSupplySideValueUSD: Optimism_BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: Optimism_BigDecimal
  """ All trade volume occurred in a given day, in USD """
  dailyVolumeUSD: Optimism_BigDecimal!
  """ All historical trade volume in USD """
  cumulativeVolumeUSD: Optimism_BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  dailySupplySideRevenueUSD: Optimism_BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: Optimism_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  dailyProtocolSideRevenueUSD: Optimism_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: Optimism_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  dailyTotalRevenueUSD: Optimism_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: Optimism_BigDecimal!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Optimism_FinancialsDailySnapshot_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Optimism_DexAmmProtocol_filter
  totalValueLockedUSD: Optimism_BigDecimal
  totalValueLockedUSD_not: Optimism_BigDecimal
  totalValueLockedUSD_gt: Optimism_BigDecimal
  totalValueLockedUSD_lt: Optimism_BigDecimal
  totalValueLockedUSD_gte: Optimism_BigDecimal
  totalValueLockedUSD_lte: Optimism_BigDecimal
  totalValueLockedUSD_in: [Optimism_BigDecimal!]
  totalValueLockedUSD_not_in: [Optimism_BigDecimal!]
  totalLiquidityUSD: Optimism_BigDecimal
  totalLiquidityUSD_not: Optimism_BigDecimal
  totalLiquidityUSD_gt: Optimism_BigDecimal
  totalLiquidityUSD_lt: Optimism_BigDecimal
  totalLiquidityUSD_gte: Optimism_BigDecimal
  totalLiquidityUSD_lte: Optimism_BigDecimal
  totalLiquidityUSD_in: [Optimism_BigDecimal!]
  totalLiquidityUSD_not_in: [Optimism_BigDecimal!]
  activeLiquidityUSD: Optimism_BigDecimal
  activeLiquidityUSD_not: Optimism_BigDecimal
  activeLiquidityUSD_gt: Optimism_BigDecimal
  activeLiquidityUSD_lt: Optimism_BigDecimal
  activeLiquidityUSD_gte: Optimism_BigDecimal
  activeLiquidityUSD_lte: Optimism_BigDecimal
  activeLiquidityUSD_in: [Optimism_BigDecimal!]
  activeLiquidityUSD_not_in: [Optimism_BigDecimal!]
  uncollectedProtocolSideValueUSD: Optimism_BigDecimal
  uncollectedProtocolSideValueUSD_not: Optimism_BigDecimal
  uncollectedProtocolSideValueUSD_gt: Optimism_BigDecimal
  uncollectedProtocolSideValueUSD_lt: Optimism_BigDecimal
  uncollectedProtocolSideValueUSD_gte: Optimism_BigDecimal
  uncollectedProtocolSideValueUSD_lte: Optimism_BigDecimal
  uncollectedProtocolSideValueUSD_in: [Optimism_BigDecimal!]
  uncollectedProtocolSideValueUSD_not_in: [Optimism_BigDecimal!]
  uncollectedSupplySideValueUSD: Optimism_BigDecimal
  uncollectedSupplySideValueUSD_not: Optimism_BigDecimal
  uncollectedSupplySideValueUSD_gt: Optimism_BigDecimal
  uncollectedSupplySideValueUSD_lt: Optimism_BigDecimal
  uncollectedSupplySideValueUSD_gte: Optimism_BigDecimal
  uncollectedSupplySideValueUSD_lte: Optimism_BigDecimal
  uncollectedSupplySideValueUSD_in: [Optimism_BigDecimal!]
  uncollectedSupplySideValueUSD_not_in: [Optimism_BigDecimal!]
  protocolControlledValueUSD: Optimism_BigDecimal
  protocolControlledValueUSD_not: Optimism_BigDecimal
  protocolControlledValueUSD_gt: Optimism_BigDecimal
  protocolControlledValueUSD_lt: Optimism_BigDecimal
  protocolControlledValueUSD_gte: Optimism_BigDecimal
  protocolControlledValueUSD_lte: Optimism_BigDecimal
  protocolControlledValueUSD_in: [Optimism_BigDecimal!]
  protocolControlledValueUSD_not_in: [Optimism_BigDecimal!]
  dailyVolumeUSD: Optimism_BigDecimal
  dailyVolumeUSD_not: Optimism_BigDecimal
  dailyVolumeUSD_gt: Optimism_BigDecimal
  dailyVolumeUSD_lt: Optimism_BigDecimal
  dailyVolumeUSD_gte: Optimism_BigDecimal
  dailyVolumeUSD_lte: Optimism_BigDecimal
  dailyVolumeUSD_in: [Optimism_BigDecimal!]
  dailyVolumeUSD_not_in: [Optimism_BigDecimal!]
  cumulativeVolumeUSD: Optimism_BigDecimal
  cumulativeVolumeUSD_not: Optimism_BigDecimal
  cumulativeVolumeUSD_gt: Optimism_BigDecimal
  cumulativeVolumeUSD_lt: Optimism_BigDecimal
  cumulativeVolumeUSD_gte: Optimism_BigDecimal
  cumulativeVolumeUSD_lte: Optimism_BigDecimal
  cumulativeVolumeUSD_in: [Optimism_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Optimism_BigDecimal!]
  dailySupplySideRevenueUSD: Optimism_BigDecimal
  dailySupplySideRevenueUSD_not: Optimism_BigDecimal
  dailySupplySideRevenueUSD_gt: Optimism_BigDecimal
  dailySupplySideRevenueUSD_lt: Optimism_BigDecimal
  dailySupplySideRevenueUSD_gte: Optimism_BigDecimal
  dailySupplySideRevenueUSD_lte: Optimism_BigDecimal
  dailySupplySideRevenueUSD_in: [Optimism_BigDecimal!]
  dailySupplySideRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Optimism_BigDecimal!]
  dailyProtocolSideRevenueUSD: Optimism_BigDecimal
  dailyProtocolSideRevenueUSD_not: Optimism_BigDecimal
  dailyProtocolSideRevenueUSD_gt: Optimism_BigDecimal
  dailyProtocolSideRevenueUSD_lt: Optimism_BigDecimal
  dailyProtocolSideRevenueUSD_gte: Optimism_BigDecimal
  dailyProtocolSideRevenueUSD_lte: Optimism_BigDecimal
  dailyProtocolSideRevenueUSD_in: [Optimism_BigDecimal!]
  dailyProtocolSideRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Optimism_BigDecimal!]
  dailyTotalRevenueUSD: Optimism_BigDecimal
  dailyTotalRevenueUSD_not: Optimism_BigDecimal
  dailyTotalRevenueUSD_gt: Optimism_BigDecimal
  dailyTotalRevenueUSD_lt: Optimism_BigDecimal
  dailyTotalRevenueUSD_gte: Optimism_BigDecimal
  dailyTotalRevenueUSD_lte: Optimism_BigDecimal
  dailyTotalRevenueUSD_in: [Optimism_BigDecimal!]
  dailyTotalRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeTotalRevenueUSD: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_not: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_gt: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_lt: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_gte: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_lte: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Optimism_BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_FinancialsDailySnapshot_filter]
  or: [Optimism_FinancialsDailySnapshot_filter]
}

enum Optimism_FinancialsDailySnapshot_orderBy {
  id
  day
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  totalValueLockedUSD
  totalLiquidityUSD
  activeLiquidityUSD
  uncollectedProtocolSideValueUSD
  uncollectedSupplySideValueUSD
  protocolControlledValueUSD
  dailyVolumeUSD
  cumulativeVolumeUSD
  dailySupplySideRevenueUSD
  cumulativeSupplySideRevenueUSD
  dailyProtocolSideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  dailyTotalRevenueUSD
  cumulativeTotalRevenueUSD
  timestamp
  blockNumber
}

"""
8 bytes signed integer

"""
scalar Optimism_Int8

type Optimism_LiquidityPool {
  """ Smart contract address of the pool """
  id: Optimism_Bytes!
  """ The protocol this pool belongs to """
  protocol: Optimism_DexAmmProtocol!
  """ Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT) """
  name: String
  """ Symbol of liquidity pool (e.g. 3CRV) """
  symbol: String
  """ Token that is to represent ownership of liquidity """
  liquidityToken: Optimism_Token
  """ Type of token used to track liquidity """
  liquidityTokenType: Optimism_TokenType
  """ Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer 
  """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Optimism_Token_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_Token_filter): [Optimism_Token!]!
  """ Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon 
  """
  rewardTokens(skip: Int = 0, first: Int = 100, orderBy: Optimism_RewardToken_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_RewardToken_filter): [Optimism_RewardToken!]
  """ Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee. ) 
  """
  fees(skip: Int = 0, first: Int = 100, orderBy: Optimism_LiquidityPoolFee_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_LiquidityPoolFee_filter): [Optimism_LiquidityPoolFee!]!
  """ Whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol. 
  """
  isSingleSided: Boolean!
  """ Creation timestamp """
  createdTimestamp: BigInt!
  """ Creation block number """
  createdBlockNumber: BigInt!
  """ Current tick representing the price of token0/token1 """
  tick: BigInt
  """ Current TVL (Total Value Locked) of this pool in USD """
  totalValueLockedUSD: Optimism_BigDecimal!
  """ The sum of all active and non-active liquidity for this pool. """
  totalLiquidity: BigInt!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Optimism_BigDecimal!
  """ All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidity: BigInt!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Optimism_BigDecimal!
  """ All protocol-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  """ All protocol-side value locking in USD that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideValuesUSD: [Optimism_BigDecimal!]!
  """ All supply-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  """ All supply-side value locked in USD that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideValuesUSD: [Optimism_BigDecimal!]!
  """ All revenue generated by the liquidity pool, accrued to the supply side. 
  """
  cumulativeSupplySideRevenueUSD: Optimism_BigDecimal!
  """ All revenue generated by the liquidity pool, accrued to the protocol. 
  """
  cumulativeProtocolSideRevenueUSD: Optimism_BigDecimal!
  """ All revenue generated by the liquidity pool. """
  cumulativeTotalRevenueUSD: Optimism_BigDecimal!
  """ All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenAmount: [BigInt!]!
  """ All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenUSD: [Optimism_BigDecimal!]!
  """ All historical trade volume occurred in this pool, in USD """
  cumulativeVolumeUSD: Optimism_BigDecimal!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalancesUSD: [Optimism_BigDecimal!]!
  """ Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool 
  """
  inputTokenWeights: [Optimism_BigDecimal!]!
  """ Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. 
  """
  stakedOutputTokenAmount: BigInt
  """ Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [Optimism_BigDecimal!]
  """ Total number of deposits (add liquidity) """
  cumulativeDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) """
  cumulativeWithdrawCount: Int!
  """ Total number of trades (swaps) """
  cumulativeSwapCount: Int!
  """ All positions in this market """
  positions(skip: Int = 0, first: Int = 100, orderBy: Optimism_Position_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_Position_filter): [Optimism_Position!]!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Day ID of the most recent daily snapshot """
  lastSnapshotDayID: Int!
  """ Hour ID of the most recent hourly snapshot """
  lastSnapshotHourID: Int!
  """ Timestamp of the last time this entity was updated """
  lastUpdateTimestamp: BigInt!
  """ Block number of the last time this entity was updated """
  lastUpdateBlockNumber: BigInt!
  """ Liquidity pool daily snapshots """
  dailySnapshots(skip: Int = 0, first: Int = 100, orderBy: Optimism_LiquidityPoolDailySnapshot_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_LiquidityPoolDailySnapshot_filter): [Optimism_LiquidityPoolDailySnapshot!]!
  """ Liquidity pool hourly snapshots """
  hourlySnapshots(skip: Int = 0, first: Int = 100, orderBy: Optimism_LiquidityPoolHourlySnapshot_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_LiquidityPoolHourlySnapshot_filter): [Optimism_LiquidityPoolHourlySnapshot!]!
  """ All deposit (add liquidity) events occurred in this pool """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Optimism_Deposit_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_Deposit_filter): [Optimism_Deposit!]!
  """ All withdraw (remove liquidity) events occurred in this pool """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Optimism_Withdraw_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_Withdraw_filter): [Optimism_Withdraw!]!
  """ All trade (swap) events occurred in this pool """
  swaps(skip: Int = 0, first: Int = 100, orderBy: Optimism_Swap_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_Swap_filter): [Optimism_Swap!]!
}

type Optimism_LiquidityPoolDailySnapshot {
  """ { Smart contract address of the pool }-{ # of days since Unix epoch time } 
  """
  id: Optimism_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ The protocol this snapshot belongs to """
  protocol: Optimism_DexAmmProtocol!
  """ The pool this snapshot belongs to """
  pool: Optimism_LiquidityPool!
  """ Current tick representing the price of token0/token1 """
  tick: BigInt
  """ Current TVL (Total Value Locked) of this pool """
  totalValueLockedUSD: Optimism_BigDecimal!
  """ The sum of all active and non-active liquidity for this pool. """
  totalLiquidity: BigInt!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Optimism_BigDecimal!
  """ All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidity: BigInt!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Optimism_BigDecimal!
  """ All protocol-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  """ All protocol-side value locking in USD that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideValuesUSD: [Optimism_BigDecimal!]!
  """ All supply-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  """ All supply-side value locked in USD that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideValuesUSD: [Optimism_BigDecimal!]!
  """ All revenue generated by the liquidity pool, accrued to the supply side. 
  """
  cumulativeSupplySideRevenueUSD: Optimism_BigDecimal!
  """ Daily revenue generated by the liquidity pool, accrued to the supply side. 
  """
  dailySupplySideRevenueUSD: Optimism_BigDecimal!
  """ All revenue generated by the liquidity pool, accrued to the protocol. 
  """
  cumulativeProtocolSideRevenueUSD: Optimism_BigDecimal!
  """ Daily revenue generated by the liquidity pool, accrued to the protocol. 
  """
  dailyProtocolSideRevenueUSD: Optimism_BigDecimal!
  """ All revenue generated by the liquidity pool. """
  cumulativeTotalRevenueUSD: Optimism_BigDecimal!
  """ Daily revenue generated by the liquidity pool. """
  dailyTotalRevenueUSD: Optimism_BigDecimal!
  """ All historical trade volume occurred in this pool, in USD """
  cumulativeVolumeUSD: Optimism_BigDecimal!
  """ All trade volume occurred in a given day, in USD """
  dailyVolumeUSD: Optimism_BigDecimal!
  """ All trade volume , in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenAmount: [BigInt!]!
  """ All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  dailyVolumeByTokenAmount: [BigInt!]!
  """ All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenUSD: [Optimism_BigDecimal!]!
  """ All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  dailyVolumeByTokenUSD: [Optimism_BigDecimal!]!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalancesUSD: [Optimism_BigDecimal!]!
  """ Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool 
  """
  inputTokenWeights: [Optimism_BigDecimal!]!
  """ Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. 
  """
  stakedOutputTokenAmount: BigInt
  """ Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [Optimism_BigDecimal!]
  """ Total number of deposits (add liquidity) """
  cumulativeDepositCount: Int!
  """ Total number of deposits (add liquidity) in a day """
  dailyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) """
  cumulativeWithdrawCount: Int!
  """ Total number of withdrawals (remove liquidity) in a day """
  dailyWithdrawCount: Int!
  """ Total number of trades (swaps) """
  cumulativeSwapCount: Int!
  """ Total number of trades (swaps) in a day """
  dailySwapCount: Int!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Optimism_LiquidityPoolDailySnapshot_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Optimism_DexAmmProtocol_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Optimism_LiquidityPool_filter
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  totalValueLockedUSD: Optimism_BigDecimal
  totalValueLockedUSD_not: Optimism_BigDecimal
  totalValueLockedUSD_gt: Optimism_BigDecimal
  totalValueLockedUSD_lt: Optimism_BigDecimal
  totalValueLockedUSD_gte: Optimism_BigDecimal
  totalValueLockedUSD_lte: Optimism_BigDecimal
  totalValueLockedUSD_in: [Optimism_BigDecimal!]
  totalValueLockedUSD_not_in: [Optimism_BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalLiquidityUSD: Optimism_BigDecimal
  totalLiquidityUSD_not: Optimism_BigDecimal
  totalLiquidityUSD_gt: Optimism_BigDecimal
  totalLiquidityUSD_lt: Optimism_BigDecimal
  totalLiquidityUSD_gte: Optimism_BigDecimal
  totalLiquidityUSD_lte: Optimism_BigDecimal
  totalLiquidityUSD_in: [Optimism_BigDecimal!]
  totalLiquidityUSD_not_in: [Optimism_BigDecimal!]
  activeLiquidity: BigInt
  activeLiquidity_not: BigInt
  activeLiquidity_gt: BigInt
  activeLiquidity_lt: BigInt
  activeLiquidity_gte: BigInt
  activeLiquidity_lte: BigInt
  activeLiquidity_in: [BigInt!]
  activeLiquidity_not_in: [BigInt!]
  activeLiquidityUSD: Optimism_BigDecimal
  activeLiquidityUSD_not: Optimism_BigDecimal
  activeLiquidityUSD_gt: Optimism_BigDecimal
  activeLiquidityUSD_lt: Optimism_BigDecimal
  activeLiquidityUSD_gte: Optimism_BigDecimal
  activeLiquidityUSD_lte: Optimism_BigDecimal
  activeLiquidityUSD_in: [Optimism_BigDecimal!]
  activeLiquidityUSD_not_in: [Optimism_BigDecimal!]
  uncollectedProtocolSideTokenAmounts: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedProtocolSideValuesUSD: [Optimism_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not: [Optimism_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains: [Optimism_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains_nocase: [Optimism_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains: [Optimism_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains_nocase: [Optimism_BigDecimal!]
  uncollectedSupplySideTokenAmounts: [BigInt!]
  uncollectedSupplySideTokenAmounts_not: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedSupplySideValuesUSD: [Optimism_BigDecimal!]
  uncollectedSupplySideValuesUSD_not: [Optimism_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains: [Optimism_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains_nocase: [Optimism_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains: [Optimism_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains_nocase: [Optimism_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Optimism_BigDecimal!]
  dailySupplySideRevenueUSD: Optimism_BigDecimal
  dailySupplySideRevenueUSD_not: Optimism_BigDecimal
  dailySupplySideRevenueUSD_gt: Optimism_BigDecimal
  dailySupplySideRevenueUSD_lt: Optimism_BigDecimal
  dailySupplySideRevenueUSD_gte: Optimism_BigDecimal
  dailySupplySideRevenueUSD_lte: Optimism_BigDecimal
  dailySupplySideRevenueUSD_in: [Optimism_BigDecimal!]
  dailySupplySideRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Optimism_BigDecimal!]
  dailyProtocolSideRevenueUSD: Optimism_BigDecimal
  dailyProtocolSideRevenueUSD_not: Optimism_BigDecimal
  dailyProtocolSideRevenueUSD_gt: Optimism_BigDecimal
  dailyProtocolSideRevenueUSD_lt: Optimism_BigDecimal
  dailyProtocolSideRevenueUSD_gte: Optimism_BigDecimal
  dailyProtocolSideRevenueUSD_lte: Optimism_BigDecimal
  dailyProtocolSideRevenueUSD_in: [Optimism_BigDecimal!]
  dailyProtocolSideRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeTotalRevenueUSD: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_not: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_gt: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_lt: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_gte: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_lte: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Optimism_BigDecimal!]
  dailyTotalRevenueUSD: Optimism_BigDecimal
  dailyTotalRevenueUSD_not: Optimism_BigDecimal
  dailyTotalRevenueUSD_gt: Optimism_BigDecimal
  dailyTotalRevenueUSD_lt: Optimism_BigDecimal
  dailyTotalRevenueUSD_gte: Optimism_BigDecimal
  dailyTotalRevenueUSD_lte: Optimism_BigDecimal
  dailyTotalRevenueUSD_in: [Optimism_BigDecimal!]
  dailyTotalRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeVolumeUSD: Optimism_BigDecimal
  cumulativeVolumeUSD_not: Optimism_BigDecimal
  cumulativeVolumeUSD_gt: Optimism_BigDecimal
  cumulativeVolumeUSD_lt: Optimism_BigDecimal
  cumulativeVolumeUSD_gte: Optimism_BigDecimal
  cumulativeVolumeUSD_lte: Optimism_BigDecimal
  cumulativeVolumeUSD_in: [Optimism_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Optimism_BigDecimal!]
  dailyVolumeUSD: Optimism_BigDecimal
  dailyVolumeUSD_not: Optimism_BigDecimal
  dailyVolumeUSD_gt: Optimism_BigDecimal
  dailyVolumeUSD_lt: Optimism_BigDecimal
  dailyVolumeUSD_gte: Optimism_BigDecimal
  dailyVolumeUSD_lte: Optimism_BigDecimal
  dailyVolumeUSD_in: [Optimism_BigDecimal!]
  dailyVolumeUSD_not_in: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenAmount: [BigInt!]
  cumulativeVolumeByTokenAmount_not: [BigInt!]
  cumulativeVolumeByTokenAmount_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  dailyVolumeByTokenAmount: [BigInt!]
  dailyVolumeByTokenAmount_not: [BigInt!]
  dailyVolumeByTokenAmount_contains: [BigInt!]
  dailyVolumeByTokenAmount_contains_nocase: [BigInt!]
  dailyVolumeByTokenAmount_not_contains: [BigInt!]
  dailyVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenUSD: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenUSD_not: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains_nocase: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains_nocase: [Optimism_BigDecimal!]
  dailyVolumeByTokenUSD: [Optimism_BigDecimal!]
  dailyVolumeByTokenUSD_not: [Optimism_BigDecimal!]
  dailyVolumeByTokenUSD_contains: [Optimism_BigDecimal!]
  dailyVolumeByTokenUSD_contains_nocase: [Optimism_BigDecimal!]
  dailyVolumeByTokenUSD_not_contains: [Optimism_BigDecimal!]
  dailyVolumeByTokenUSD_not_contains_nocase: [Optimism_BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenBalancesUSD: [Optimism_BigDecimal!]
  inputTokenBalancesUSD_not: [Optimism_BigDecimal!]
  inputTokenBalancesUSD_contains: [Optimism_BigDecimal!]
  inputTokenBalancesUSD_contains_nocase: [Optimism_BigDecimal!]
  inputTokenBalancesUSD_not_contains: [Optimism_BigDecimal!]
  inputTokenBalancesUSD_not_contains_nocase: [Optimism_BigDecimal!]
  inputTokenWeights: [Optimism_BigDecimal!]
  inputTokenWeights_not: [Optimism_BigDecimal!]
  inputTokenWeights_contains: [Optimism_BigDecimal!]
  inputTokenWeights_contains_nocase: [Optimism_BigDecimal!]
  inputTokenWeights_not_contains: [Optimism_BigDecimal!]
  inputTokenWeights_not_contains_nocase: [Optimism_BigDecimal!]
  stakedOutputTokenAmount: BigInt
  stakedOutputTokenAmount_not: BigInt
  stakedOutputTokenAmount_gt: BigInt
  stakedOutputTokenAmount_lt: BigInt
  stakedOutputTokenAmount_gte: BigInt
  stakedOutputTokenAmount_lte: BigInt
  stakedOutputTokenAmount_in: [BigInt!]
  stakedOutputTokenAmount_not_in: [BigInt!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [Optimism_BigDecimal!]
  rewardTokenEmissionsUSD_not: [Optimism_BigDecimal!]
  rewardTokenEmissionsUSD_contains: [Optimism_BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [Optimism_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [Optimism_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [Optimism_BigDecimal!]
  cumulativeDepositCount: Int
  cumulativeDepositCount_not: Int
  cumulativeDepositCount_gt: Int
  cumulativeDepositCount_lt: Int
  cumulativeDepositCount_gte: Int
  cumulativeDepositCount_lte: Int
  cumulativeDepositCount_in: [Int!]
  cumulativeDepositCount_not_in: [Int!]
  dailyDepositCount: Int
  dailyDepositCount_not: Int
  dailyDepositCount_gt: Int
  dailyDepositCount_lt: Int
  dailyDepositCount_gte: Int
  dailyDepositCount_lte: Int
  dailyDepositCount_in: [Int!]
  dailyDepositCount_not_in: [Int!]
  cumulativeWithdrawCount: Int
  cumulativeWithdrawCount_not: Int
  cumulativeWithdrawCount_gt: Int
  cumulativeWithdrawCount_lt: Int
  cumulativeWithdrawCount_gte: Int
  cumulativeWithdrawCount_lte: Int
  cumulativeWithdrawCount_in: [Int!]
  cumulativeWithdrawCount_not_in: [Int!]
  dailyWithdrawCount: Int
  dailyWithdrawCount_not: Int
  dailyWithdrawCount_gt: Int
  dailyWithdrawCount_lt: Int
  dailyWithdrawCount_gte: Int
  dailyWithdrawCount_lte: Int
  dailyWithdrawCount_in: [Int!]
  dailyWithdrawCount_not_in: [Int!]
  cumulativeSwapCount: Int
  cumulativeSwapCount_not: Int
  cumulativeSwapCount_gt: Int
  cumulativeSwapCount_lt: Int
  cumulativeSwapCount_gte: Int
  cumulativeSwapCount_lte: Int
  cumulativeSwapCount_in: [Int!]
  cumulativeSwapCount_not_in: [Int!]
  dailySwapCount: Int
  dailySwapCount_not: Int
  dailySwapCount_gt: Int
  dailySwapCount_lt: Int
  dailySwapCount_gte: Int
  dailySwapCount_lte: Int
  dailySwapCount_in: [Int!]
  dailySwapCount_not_in: [Int!]
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_LiquidityPoolDailySnapshot_filter]
  or: [Optimism_LiquidityPoolDailySnapshot_filter]
}

enum Optimism_LiquidityPoolDailySnapshot_orderBy {
  id
  day
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  tick
  totalValueLockedUSD
  totalLiquidity
  totalLiquidityUSD
  activeLiquidity
  activeLiquidityUSD
  uncollectedProtocolSideTokenAmounts
  uncollectedProtocolSideValuesUSD
  uncollectedSupplySideTokenAmounts
  uncollectedSupplySideValuesUSD
  cumulativeSupplySideRevenueUSD
  dailySupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  dailyProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  dailyTotalRevenueUSD
  cumulativeVolumeUSD
  dailyVolumeUSD
  cumulativeVolumeByTokenAmount
  dailyVolumeByTokenAmount
  cumulativeVolumeByTokenUSD
  dailyVolumeByTokenUSD
  inputTokenBalances
  inputTokenBalancesUSD
  inputTokenWeights
  stakedOutputTokenAmount
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  cumulativeDepositCount
  dailyDepositCount
  cumulativeWithdrawCount
  dailyWithdrawCount
  cumulativeSwapCount
  dailySwapCount
  positionCount
  openPositionCount
  closedPositionCount
  timestamp
  blockNumber
}

type Optimism_LiquidityPoolFee {
  """ { Fee type }-{ Pool address } """
  id: Optimism_Bytes!
  """ Fee as a percentage of the trade (swap) amount. Does not always apply 
  """
  feePercentage: Optimism_BigDecimal
  """ Type of fee this pool uses """
  feeType: Optimism_LiquidityPoolFeeType!
}

enum Optimism_LiquidityPoolFeeType {
  """ Total fixed fee paid by the user per trade, as a percentage of the traded amount. e.g. 0.3% for Uniswap v2, 0.3% for Sushiswap, 0.04% for Curve v1. 
  """
  FIXED_TRADING_FEE
  """ Some protocols use tiered fees instead of fixed fee (e.g. DYDX, DODO). Set `feePercentage` as 0 but handle the tiered fees in the mapping code. 
  """
  TIERED_TRADING_FEE
  """ Some protocols use dynamic fees instead of fixed fee (e.g. Balancer v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. 
  """
  DYNAMIC_TRADING_FEE
  """ Fixed fee that's paid to the LP, as a percentage of the traded amount. e.g. 0.25% for Sushiswap, 0.02% for Curve v1. 
  """
  FIXED_LP_FEE
  """ Some protocols use dynamic LP fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. 
  """
  DYNAMIC_LP_FEE
  """ Fixed fee that's paid to the protocol, as a percentage of the traded amount. e.g. 0.05% for Sushiswap, 0.02% for Curve v1. 
  """
  FIXED_PROTOCOL_FEE
  """ Some protocols use dynamic protocol fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. 
  """
  DYNAMIC_PROTOCOL_FEE
  """ One-time fee charged by the protocol during deposit, in percentages of the deposit token 
  """
  DEPOSIT_FEE
  """ One-time fee charged by the protocol (e.g. Bancor v3) during withdrawal, in percentages of the withdrawal token 
  """
  WITHDRAWAL_FEE
}

input Optimism_LiquidityPoolFee_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  feePercentage: Optimism_BigDecimal
  feePercentage_not: Optimism_BigDecimal
  feePercentage_gt: Optimism_BigDecimal
  feePercentage_lt: Optimism_BigDecimal
  feePercentage_gte: Optimism_BigDecimal
  feePercentage_lte: Optimism_BigDecimal
  feePercentage_in: [Optimism_BigDecimal!]
  feePercentage_not_in: [Optimism_BigDecimal!]
  feeType: Optimism_LiquidityPoolFeeType
  feeType_not: Optimism_LiquidityPoolFeeType
  feeType_in: [Optimism_LiquidityPoolFeeType!]
  feeType_not_in: [Optimism_LiquidityPoolFeeType!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_LiquidityPoolFee_filter]
  or: [Optimism_LiquidityPoolFee_filter]
}

enum Optimism_LiquidityPoolFee_orderBy {
  id
  feePercentage
  feeType
}

type Optimism_LiquidityPoolHourlySnapshot {
  """ { Smart contract address of the pool }-{ # of hours since Unix epoch time } 
  """
  id: Optimism_Bytes!
  """ Number of hours since Unix epoch time """
  hour: Int!
  """ The protocol this snapshot belongs to """
  protocol: Optimism_DexAmmProtocol!
  """ The pool this snapshot belongs to """
  pool: Optimism_LiquidityPool!
  """ Current tick representing the price of token0/token1 """
  tick: BigInt
  """ Current TVL (Total Value Locked) of this pool """
  totalValueLockedUSD: Optimism_BigDecimal!
  """ The sum of all active and non-active liquidity for this pool. """
  totalLiquidity: BigInt!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Optimism_BigDecimal!
  """ All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidity: BigInt!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Optimism_BigDecimal!
  """ All protocol-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  """ All protocol-side value locking in USD that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideValuesUSD: [Optimism_BigDecimal!]!
  """ All supply-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  """ All supply-side value locked in USD that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideValuesUSD: [Optimism_BigDecimal!]!
  """ All revenue generated by the liquidity pool, accrued to the supply side. 
  """
  cumulativeSupplySideRevenueUSD: Optimism_BigDecimal!
  """ Hourly revenue generated by the liquidity pool, accrued to the supply side. 
  """
  hourlySupplySideRevenueUSD: Optimism_BigDecimal!
  """ All revenue generated by the liquidity pool, accrued to the protocol. 
  """
  cumulativeProtocolSideRevenueUSD: Optimism_BigDecimal!
  """ Hourly revenue generated by the liquidity pool, accrued to the protocol. 
  """
  hourlyProtocolSideRevenueUSD: Optimism_BigDecimal!
  """ All revenue generated by the liquidity pool. """
  cumulativeTotalRevenueUSD: Optimism_BigDecimal!
  """ Hourly revenue generated by the liquidity pool. """
  hourlyTotalRevenueUSD: Optimism_BigDecimal!
  """ All historical trade volume occurred in this pool, in USD """
  cumulativeVolumeUSD: Optimism_BigDecimal!
  """ All trade volume occurred in a given hour, in USD """
  hourlyVolumeUSD: Optimism_BigDecimal!
  """ All trade volume, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenAmount: [BigInt!]!
  """ All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  hourlyVolumeByTokenAmount: [BigInt!]!
  """ All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenUSD: [Optimism_BigDecimal!]!
  """ All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  hourlyVolumeByTokenUSD: [Optimism_BigDecimal!]!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalancesUSD: [Optimism_BigDecimal!]!
  """ Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool 
  """
  inputTokenWeights: [Optimism_BigDecimal!]!
  """ Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. 
  """
  stakedOutputTokenAmount: BigInt
  """ Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [Optimism_BigDecimal!]
  """ Total number of deposits (add liquidity) """
  cumulativeDepositCount: Int!
  """ Total number of deposits (add liquidity) in an hour """
  hourlyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) """
  cumulativeWithdrawCount: Int!
  """ Total number of withdrawals (remove liquidity) in an hour """
  hourlyWithdrawCount: Int!
  """ Total number of trades (swaps) """
  cumulativeSwapCount: Int!
  """ Total number of trades (swaps) in an hour """
  hourlySwapCount: Int!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Optimism_LiquidityPoolHourlySnapshot_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  hour: Int
  hour_not: Int
  hour_gt: Int
  hour_lt: Int
  hour_gte: Int
  hour_lte: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Optimism_DexAmmProtocol_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Optimism_LiquidityPool_filter
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  totalValueLockedUSD: Optimism_BigDecimal
  totalValueLockedUSD_not: Optimism_BigDecimal
  totalValueLockedUSD_gt: Optimism_BigDecimal
  totalValueLockedUSD_lt: Optimism_BigDecimal
  totalValueLockedUSD_gte: Optimism_BigDecimal
  totalValueLockedUSD_lte: Optimism_BigDecimal
  totalValueLockedUSD_in: [Optimism_BigDecimal!]
  totalValueLockedUSD_not_in: [Optimism_BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalLiquidityUSD: Optimism_BigDecimal
  totalLiquidityUSD_not: Optimism_BigDecimal
  totalLiquidityUSD_gt: Optimism_BigDecimal
  totalLiquidityUSD_lt: Optimism_BigDecimal
  totalLiquidityUSD_gte: Optimism_BigDecimal
  totalLiquidityUSD_lte: Optimism_BigDecimal
  totalLiquidityUSD_in: [Optimism_BigDecimal!]
  totalLiquidityUSD_not_in: [Optimism_BigDecimal!]
  activeLiquidity: BigInt
  activeLiquidity_not: BigInt
  activeLiquidity_gt: BigInt
  activeLiquidity_lt: BigInt
  activeLiquidity_gte: BigInt
  activeLiquidity_lte: BigInt
  activeLiquidity_in: [BigInt!]
  activeLiquidity_not_in: [BigInt!]
  activeLiquidityUSD: Optimism_BigDecimal
  activeLiquidityUSD_not: Optimism_BigDecimal
  activeLiquidityUSD_gt: Optimism_BigDecimal
  activeLiquidityUSD_lt: Optimism_BigDecimal
  activeLiquidityUSD_gte: Optimism_BigDecimal
  activeLiquidityUSD_lte: Optimism_BigDecimal
  activeLiquidityUSD_in: [Optimism_BigDecimal!]
  activeLiquidityUSD_not_in: [Optimism_BigDecimal!]
  uncollectedProtocolSideTokenAmounts: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedProtocolSideValuesUSD: [Optimism_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not: [Optimism_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains: [Optimism_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains_nocase: [Optimism_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains: [Optimism_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains_nocase: [Optimism_BigDecimal!]
  uncollectedSupplySideTokenAmounts: [BigInt!]
  uncollectedSupplySideTokenAmounts_not: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedSupplySideValuesUSD: [Optimism_BigDecimal!]
  uncollectedSupplySideValuesUSD_not: [Optimism_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains: [Optimism_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains_nocase: [Optimism_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains: [Optimism_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains_nocase: [Optimism_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Optimism_BigDecimal!]
  hourlySupplySideRevenueUSD: Optimism_BigDecimal
  hourlySupplySideRevenueUSD_not: Optimism_BigDecimal
  hourlySupplySideRevenueUSD_gt: Optimism_BigDecimal
  hourlySupplySideRevenueUSD_lt: Optimism_BigDecimal
  hourlySupplySideRevenueUSD_gte: Optimism_BigDecimal
  hourlySupplySideRevenueUSD_lte: Optimism_BigDecimal
  hourlySupplySideRevenueUSD_in: [Optimism_BigDecimal!]
  hourlySupplySideRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Optimism_BigDecimal!]
  hourlyProtocolSideRevenueUSD: Optimism_BigDecimal
  hourlyProtocolSideRevenueUSD_not: Optimism_BigDecimal
  hourlyProtocolSideRevenueUSD_gt: Optimism_BigDecimal
  hourlyProtocolSideRevenueUSD_lt: Optimism_BigDecimal
  hourlyProtocolSideRevenueUSD_gte: Optimism_BigDecimal
  hourlyProtocolSideRevenueUSD_lte: Optimism_BigDecimal
  hourlyProtocolSideRevenueUSD_in: [Optimism_BigDecimal!]
  hourlyProtocolSideRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeTotalRevenueUSD: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_not: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_gt: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_lt: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_gte: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_lte: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Optimism_BigDecimal!]
  hourlyTotalRevenueUSD: Optimism_BigDecimal
  hourlyTotalRevenueUSD_not: Optimism_BigDecimal
  hourlyTotalRevenueUSD_gt: Optimism_BigDecimal
  hourlyTotalRevenueUSD_lt: Optimism_BigDecimal
  hourlyTotalRevenueUSD_gte: Optimism_BigDecimal
  hourlyTotalRevenueUSD_lte: Optimism_BigDecimal
  hourlyTotalRevenueUSD_in: [Optimism_BigDecimal!]
  hourlyTotalRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeVolumeUSD: Optimism_BigDecimal
  cumulativeVolumeUSD_not: Optimism_BigDecimal
  cumulativeVolumeUSD_gt: Optimism_BigDecimal
  cumulativeVolumeUSD_lt: Optimism_BigDecimal
  cumulativeVolumeUSD_gte: Optimism_BigDecimal
  cumulativeVolumeUSD_lte: Optimism_BigDecimal
  cumulativeVolumeUSD_in: [Optimism_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Optimism_BigDecimal!]
  hourlyVolumeUSD: Optimism_BigDecimal
  hourlyVolumeUSD_not: Optimism_BigDecimal
  hourlyVolumeUSD_gt: Optimism_BigDecimal
  hourlyVolumeUSD_lt: Optimism_BigDecimal
  hourlyVolumeUSD_gte: Optimism_BigDecimal
  hourlyVolumeUSD_lte: Optimism_BigDecimal
  hourlyVolumeUSD_in: [Optimism_BigDecimal!]
  hourlyVolumeUSD_not_in: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenAmount: [BigInt!]
  cumulativeVolumeByTokenAmount_not: [BigInt!]
  cumulativeVolumeByTokenAmount_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  hourlyVolumeByTokenAmount: [BigInt!]
  hourlyVolumeByTokenAmount_not: [BigInt!]
  hourlyVolumeByTokenAmount_contains: [BigInt!]
  hourlyVolumeByTokenAmount_contains_nocase: [BigInt!]
  hourlyVolumeByTokenAmount_not_contains: [BigInt!]
  hourlyVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenUSD: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenUSD_not: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains_nocase: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains_nocase: [Optimism_BigDecimal!]
  hourlyVolumeByTokenUSD: [Optimism_BigDecimal!]
  hourlyVolumeByTokenUSD_not: [Optimism_BigDecimal!]
  hourlyVolumeByTokenUSD_contains: [Optimism_BigDecimal!]
  hourlyVolumeByTokenUSD_contains_nocase: [Optimism_BigDecimal!]
  hourlyVolumeByTokenUSD_not_contains: [Optimism_BigDecimal!]
  hourlyVolumeByTokenUSD_not_contains_nocase: [Optimism_BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenBalancesUSD: [Optimism_BigDecimal!]
  inputTokenBalancesUSD_not: [Optimism_BigDecimal!]
  inputTokenBalancesUSD_contains: [Optimism_BigDecimal!]
  inputTokenBalancesUSD_contains_nocase: [Optimism_BigDecimal!]
  inputTokenBalancesUSD_not_contains: [Optimism_BigDecimal!]
  inputTokenBalancesUSD_not_contains_nocase: [Optimism_BigDecimal!]
  inputTokenWeights: [Optimism_BigDecimal!]
  inputTokenWeights_not: [Optimism_BigDecimal!]
  inputTokenWeights_contains: [Optimism_BigDecimal!]
  inputTokenWeights_contains_nocase: [Optimism_BigDecimal!]
  inputTokenWeights_not_contains: [Optimism_BigDecimal!]
  inputTokenWeights_not_contains_nocase: [Optimism_BigDecimal!]
  stakedOutputTokenAmount: BigInt
  stakedOutputTokenAmount_not: BigInt
  stakedOutputTokenAmount_gt: BigInt
  stakedOutputTokenAmount_lt: BigInt
  stakedOutputTokenAmount_gte: BigInt
  stakedOutputTokenAmount_lte: BigInt
  stakedOutputTokenAmount_in: [BigInt!]
  stakedOutputTokenAmount_not_in: [BigInt!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [Optimism_BigDecimal!]
  rewardTokenEmissionsUSD_not: [Optimism_BigDecimal!]
  rewardTokenEmissionsUSD_contains: [Optimism_BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [Optimism_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [Optimism_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [Optimism_BigDecimal!]
  cumulativeDepositCount: Int
  cumulativeDepositCount_not: Int
  cumulativeDepositCount_gt: Int
  cumulativeDepositCount_lt: Int
  cumulativeDepositCount_gte: Int
  cumulativeDepositCount_lte: Int
  cumulativeDepositCount_in: [Int!]
  cumulativeDepositCount_not_in: [Int!]
  hourlyDepositCount: Int
  hourlyDepositCount_not: Int
  hourlyDepositCount_gt: Int
  hourlyDepositCount_lt: Int
  hourlyDepositCount_gte: Int
  hourlyDepositCount_lte: Int
  hourlyDepositCount_in: [Int!]
  hourlyDepositCount_not_in: [Int!]
  cumulativeWithdrawCount: Int
  cumulativeWithdrawCount_not: Int
  cumulativeWithdrawCount_gt: Int
  cumulativeWithdrawCount_lt: Int
  cumulativeWithdrawCount_gte: Int
  cumulativeWithdrawCount_lte: Int
  cumulativeWithdrawCount_in: [Int!]
  cumulativeWithdrawCount_not_in: [Int!]
  hourlyWithdrawCount: Int
  hourlyWithdrawCount_not: Int
  hourlyWithdrawCount_gt: Int
  hourlyWithdrawCount_lt: Int
  hourlyWithdrawCount_gte: Int
  hourlyWithdrawCount_lte: Int
  hourlyWithdrawCount_in: [Int!]
  hourlyWithdrawCount_not_in: [Int!]
  cumulativeSwapCount: Int
  cumulativeSwapCount_not: Int
  cumulativeSwapCount_gt: Int
  cumulativeSwapCount_lt: Int
  cumulativeSwapCount_gte: Int
  cumulativeSwapCount_lte: Int
  cumulativeSwapCount_in: [Int!]
  cumulativeSwapCount_not_in: [Int!]
  hourlySwapCount: Int
  hourlySwapCount_not: Int
  hourlySwapCount_gt: Int
  hourlySwapCount_lt: Int
  hourlySwapCount_gte: Int
  hourlySwapCount_lte: Int
  hourlySwapCount_in: [Int!]
  hourlySwapCount_not_in: [Int!]
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_LiquidityPoolHourlySnapshot_filter]
  or: [Optimism_LiquidityPoolHourlySnapshot_filter]
}

enum Optimism_LiquidityPoolHourlySnapshot_orderBy {
  id
  hour
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  tick
  totalValueLockedUSD
  totalLiquidity
  totalLiquidityUSD
  activeLiquidity
  activeLiquidityUSD
  uncollectedProtocolSideTokenAmounts
  uncollectedProtocolSideValuesUSD
  uncollectedSupplySideTokenAmounts
  uncollectedSupplySideValuesUSD
  cumulativeSupplySideRevenueUSD
  hourlySupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  hourlyProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  hourlyTotalRevenueUSD
  cumulativeVolumeUSD
  hourlyVolumeUSD
  cumulativeVolumeByTokenAmount
  hourlyVolumeByTokenAmount
  cumulativeVolumeByTokenUSD
  hourlyVolumeByTokenUSD
  inputTokenBalances
  inputTokenBalancesUSD
  inputTokenWeights
  stakedOutputTokenAmount
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  cumulativeDepositCount
  hourlyDepositCount
  cumulativeWithdrawCount
  hourlyWithdrawCount
  cumulativeSwapCount
  hourlySwapCount
  positionCount
  openPositionCount
  closedPositionCount
  timestamp
  blockNumber
}

input Optimism_LiquidityPool_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Optimism_DexAmmProtocol_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  liquidityToken: String
  liquidityToken_not: String
  liquidityToken_gt: String
  liquidityToken_lt: String
  liquidityToken_gte: String
  liquidityToken_lte: String
  liquidityToken_in: [String!]
  liquidityToken_not_in: [String!]
  liquidityToken_contains: String
  liquidityToken_contains_nocase: String
  liquidityToken_not_contains: String
  liquidityToken_not_contains_nocase: String
  liquidityToken_starts_with: String
  liquidityToken_starts_with_nocase: String
  liquidityToken_not_starts_with: String
  liquidityToken_not_starts_with_nocase: String
  liquidityToken_ends_with: String
  liquidityToken_ends_with_nocase: String
  liquidityToken_not_ends_with: String
  liquidityToken_not_ends_with_nocase: String
  liquidityToken_: Optimism_Token_filter
  liquidityTokenType: Optimism_TokenType
  liquidityTokenType_not: Optimism_TokenType
  liquidityTokenType_in: [Optimism_TokenType!]
  liquidityTokenType_not_in: [Optimism_TokenType!]
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Optimism_Token_filter
  rewardTokens: [String!]
  rewardTokens_not: [String!]
  rewardTokens_contains: [String!]
  rewardTokens_contains_nocase: [String!]
  rewardTokens_not_contains: [String!]
  rewardTokens_not_contains_nocase: [String!]
  rewardTokens_: Optimism_RewardToken_filter
  fees: [String!]
  fees_not: [String!]
  fees_contains: [String!]
  fees_contains_nocase: [String!]
  fees_not_contains: [String!]
  fees_not_contains_nocase: [String!]
  fees_: Optimism_LiquidityPoolFee_filter
  isSingleSided: Boolean
  isSingleSided_not: Boolean
  isSingleSided_in: [Boolean!]
  isSingleSided_not_in: [Boolean!]
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  totalValueLockedUSD: Optimism_BigDecimal
  totalValueLockedUSD_not: Optimism_BigDecimal
  totalValueLockedUSD_gt: Optimism_BigDecimal
  totalValueLockedUSD_lt: Optimism_BigDecimal
  totalValueLockedUSD_gte: Optimism_BigDecimal
  totalValueLockedUSD_lte: Optimism_BigDecimal
  totalValueLockedUSD_in: [Optimism_BigDecimal!]
  totalValueLockedUSD_not_in: [Optimism_BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalLiquidityUSD: Optimism_BigDecimal
  totalLiquidityUSD_not: Optimism_BigDecimal
  totalLiquidityUSD_gt: Optimism_BigDecimal
  totalLiquidityUSD_lt: Optimism_BigDecimal
  totalLiquidityUSD_gte: Optimism_BigDecimal
  totalLiquidityUSD_lte: Optimism_BigDecimal
  totalLiquidityUSD_in: [Optimism_BigDecimal!]
  totalLiquidityUSD_not_in: [Optimism_BigDecimal!]
  activeLiquidity: BigInt
  activeLiquidity_not: BigInt
  activeLiquidity_gt: BigInt
  activeLiquidity_lt: BigInt
  activeLiquidity_gte: BigInt
  activeLiquidity_lte: BigInt
  activeLiquidity_in: [BigInt!]
  activeLiquidity_not_in: [BigInt!]
  activeLiquidityUSD: Optimism_BigDecimal
  activeLiquidityUSD_not: Optimism_BigDecimal
  activeLiquidityUSD_gt: Optimism_BigDecimal
  activeLiquidityUSD_lt: Optimism_BigDecimal
  activeLiquidityUSD_gte: Optimism_BigDecimal
  activeLiquidityUSD_lte: Optimism_BigDecimal
  activeLiquidityUSD_in: [Optimism_BigDecimal!]
  activeLiquidityUSD_not_in: [Optimism_BigDecimal!]
  uncollectedProtocolSideTokenAmounts: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedProtocolSideValuesUSD: [Optimism_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not: [Optimism_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains: [Optimism_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains_nocase: [Optimism_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains: [Optimism_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains_nocase: [Optimism_BigDecimal!]
  uncollectedSupplySideTokenAmounts: [BigInt!]
  uncollectedSupplySideTokenAmounts_not: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedSupplySideValuesUSD: [Optimism_BigDecimal!]
  uncollectedSupplySideValuesUSD_not: [Optimism_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains: [Optimism_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains_nocase: [Optimism_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains: [Optimism_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains_nocase: [Optimism_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeTotalRevenueUSD: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_not: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_gt: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_lt: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_gte: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_lte: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenAmount: [BigInt!]
  cumulativeVolumeByTokenAmount_not: [BigInt!]
  cumulativeVolumeByTokenAmount_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenUSD: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenUSD_not: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains_nocase: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains: [Optimism_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains_nocase: [Optimism_BigDecimal!]
  cumulativeVolumeUSD: Optimism_BigDecimal
  cumulativeVolumeUSD_not: Optimism_BigDecimal
  cumulativeVolumeUSD_gt: Optimism_BigDecimal
  cumulativeVolumeUSD_lt: Optimism_BigDecimal
  cumulativeVolumeUSD_gte: Optimism_BigDecimal
  cumulativeVolumeUSD_lte: Optimism_BigDecimal
  cumulativeVolumeUSD_in: [Optimism_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Optimism_BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenBalancesUSD: [Optimism_BigDecimal!]
  inputTokenBalancesUSD_not: [Optimism_BigDecimal!]
  inputTokenBalancesUSD_contains: [Optimism_BigDecimal!]
  inputTokenBalancesUSD_contains_nocase: [Optimism_BigDecimal!]
  inputTokenBalancesUSD_not_contains: [Optimism_BigDecimal!]
  inputTokenBalancesUSD_not_contains_nocase: [Optimism_BigDecimal!]
  inputTokenWeights: [Optimism_BigDecimal!]
  inputTokenWeights_not: [Optimism_BigDecimal!]
  inputTokenWeights_contains: [Optimism_BigDecimal!]
  inputTokenWeights_contains_nocase: [Optimism_BigDecimal!]
  inputTokenWeights_not_contains: [Optimism_BigDecimal!]
  inputTokenWeights_not_contains_nocase: [Optimism_BigDecimal!]
  stakedOutputTokenAmount: BigInt
  stakedOutputTokenAmount_not: BigInt
  stakedOutputTokenAmount_gt: BigInt
  stakedOutputTokenAmount_lt: BigInt
  stakedOutputTokenAmount_gte: BigInt
  stakedOutputTokenAmount_lte: BigInt
  stakedOutputTokenAmount_in: [BigInt!]
  stakedOutputTokenAmount_not_in: [BigInt!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [Optimism_BigDecimal!]
  rewardTokenEmissionsUSD_not: [Optimism_BigDecimal!]
  rewardTokenEmissionsUSD_contains: [Optimism_BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [Optimism_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [Optimism_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [Optimism_BigDecimal!]
  cumulativeDepositCount: Int
  cumulativeDepositCount_not: Int
  cumulativeDepositCount_gt: Int
  cumulativeDepositCount_lt: Int
  cumulativeDepositCount_gte: Int
  cumulativeDepositCount_lte: Int
  cumulativeDepositCount_in: [Int!]
  cumulativeDepositCount_not_in: [Int!]
  cumulativeWithdrawCount: Int
  cumulativeWithdrawCount_not: Int
  cumulativeWithdrawCount_gt: Int
  cumulativeWithdrawCount_lt: Int
  cumulativeWithdrawCount_gte: Int
  cumulativeWithdrawCount_lte: Int
  cumulativeWithdrawCount_in: [Int!]
  cumulativeWithdrawCount_not_in: [Int!]
  cumulativeSwapCount: Int
  cumulativeSwapCount_not: Int
  cumulativeSwapCount_gt: Int
  cumulativeSwapCount_lt: Int
  cumulativeSwapCount_gte: Int
  cumulativeSwapCount_lte: Int
  cumulativeSwapCount_in: [Int!]
  cumulativeSwapCount_not_in: [Int!]
  positions_: Optimism_Position_filter
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  lastSnapshotDayID: Int
  lastSnapshotDayID_not: Int
  lastSnapshotDayID_gt: Int
  lastSnapshotDayID_lt: Int
  lastSnapshotDayID_gte: Int
  lastSnapshotDayID_lte: Int
  lastSnapshotDayID_in: [Int!]
  lastSnapshotDayID_not_in: [Int!]
  lastSnapshotHourID: Int
  lastSnapshotHourID_not: Int
  lastSnapshotHourID_gt: Int
  lastSnapshotHourID_lt: Int
  lastSnapshotHourID_gte: Int
  lastSnapshotHourID_lte: Int
  lastSnapshotHourID_in: [Int!]
  lastSnapshotHourID_not_in: [Int!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  dailySnapshots_: Optimism_LiquidityPoolDailySnapshot_filter
  hourlySnapshots_: Optimism_LiquidityPoolHourlySnapshot_filter
  deposits_: Optimism_Deposit_filter
  withdraws_: Optimism_Withdraw_filter
  swaps_: Optimism_Swap_filter
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_LiquidityPool_filter]
  or: [Optimism_LiquidityPool_filter]
}

enum Optimism_LiquidityPool_orderBy {
  id
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  name
  symbol
  liquidityToken
  liquidityToken__id
  liquidityToken__name
  liquidityToken__symbol
  liquidityToken__decimals
  liquidityToken__lastPriceUSD
  liquidityToken__lastPriceBlockNumber
  liquidityToken___lastPricePool
  liquidityToken___totalSupply
  liquidityToken___totalValueLockedUSD
  liquidityToken___largePriceChangeBuffer
  liquidityToken___largeTVLImpactBuffer
  liquidityTokenType
  inputTokens
  rewardTokens
  fees
  isSingleSided
  createdTimestamp
  createdBlockNumber
  tick
  totalValueLockedUSD
  totalLiquidity
  totalLiquidityUSD
  activeLiquidity
  activeLiquidityUSD
  uncollectedProtocolSideTokenAmounts
  uncollectedProtocolSideValuesUSD
  uncollectedSupplySideTokenAmounts
  uncollectedSupplySideValuesUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  cumulativeVolumeByTokenAmount
  cumulativeVolumeByTokenUSD
  cumulativeVolumeUSD
  inputTokenBalances
  inputTokenBalancesUSD
  inputTokenWeights
  stakedOutputTokenAmount
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  cumulativeDepositCount
  cumulativeWithdrawCount
  cumulativeSwapCount
  positions
  positionCount
  openPositionCount
  closedPositionCount
  lastSnapshotDayID
  lastSnapshotHourID
  lastUpdateTimestamp
  lastUpdateBlockNumber
  dailySnapshots
  hourlySnapshots
  deposits
  withdraws
  swaps
}

enum Optimism_Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BASE
  BOBA
  BSC
  CELO
  COSMOS
  CRONOS
  MAINNET
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC
  XDAI
}

"""Defines the order direction, either ascending or descending"""
enum Optimism_OrderDirection {
  asc
  desc
}

type Optimism_Position {
  """ { Account address }-{ Market address }-{ Count } """
  id: Optimism_Bytes!
  """ Account that owns this position """
  account: Optimism_Account!
  """ The liquidity pool in which this position was opened """
  pool: Optimism_LiquidityPool!
  """ The hash of the transaction that opened this position """
  hashOpened: Optimism_Bytes!
  """ The hash of the transaction that closed this position """
  hashClosed: Optimism_Bytes
  """ Block number of when the position was opened """
  blockNumberOpened: BigInt!
  """ Timestamp when the position was opened """
  timestampOpened: BigInt!
  """ Block number of when the position was closed (0 if still open) """
  blockNumberClosed: BigInt
  """ Timestamp when the position was closed (0 if still open) """
  timestampClosed: BigInt
  """ lower tick of the position """
  tickLower: Optimism_Tick
  """ upper tick of the position """
  tickUpper: Optimism_Tick
  """ Token that is to represent ownership of liquidity """
  liquidityToken: Optimism_Token
  """ Type of token used to track liquidity """
  liquidityTokenType: Optimism_TokenType
  """ total position liquidity """
  liquidity: BigInt!
  """ total position liquidity in USD """
  liquidityUSD: Optimism_BigDecimal!
  """ amount of tokens ever deposited to position """
  cumulativeDepositTokenAmounts: [BigInt!]!
  """ amount of tokens in USD deposited to position """
  cumulativeDepositUSD: Optimism_BigDecimal!
  """ amount of tokens ever withdrawn from position (without fees) """
  cumulativeWithdrawTokenAmounts: [BigInt!]!
  """ amount of tokens in USD withdrawn from position (without fees) """
  cumulativeWithdrawUSD: Optimism_BigDecimal!
  """ Total reward token accumulated under this position, in USD """
  cumulativeRewardUSD: [BigInt!]
  """ Number of deposits related to this position """
  depositCount: Int!
  """ All deposit events of this position """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Optimism_Deposit_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_Deposit_filter): [Optimism_Deposit!]!
  """ Number of withdrawals related to this position """
  withdrawCount: Int!
  """ All withdraw events of this position """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Optimism_Withdraw_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_Withdraw_filter): [Optimism_Withdraw!]!
  """ Position daily snapshots for open positions """
  snapshots(skip: Int = 0, first: Int = 100, orderBy: Optimism_PositionSnapshot_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_PositionSnapshot_filter): [Optimism_PositionSnapshot!]!
}

type Optimism_PositionSnapshot {
  """ { Position ID }-{ Transaction hash }-{ Log index } """
  id: Optimism_Bytes!
  """ Transaction hash of the transaction that triggered this snapshot """
  hash: Optimism_Bytes!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Nonce of the transaction that triggered this snapshot """
  nonce: BigInt!
  """ Position of this snapshot """
  position: Optimism_Position!
  """ Type of token used to track liquidity """
  liquidityTokenType: Optimism_TokenType
  """ total position liquidity """
  liquidity: BigInt
  """ total position liquidity in USD """
  liquidityUSD: Optimism_BigDecimal
  """ amount of tokens ever deposited to position """
  cumulativeDepositTokenAmounts: [BigInt!]!
  """ amount of tokens in USD deposited to position """
  cumulativeDepositUSD: Optimism_BigDecimal!
  """ amount of tokens ever withdrawn from position (without fees) """
  cumulativeWithdrawTokenAmounts: [BigInt!]!
  """ amount of tokens in USD withdrawn from position (without fees) """
  cumulativeWithdrawUSD: Optimism_BigDecimal!
  """ Total reward token accumulated under this position, in native amounts 
  """
  cumulativeRewardTokenAmounts: [BigInt!]
  """ Total reward token accumulated under this position, in USD """
  cumulativeRewardUSD: [BigInt!]
  """ Number of deposits related to this position """
  depositCount: Int!
  """ Number of withdrawals related to this position """
  withdrawCount: Int!
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
}

input Optimism_PositionSnapshot_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  hash: Optimism_Bytes
  hash_not: Optimism_Bytes
  hash_gt: Optimism_Bytes
  hash_lt: Optimism_Bytes
  hash_gte: Optimism_Bytes
  hash_lte: Optimism_Bytes
  hash_in: [Optimism_Bytes!]
  hash_not_in: [Optimism_Bytes!]
  hash_contains: Optimism_Bytes
  hash_not_contains: Optimism_Bytes
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Optimism_Position_filter
  liquidityTokenType: Optimism_TokenType
  liquidityTokenType_not: Optimism_TokenType
  liquidityTokenType_in: [Optimism_TokenType!]
  liquidityTokenType_not_in: [Optimism_TokenType!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  liquidityUSD: Optimism_BigDecimal
  liquidityUSD_not: Optimism_BigDecimal
  liquidityUSD_gt: Optimism_BigDecimal
  liquidityUSD_lt: Optimism_BigDecimal
  liquidityUSD_gte: Optimism_BigDecimal
  liquidityUSD_lte: Optimism_BigDecimal
  liquidityUSD_in: [Optimism_BigDecimal!]
  liquidityUSD_not_in: [Optimism_BigDecimal!]
  cumulativeDepositTokenAmounts: [BigInt!]
  cumulativeDepositTokenAmounts_not: [BigInt!]
  cumulativeDepositTokenAmounts_contains: [BigInt!]
  cumulativeDepositTokenAmounts_contains_nocase: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeDepositUSD: Optimism_BigDecimal
  cumulativeDepositUSD_not: Optimism_BigDecimal
  cumulativeDepositUSD_gt: Optimism_BigDecimal
  cumulativeDepositUSD_lt: Optimism_BigDecimal
  cumulativeDepositUSD_gte: Optimism_BigDecimal
  cumulativeDepositUSD_lte: Optimism_BigDecimal
  cumulativeDepositUSD_in: [Optimism_BigDecimal!]
  cumulativeDepositUSD_not_in: [Optimism_BigDecimal!]
  cumulativeWithdrawTokenAmounts: [BigInt!]
  cumulativeWithdrawTokenAmounts_not: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains_nocase: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeWithdrawUSD: Optimism_BigDecimal
  cumulativeWithdrawUSD_not: Optimism_BigDecimal
  cumulativeWithdrawUSD_gt: Optimism_BigDecimal
  cumulativeWithdrawUSD_lt: Optimism_BigDecimal
  cumulativeWithdrawUSD_gte: Optimism_BigDecimal
  cumulativeWithdrawUSD_lte: Optimism_BigDecimal
  cumulativeWithdrawUSD_in: [Optimism_BigDecimal!]
  cumulativeWithdrawUSD_not_in: [Optimism_BigDecimal!]
  cumulativeRewardTokenAmounts: [BigInt!]
  cumulativeRewardTokenAmounts_not: [BigInt!]
  cumulativeRewardTokenAmounts_contains: [BigInt!]
  cumulativeRewardTokenAmounts_contains_nocase: [BigInt!]
  cumulativeRewardTokenAmounts_not_contains: [BigInt!]
  cumulativeRewardTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeRewardUSD: [BigInt!]
  cumulativeRewardUSD_not: [BigInt!]
  cumulativeRewardUSD_contains: [BigInt!]
  cumulativeRewardUSD_contains_nocase: [BigInt!]
  cumulativeRewardUSD_not_contains: [BigInt!]
  cumulativeRewardUSD_not_contains_nocase: [BigInt!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_PositionSnapshot_filter]
  or: [Optimism_PositionSnapshot_filter]
}

enum Optimism_PositionSnapshot_orderBy {
  id
  hash
  logIndex
  nonce
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__liquidityTokenType
  position__liquidity
  position__liquidityUSD
  position__cumulativeDepositUSD
  position__cumulativeWithdrawUSD
  position__depositCount
  position__withdrawCount
  liquidityTokenType
  liquidity
  liquidityUSD
  cumulativeDepositTokenAmounts
  cumulativeDepositUSD
  cumulativeWithdrawTokenAmounts
  cumulativeWithdrawUSD
  cumulativeRewardTokenAmounts
  cumulativeRewardUSD
  depositCount
  withdrawCount
  blockNumber
  timestamp
}

input Optimism_Position_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Optimism_Account_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Optimism_LiquidityPool_filter
  hashOpened: Optimism_Bytes
  hashOpened_not: Optimism_Bytes
  hashOpened_gt: Optimism_Bytes
  hashOpened_lt: Optimism_Bytes
  hashOpened_gte: Optimism_Bytes
  hashOpened_lte: Optimism_Bytes
  hashOpened_in: [Optimism_Bytes!]
  hashOpened_not_in: [Optimism_Bytes!]
  hashOpened_contains: Optimism_Bytes
  hashOpened_not_contains: Optimism_Bytes
  hashClosed: Optimism_Bytes
  hashClosed_not: Optimism_Bytes
  hashClosed_gt: Optimism_Bytes
  hashClosed_lt: Optimism_Bytes
  hashClosed_gte: Optimism_Bytes
  hashClosed_lte: Optimism_Bytes
  hashClosed_in: [Optimism_Bytes!]
  hashClosed_not_in: [Optimism_Bytes!]
  hashClosed_contains: Optimism_Bytes
  hashClosed_not_contains: Optimism_Bytes
  blockNumberOpened: BigInt
  blockNumberOpened_not: BigInt
  blockNumberOpened_gt: BigInt
  blockNumberOpened_lt: BigInt
  blockNumberOpened_gte: BigInt
  blockNumberOpened_lte: BigInt
  blockNumberOpened_in: [BigInt!]
  blockNumberOpened_not_in: [BigInt!]
  timestampOpened: BigInt
  timestampOpened_not: BigInt
  timestampOpened_gt: BigInt
  timestampOpened_lt: BigInt
  timestampOpened_gte: BigInt
  timestampOpened_lte: BigInt
  timestampOpened_in: [BigInt!]
  timestampOpened_not_in: [BigInt!]
  blockNumberClosed: BigInt
  blockNumberClosed_not: BigInt
  blockNumberClosed_gt: BigInt
  blockNumberClosed_lt: BigInt
  blockNumberClosed_gte: BigInt
  blockNumberClosed_lte: BigInt
  blockNumberClosed_in: [BigInt!]
  blockNumberClosed_not_in: [BigInt!]
  timestampClosed: BigInt
  timestampClosed_not: BigInt
  timestampClosed_gt: BigInt
  timestampClosed_lt: BigInt
  timestampClosed_gte: BigInt
  timestampClosed_lte: BigInt
  timestampClosed_in: [BigInt!]
  timestampClosed_not_in: [BigInt!]
  tickLower: String
  tickLower_not: String
  tickLower_gt: String
  tickLower_lt: String
  tickLower_gte: String
  tickLower_lte: String
  tickLower_in: [String!]
  tickLower_not_in: [String!]
  tickLower_contains: String
  tickLower_contains_nocase: String
  tickLower_not_contains: String
  tickLower_not_contains_nocase: String
  tickLower_starts_with: String
  tickLower_starts_with_nocase: String
  tickLower_not_starts_with: String
  tickLower_not_starts_with_nocase: String
  tickLower_ends_with: String
  tickLower_ends_with_nocase: String
  tickLower_not_ends_with: String
  tickLower_not_ends_with_nocase: String
  tickLower_: Optimism_Tick_filter
  tickUpper: String
  tickUpper_not: String
  tickUpper_gt: String
  tickUpper_lt: String
  tickUpper_gte: String
  tickUpper_lte: String
  tickUpper_in: [String!]
  tickUpper_not_in: [String!]
  tickUpper_contains: String
  tickUpper_contains_nocase: String
  tickUpper_not_contains: String
  tickUpper_not_contains_nocase: String
  tickUpper_starts_with: String
  tickUpper_starts_with_nocase: String
  tickUpper_not_starts_with: String
  tickUpper_not_starts_with_nocase: String
  tickUpper_ends_with: String
  tickUpper_ends_with_nocase: String
  tickUpper_not_ends_with: String
  tickUpper_not_ends_with_nocase: String
  tickUpper_: Optimism_Tick_filter
  liquidityToken: String
  liquidityToken_not: String
  liquidityToken_gt: String
  liquidityToken_lt: String
  liquidityToken_gte: String
  liquidityToken_lte: String
  liquidityToken_in: [String!]
  liquidityToken_not_in: [String!]
  liquidityToken_contains: String
  liquidityToken_contains_nocase: String
  liquidityToken_not_contains: String
  liquidityToken_not_contains_nocase: String
  liquidityToken_starts_with: String
  liquidityToken_starts_with_nocase: String
  liquidityToken_not_starts_with: String
  liquidityToken_not_starts_with_nocase: String
  liquidityToken_ends_with: String
  liquidityToken_ends_with_nocase: String
  liquidityToken_not_ends_with: String
  liquidityToken_not_ends_with_nocase: String
  liquidityToken_: Optimism_Token_filter
  liquidityTokenType: Optimism_TokenType
  liquidityTokenType_not: Optimism_TokenType
  liquidityTokenType_in: [Optimism_TokenType!]
  liquidityTokenType_not_in: [Optimism_TokenType!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  liquidityUSD: Optimism_BigDecimal
  liquidityUSD_not: Optimism_BigDecimal
  liquidityUSD_gt: Optimism_BigDecimal
  liquidityUSD_lt: Optimism_BigDecimal
  liquidityUSD_gte: Optimism_BigDecimal
  liquidityUSD_lte: Optimism_BigDecimal
  liquidityUSD_in: [Optimism_BigDecimal!]
  liquidityUSD_not_in: [Optimism_BigDecimal!]
  cumulativeDepositTokenAmounts: [BigInt!]
  cumulativeDepositTokenAmounts_not: [BigInt!]
  cumulativeDepositTokenAmounts_contains: [BigInt!]
  cumulativeDepositTokenAmounts_contains_nocase: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeDepositUSD: Optimism_BigDecimal
  cumulativeDepositUSD_not: Optimism_BigDecimal
  cumulativeDepositUSD_gt: Optimism_BigDecimal
  cumulativeDepositUSD_lt: Optimism_BigDecimal
  cumulativeDepositUSD_gte: Optimism_BigDecimal
  cumulativeDepositUSD_lte: Optimism_BigDecimal
  cumulativeDepositUSD_in: [Optimism_BigDecimal!]
  cumulativeDepositUSD_not_in: [Optimism_BigDecimal!]
  cumulativeWithdrawTokenAmounts: [BigInt!]
  cumulativeWithdrawTokenAmounts_not: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains_nocase: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeWithdrawUSD: Optimism_BigDecimal
  cumulativeWithdrawUSD_not: Optimism_BigDecimal
  cumulativeWithdrawUSD_gt: Optimism_BigDecimal
  cumulativeWithdrawUSD_lt: Optimism_BigDecimal
  cumulativeWithdrawUSD_gte: Optimism_BigDecimal
  cumulativeWithdrawUSD_lte: Optimism_BigDecimal
  cumulativeWithdrawUSD_in: [Optimism_BigDecimal!]
  cumulativeWithdrawUSD_not_in: [Optimism_BigDecimal!]
  cumulativeRewardUSD: [BigInt!]
  cumulativeRewardUSD_not: [BigInt!]
  cumulativeRewardUSD_contains: [BigInt!]
  cumulativeRewardUSD_contains_nocase: [BigInt!]
  cumulativeRewardUSD_not_contains: [BigInt!]
  cumulativeRewardUSD_not_contains_nocase: [BigInt!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  deposits_: Optimism_Deposit_filter
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  withdraws_: Optimism_Withdraw_filter
  snapshots_: Optimism_PositionSnapshot_filter
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_Position_filter]
  or: [Optimism_Position_filter]
}

enum Optimism_Position_orderBy {
  id
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  hashOpened
  hashClosed
  blockNumberOpened
  timestampOpened
  blockNumberClosed
  timestampClosed
  tickLower
  tickLower__id
  tickLower__index
  tickLower__createdTimestamp
  tickLower__createdBlockNumber
  tickLower__liquidityGross
  tickLower__liquidityGrossUSD
  tickLower__liquidityNet
  tickLower__liquidityNetUSD
  tickLower__lastSnapshotDayID
  tickLower__lastSnapshotHourID
  tickLower__lastUpdateTimestamp
  tickLower__lastUpdateBlockNumber
  tickUpper
  tickUpper__id
  tickUpper__index
  tickUpper__createdTimestamp
  tickUpper__createdBlockNumber
  tickUpper__liquidityGross
  tickUpper__liquidityGrossUSD
  tickUpper__liquidityNet
  tickUpper__liquidityNetUSD
  tickUpper__lastSnapshotDayID
  tickUpper__lastSnapshotHourID
  tickUpper__lastUpdateTimestamp
  tickUpper__lastUpdateBlockNumber
  liquidityToken
  liquidityToken__id
  liquidityToken__name
  liquidityToken__symbol
  liquidityToken__decimals
  liquidityToken__lastPriceUSD
  liquidityToken__lastPriceBlockNumber
  liquidityToken___lastPricePool
  liquidityToken___totalSupply
  liquidityToken___totalValueLockedUSD
  liquidityToken___largePriceChangeBuffer
  liquidityToken___largeTVLImpactBuffer
  liquidityTokenType
  liquidity
  liquidityUSD
  cumulativeDepositTokenAmounts
  cumulativeDepositUSD
  cumulativeWithdrawTokenAmounts
  cumulativeWithdrawUSD
  cumulativeRewardUSD
  depositCount
  deposits
  withdrawCount
  withdraws
  snapshots
}

interface Optimism_Protocol {
  """ Smart contract address of the protocol's main contract (Factory, Registry, etc) 
  """
  id: Optimism_Bytes!
  """ Name of the protocol, including version. e.g. Uniswap v3 """
  name: String!
  """ Slug of protocol, including version. e.g. uniswap-v3 """
  slug: String!
  """ Version of the subgraph schema, in SemVer format (e.g. 1.0.0) """
  schemaVersion: String!
  """ Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) 
  """
  subgraphVersion: String!
  """ Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) 
  """
  methodologyVersion: String!
  """ The blockchain network this subgraph is indexing on """
  network: Optimism_Network!
  """ The type of protocol (e.g. DEX, Lending, Yield, etc) """
  type: Optimism_ProtocolType!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: Optimism_BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: Optimism_BigDecimal
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: Optimism_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: Optimism_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: Optimism_BigDecimal!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Daily usage metrics for this protocol """
  dailyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Optimism_UsageMetricsDailySnapshot_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_UsageMetricsDailySnapshot_filter): [Optimism_UsageMetricsDailySnapshot!]!
  """ Hourly usage metrics for this protocol """
  hourlyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Optimism_UsageMetricsHourlySnapshot_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_UsageMetricsHourlySnapshot_filter): [Optimism_UsageMetricsHourlySnapshot!]!
  """ Daily financial metrics for this protocol """
  financialMetrics(skip: Int = 0, first: Int = 100, orderBy: Optimism_FinancialsDailySnapshot_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_FinancialsDailySnapshot_filter): [Optimism_FinancialsDailySnapshot!]!
}

enum Optimism_ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
}

input Optimism_Protocol_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  schemaVersion: String
  schemaVersion_not: String
  schemaVersion_gt: String
  schemaVersion_lt: String
  schemaVersion_gte: String
  schemaVersion_lte: String
  schemaVersion_in: [String!]
  schemaVersion_not_in: [String!]
  schemaVersion_contains: String
  schemaVersion_contains_nocase: String
  schemaVersion_not_contains: String
  schemaVersion_not_contains_nocase: String
  schemaVersion_starts_with: String
  schemaVersion_starts_with_nocase: String
  schemaVersion_not_starts_with: String
  schemaVersion_not_starts_with_nocase: String
  schemaVersion_ends_with: String
  schemaVersion_ends_with_nocase: String
  schemaVersion_not_ends_with: String
  schemaVersion_not_ends_with_nocase: String
  subgraphVersion: String
  subgraphVersion_not: String
  subgraphVersion_gt: String
  subgraphVersion_lt: String
  subgraphVersion_gte: String
  subgraphVersion_lte: String
  subgraphVersion_in: [String!]
  subgraphVersion_not_in: [String!]
  subgraphVersion_contains: String
  subgraphVersion_contains_nocase: String
  subgraphVersion_not_contains: String
  subgraphVersion_not_contains_nocase: String
  subgraphVersion_starts_with: String
  subgraphVersion_starts_with_nocase: String
  subgraphVersion_not_starts_with: String
  subgraphVersion_not_starts_with_nocase: String
  subgraphVersion_ends_with: String
  subgraphVersion_ends_with_nocase: String
  subgraphVersion_not_ends_with: String
  subgraphVersion_not_ends_with_nocase: String
  methodologyVersion: String
  methodologyVersion_not: String
  methodologyVersion_gt: String
  methodologyVersion_lt: String
  methodologyVersion_gte: String
  methodologyVersion_lte: String
  methodologyVersion_in: [String!]
  methodologyVersion_not_in: [String!]
  methodologyVersion_contains: String
  methodologyVersion_contains_nocase: String
  methodologyVersion_not_contains: String
  methodologyVersion_not_contains_nocase: String
  methodologyVersion_starts_with: String
  methodologyVersion_starts_with_nocase: String
  methodologyVersion_not_starts_with: String
  methodologyVersion_not_starts_with_nocase: String
  methodologyVersion_ends_with: String
  methodologyVersion_ends_with_nocase: String
  methodologyVersion_not_ends_with: String
  methodologyVersion_not_ends_with_nocase: String
  network: Optimism_Network
  network_not: Optimism_Network
  network_in: [Optimism_Network!]
  network_not_in: [Optimism_Network!]
  type: Optimism_ProtocolType
  type_not: Optimism_ProtocolType
  type_in: [Optimism_ProtocolType!]
  type_not_in: [Optimism_ProtocolType!]
  totalValueLockedUSD: Optimism_BigDecimal
  totalValueLockedUSD_not: Optimism_BigDecimal
  totalValueLockedUSD_gt: Optimism_BigDecimal
  totalValueLockedUSD_lt: Optimism_BigDecimal
  totalValueLockedUSD_gte: Optimism_BigDecimal
  totalValueLockedUSD_lte: Optimism_BigDecimal
  totalValueLockedUSD_in: [Optimism_BigDecimal!]
  totalValueLockedUSD_not_in: [Optimism_BigDecimal!]
  protocolControlledValueUSD: Optimism_BigDecimal
  protocolControlledValueUSD_not: Optimism_BigDecimal
  protocolControlledValueUSD_gt: Optimism_BigDecimal
  protocolControlledValueUSD_lt: Optimism_BigDecimal
  protocolControlledValueUSD_gte: Optimism_BigDecimal
  protocolControlledValueUSD_lte: Optimism_BigDecimal
  protocolControlledValueUSD_in: [Optimism_BigDecimal!]
  protocolControlledValueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Optimism_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Optimism_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeTotalRevenueUSD: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_not: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_gt: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_lt: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_gte: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_lte: Optimism_BigDecimal
  cumulativeTotalRevenueUSD_in: [Optimism_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Optimism_BigDecimal!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  dailyUsageMetrics_: Optimism_UsageMetricsDailySnapshot_filter
  hourlyUsageMetrics_: Optimism_UsageMetricsHourlySnapshot_filter
  financialMetrics_: Optimism_FinancialsDailySnapshot_filter
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_Protocol_filter]
  or: [Optimism_Protocol_filter]
}

enum Optimism_Protocol_orderBy {
  id
  name
  slug
  schemaVersion
  subgraphVersion
  methodologyVersion
  network
  type
  totalValueLockedUSD
  protocolControlledValueUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  cumulativeUniqueUsers
  totalPoolCount
  dailyUsageMetrics
  hourlyUsageMetrics
  financialMetrics
}

type Optimism_RewardToken {
  """ { Reward token type }-{ Smart contract address of the reward token } """
  id: Optimism_Bytes!
  """ Reference to the actual token """
  token: Optimism_Token!
  """ The type of the reward token """
  type: Optimism_RewardTokenType!
}

enum Optimism_RewardTokenType {
  """ For reward tokens awarded to LPs/lenders """
  DEPOSIT
  """ For reward tokens awarded to borrowers """
  BORROW
}

input Optimism_RewardToken_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Optimism_Token_filter
  type: Optimism_RewardTokenType
  type_not: Optimism_RewardTokenType
  type_in: [Optimism_RewardTokenType!]
  type_not_in: [Optimism_RewardTokenType!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_RewardToken_filter]
  or: [Optimism_RewardToken_filter]
}

enum Optimism_RewardToken_orderBy {
  id
  token
  token__id
  token__name
  token__symbol
  token__decimals
  token__lastPriceUSD
  token__lastPriceBlockNumber
  token___lastPricePool
  token___totalSupply
  token___totalValueLockedUSD
  token___largePriceChangeBuffer
  token___largeTVLImpactBuffer
  type
}

type Optimism_Swap {
  """ { Transaction hash }-{ Log index } """
  id: Optimism_Bytes!
  """ Transaction hash of the transaction that emitted this event """
  hash: Optimism_Bytes!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Gas limit of the transaction that emitted this event """
  gasLimit: BigInt
  """ Gas used in this transaction. (Optional because not every chain will support this) 
  """
  gasUsed: BigInt
  """ Gas price of the transaction that emitted this event """
  gasPrice: BigInt
  """ The protocol this transaction belongs to """
  protocol: Optimism_DexAmmProtocol!
  """ Account that emitted this event """
  account: Optimism_Account!
  """ The pool involving this event """
  pool: Optimism_LiquidityPool!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ the tick after the swap """
  tick: BigInt
  """ Token deposited into pool """
  tokenIn: Optimism_Token!
  """ Amount of token deposited into pool in native units """
  amountIn: BigInt!
  """ Amount of token deposited into pool in USD """
  amountInUSD: Optimism_BigDecimal!
  """ Token withdrawn from pool """
  tokenOut: Optimism_Token!
  """ Amount of token withdrawn from pool in native units """
  amountOut: BigInt!
  """ Amount of token withdrawn from pool in USD """
  amountOutUSD: Optimism_BigDecimal!
  """ Amount of input tokens in the liquidity pool """
  reserveAmounts: [BigInt!]
}

input Optimism_Swap_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  hash: Optimism_Bytes
  hash_not: Optimism_Bytes
  hash_gt: Optimism_Bytes
  hash_lt: Optimism_Bytes
  hash_gte: Optimism_Bytes
  hash_lte: Optimism_Bytes
  hash_in: [Optimism_Bytes!]
  hash_not_in: [Optimism_Bytes!]
  hash_contains: Optimism_Bytes
  hash_not_contains: Optimism_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Optimism_DexAmmProtocol_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Optimism_Account_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Optimism_LiquidityPool_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  tokenIn: String
  tokenIn_not: String
  tokenIn_gt: String
  tokenIn_lt: String
  tokenIn_gte: String
  tokenIn_lte: String
  tokenIn_in: [String!]
  tokenIn_not_in: [String!]
  tokenIn_contains: String
  tokenIn_contains_nocase: String
  tokenIn_not_contains: String
  tokenIn_not_contains_nocase: String
  tokenIn_starts_with: String
  tokenIn_starts_with_nocase: String
  tokenIn_not_starts_with: String
  tokenIn_not_starts_with_nocase: String
  tokenIn_ends_with: String
  tokenIn_ends_with_nocase: String
  tokenIn_not_ends_with: String
  tokenIn_not_ends_with_nocase: String
  tokenIn_: Optimism_Token_filter
  amountIn: BigInt
  amountIn_not: BigInt
  amountIn_gt: BigInt
  amountIn_lt: BigInt
  amountIn_gte: BigInt
  amountIn_lte: BigInt
  amountIn_in: [BigInt!]
  amountIn_not_in: [BigInt!]
  amountInUSD: Optimism_BigDecimal
  amountInUSD_not: Optimism_BigDecimal
  amountInUSD_gt: Optimism_BigDecimal
  amountInUSD_lt: Optimism_BigDecimal
  amountInUSD_gte: Optimism_BigDecimal
  amountInUSD_lte: Optimism_BigDecimal
  amountInUSD_in: [Optimism_BigDecimal!]
  amountInUSD_not_in: [Optimism_BigDecimal!]
  tokenOut: String
  tokenOut_not: String
  tokenOut_gt: String
  tokenOut_lt: String
  tokenOut_gte: String
  tokenOut_lte: String
  tokenOut_in: [String!]
  tokenOut_not_in: [String!]
  tokenOut_contains: String
  tokenOut_contains_nocase: String
  tokenOut_not_contains: String
  tokenOut_not_contains_nocase: String
  tokenOut_starts_with: String
  tokenOut_starts_with_nocase: String
  tokenOut_not_starts_with: String
  tokenOut_not_starts_with_nocase: String
  tokenOut_ends_with: String
  tokenOut_ends_with_nocase: String
  tokenOut_not_ends_with: String
  tokenOut_not_ends_with_nocase: String
  tokenOut_: Optimism_Token_filter
  amountOut: BigInt
  amountOut_not: BigInt
  amountOut_gt: BigInt
  amountOut_lt: BigInt
  amountOut_gte: BigInt
  amountOut_lte: BigInt
  amountOut_in: [BigInt!]
  amountOut_not_in: [BigInt!]
  amountOutUSD: Optimism_BigDecimal
  amountOutUSD_not: Optimism_BigDecimal
  amountOutUSD_gt: Optimism_BigDecimal
  amountOutUSD_lt: Optimism_BigDecimal
  amountOutUSD_gte: Optimism_BigDecimal
  amountOutUSD_lte: Optimism_BigDecimal
  amountOutUSD_in: [Optimism_BigDecimal!]
  amountOutUSD_not_in: [Optimism_BigDecimal!]
  reserveAmounts: [BigInt!]
  reserveAmounts_not: [BigInt!]
  reserveAmounts_contains: [BigInt!]
  reserveAmounts_contains_nocase: [BigInt!]
  reserveAmounts_not_contains: [BigInt!]
  reserveAmounts_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_Swap_filter]
  or: [Optimism_Swap_filter]
}

enum Optimism_Swap_orderBy {
  id
  hash
  nonce
  logIndex
  gasLimit
  gasUsed
  gasPrice
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  blockNumber
  timestamp
  tick
  tokenIn
  tokenIn__id
  tokenIn__name
  tokenIn__symbol
  tokenIn__decimals
  tokenIn__lastPriceUSD
  tokenIn__lastPriceBlockNumber
  tokenIn___lastPricePool
  tokenIn___totalSupply
  tokenIn___totalValueLockedUSD
  tokenIn___largePriceChangeBuffer
  tokenIn___largeTVLImpactBuffer
  amountIn
  amountInUSD
  tokenOut
  tokenOut__id
  tokenOut__name
  tokenOut__symbol
  tokenOut__decimals
  tokenOut__lastPriceUSD
  tokenOut__lastPriceBlockNumber
  tokenOut___lastPricePool
  tokenOut___totalSupply
  tokenOut___totalValueLockedUSD
  tokenOut___largePriceChangeBuffer
  tokenOut___largeTVLImpactBuffer
  amountOut
  amountOutUSD
  reserveAmounts
}

type Optimism_Tick {
  """ { pool address }-{ tick index } """
  id: Optimism_Bytes!
  """ tick index """
  index: BigInt!
  """ Liquidity pool this tick belongs to """
  pool: Optimism_LiquidityPool!
  """ Creation timestamp """
  createdTimestamp: BigInt!
  """ Creation block number """
  createdBlockNumber: BigInt!
  """ calculated price of token0 of tick within this pool - constant """
  prices: [Optimism_BigDecimal!]!
  """ total liquidity pool has as tick lower or upper """
  liquidityGross: BigInt!
  """ total liquidity in USD pool has as tick lower or upper """
  liquidityGrossUSD: Optimism_BigDecimal!
  """ how much liquidity changes when tick crossed """
  liquidityNet: BigInt!
  """ how much liquidity in USD changes when tick crossed """
  liquidityNetUSD: Optimism_BigDecimal!
  """ Day ID of the most recent daily snapshot """
  lastSnapshotDayID: Int!
  """ Hour ID of the most recent hourly snapshot """
  lastSnapshotHourID: Int!
  """ Timestamp of the last time this entity was updated """
  lastUpdateTimestamp: BigInt!
  """ Block number of the last time this entity was updated """
  lastUpdateBlockNumber: BigInt!
}

type Optimism_TickDailySnapshot {
  """ { pool address }-{ tick index }-{ day ID } """
  id: Optimism_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ tick index """
  tick: Optimism_Tick!
  """ liquidity pool this tick belongs to """
  pool: Optimism_LiquidityPool!
  """ total liquidity pool has as tick lower or upper """
  liquidityGross: BigInt!
  """ total liquidity in USD pool has as tick lower or upper """
  liquidityGrossUSD: Optimism_BigDecimal!
  """ how much liquidity changes when tick crossed """
  liquidityNet: BigInt!
  """ how much liquidity in USD changes when tick crossed """
  liquidityNetUSD: Optimism_BigDecimal!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Optimism_TickDailySnapshot_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Optimism_Tick_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Optimism_LiquidityPool_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityGrossUSD: Optimism_BigDecimal
  liquidityGrossUSD_not: Optimism_BigDecimal
  liquidityGrossUSD_gt: Optimism_BigDecimal
  liquidityGrossUSD_lt: Optimism_BigDecimal
  liquidityGrossUSD_gte: Optimism_BigDecimal
  liquidityGrossUSD_lte: Optimism_BigDecimal
  liquidityGrossUSD_in: [Optimism_BigDecimal!]
  liquidityGrossUSD_not_in: [Optimism_BigDecimal!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  liquidityNetUSD: Optimism_BigDecimal
  liquidityNetUSD_not: Optimism_BigDecimal
  liquidityNetUSD_gt: Optimism_BigDecimal
  liquidityNetUSD_lt: Optimism_BigDecimal
  liquidityNetUSD_gte: Optimism_BigDecimal
  liquidityNetUSD_lte: Optimism_BigDecimal
  liquidityNetUSD_in: [Optimism_BigDecimal!]
  liquidityNetUSD_not_in: [Optimism_BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_TickDailySnapshot_filter]
  or: [Optimism_TickDailySnapshot_filter]
}

enum Optimism_TickDailySnapshot_orderBy {
  id
  day
  tick
  tick__id
  tick__index
  tick__createdTimestamp
  tick__createdBlockNumber
  tick__liquidityGross
  tick__liquidityGrossUSD
  tick__liquidityNet
  tick__liquidityNetUSD
  tick__lastSnapshotDayID
  tick__lastSnapshotHourID
  tick__lastUpdateTimestamp
  tick__lastUpdateBlockNumber
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  liquidityGross
  liquidityGrossUSD
  liquidityNet
  liquidityNetUSD
  timestamp
  blockNumber
}

type Optimism_TickHourlySnapshot {
  """ { pool address }-{ tick index }-{ hour ID } """
  id: Optimism_Bytes!
  """ Number of hours since Unix epoch time """
  hour: Int!
  """ tick index """
  tick: Optimism_Tick!
  """ liquidity pool this tick belongs to """
  pool: Optimism_LiquidityPool!
  """ total liquidity pool has as tick lower or upper """
  liquidityGross: BigInt!
  """ total liquidity in USD pool has as tick lower or upper """
  liquidityGrossUSD: Optimism_BigDecimal!
  """ how much liquidity changes when tick crossed """
  liquidityNet: BigInt!
  """ how much liquidity in USD changes when tick crossed """
  liquidityNetUSD: Optimism_BigDecimal!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Optimism_TickHourlySnapshot_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  hour: Int
  hour_not: Int
  hour_gt: Int
  hour_lt: Int
  hour_gte: Int
  hour_lte: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Optimism_Tick_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Optimism_LiquidityPool_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityGrossUSD: Optimism_BigDecimal
  liquidityGrossUSD_not: Optimism_BigDecimal
  liquidityGrossUSD_gt: Optimism_BigDecimal
  liquidityGrossUSD_lt: Optimism_BigDecimal
  liquidityGrossUSD_gte: Optimism_BigDecimal
  liquidityGrossUSD_lte: Optimism_BigDecimal
  liquidityGrossUSD_in: [Optimism_BigDecimal!]
  liquidityGrossUSD_not_in: [Optimism_BigDecimal!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  liquidityNetUSD: Optimism_BigDecimal
  liquidityNetUSD_not: Optimism_BigDecimal
  liquidityNetUSD_gt: Optimism_BigDecimal
  liquidityNetUSD_lt: Optimism_BigDecimal
  liquidityNetUSD_gte: Optimism_BigDecimal
  liquidityNetUSD_lte: Optimism_BigDecimal
  liquidityNetUSD_in: [Optimism_BigDecimal!]
  liquidityNetUSD_not_in: [Optimism_BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_TickHourlySnapshot_filter]
  or: [Optimism_TickHourlySnapshot_filter]
}

enum Optimism_TickHourlySnapshot_orderBy {
  id
  hour
  tick
  tick__id
  tick__index
  tick__createdTimestamp
  tick__createdBlockNumber
  tick__liquidityGross
  tick__liquidityGrossUSD
  tick__liquidityNet
  tick__liquidityNetUSD
  tick__lastSnapshotDayID
  tick__lastSnapshotHourID
  tick__lastUpdateTimestamp
  tick__lastUpdateBlockNumber
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  liquidityGross
  liquidityGrossUSD
  liquidityNet
  liquidityNetUSD
  timestamp
  blockNumber
}

input Optimism_Tick_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Optimism_LiquidityPool_filter
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  prices: [Optimism_BigDecimal!]
  prices_not: [Optimism_BigDecimal!]
  prices_contains: [Optimism_BigDecimal!]
  prices_contains_nocase: [Optimism_BigDecimal!]
  prices_not_contains: [Optimism_BigDecimal!]
  prices_not_contains_nocase: [Optimism_BigDecimal!]
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityGrossUSD: Optimism_BigDecimal
  liquidityGrossUSD_not: Optimism_BigDecimal
  liquidityGrossUSD_gt: Optimism_BigDecimal
  liquidityGrossUSD_lt: Optimism_BigDecimal
  liquidityGrossUSD_gte: Optimism_BigDecimal
  liquidityGrossUSD_lte: Optimism_BigDecimal
  liquidityGrossUSD_in: [Optimism_BigDecimal!]
  liquidityGrossUSD_not_in: [Optimism_BigDecimal!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  liquidityNetUSD: Optimism_BigDecimal
  liquidityNetUSD_not: Optimism_BigDecimal
  liquidityNetUSD_gt: Optimism_BigDecimal
  liquidityNetUSD_lt: Optimism_BigDecimal
  liquidityNetUSD_gte: Optimism_BigDecimal
  liquidityNetUSD_lte: Optimism_BigDecimal
  liquidityNetUSD_in: [Optimism_BigDecimal!]
  liquidityNetUSD_not_in: [Optimism_BigDecimal!]
  lastSnapshotDayID: Int
  lastSnapshotDayID_not: Int
  lastSnapshotDayID_gt: Int
  lastSnapshotDayID_lt: Int
  lastSnapshotDayID_gte: Int
  lastSnapshotDayID_lte: Int
  lastSnapshotDayID_in: [Int!]
  lastSnapshotDayID_not_in: [Int!]
  lastSnapshotHourID: Int
  lastSnapshotHourID_not: Int
  lastSnapshotHourID_gt: Int
  lastSnapshotHourID_lt: Int
  lastSnapshotHourID_gte: Int
  lastSnapshotHourID_lte: Int
  lastSnapshotHourID_in: [Int!]
  lastSnapshotHourID_not_in: [Int!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_Tick_filter]
  or: [Optimism_Tick_filter]
}

enum Optimism_Tick_orderBy {
  id
  index
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  createdTimestamp
  createdBlockNumber
  prices
  liquidityGross
  liquidityGrossUSD
  liquidityNet
  liquidityNetUSD
  lastSnapshotDayID
  lastSnapshotHourID
  lastUpdateTimestamp
  lastUpdateBlockNumber
}

type Optimism_Token {
  """ Smart contract address of the token """
  id: Optimism_Bytes!
  """ Name of the token, mirrored from the smart contract """
  name: String!
  """ Symbol of the token, mirrored from the smart contract """
  symbol: String!
  """ The number of decimal places this token uses, default to 18 """
  decimals: Int!
  """ Optional field to track the price of a token, mostly for caching purposes 
  """
  lastPriceUSD: Optimism_BigDecimal
  """ Optional field to track the block number of the last token price """
  lastPriceBlockNumber: BigInt
  """ last pool that gave this token a price """
  _lastPricePool: Optimism_Bytes
  """ amount of tokens in the protocol """
  _totalSupply: BigInt!
  """ Total value locked in the protocol """
  _totalValueLockedUSD: Optimism_BigDecimal!
  _largePriceChangeBuffer: Int!
  _largeTVLImpactBuffer: Int!
}

enum Optimism_TokenType {
  MULTIPLE
  UNKNOWN
  ERC20
  ERC721
  ERC1155
  BEP20
  BEP721
  BEP1155
}

input Optimism_Token_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  lastPriceUSD: Optimism_BigDecimal
  lastPriceUSD_not: Optimism_BigDecimal
  lastPriceUSD_gt: Optimism_BigDecimal
  lastPriceUSD_lt: Optimism_BigDecimal
  lastPriceUSD_gte: Optimism_BigDecimal
  lastPriceUSD_lte: Optimism_BigDecimal
  lastPriceUSD_in: [Optimism_BigDecimal!]
  lastPriceUSD_not_in: [Optimism_BigDecimal!]
  lastPriceBlockNumber: BigInt
  lastPriceBlockNumber_not: BigInt
  lastPriceBlockNumber_gt: BigInt
  lastPriceBlockNumber_lt: BigInt
  lastPriceBlockNumber_gte: BigInt
  lastPriceBlockNumber_lte: BigInt
  lastPriceBlockNumber_in: [BigInt!]
  lastPriceBlockNumber_not_in: [BigInt!]
  _lastPricePool: Optimism_Bytes
  _lastPricePool_not: Optimism_Bytes
  _lastPricePool_gt: Optimism_Bytes
  _lastPricePool_lt: Optimism_Bytes
  _lastPricePool_gte: Optimism_Bytes
  _lastPricePool_lte: Optimism_Bytes
  _lastPricePool_in: [Optimism_Bytes!]
  _lastPricePool_not_in: [Optimism_Bytes!]
  _lastPricePool_contains: Optimism_Bytes
  _lastPricePool_not_contains: Optimism_Bytes
  _totalSupply: BigInt
  _totalSupply_not: BigInt
  _totalSupply_gt: BigInt
  _totalSupply_lt: BigInt
  _totalSupply_gte: BigInt
  _totalSupply_lte: BigInt
  _totalSupply_in: [BigInt!]
  _totalSupply_not_in: [BigInt!]
  _totalValueLockedUSD: Optimism_BigDecimal
  _totalValueLockedUSD_not: Optimism_BigDecimal
  _totalValueLockedUSD_gt: Optimism_BigDecimal
  _totalValueLockedUSD_lt: Optimism_BigDecimal
  _totalValueLockedUSD_gte: Optimism_BigDecimal
  _totalValueLockedUSD_lte: Optimism_BigDecimal
  _totalValueLockedUSD_in: [Optimism_BigDecimal!]
  _totalValueLockedUSD_not_in: [Optimism_BigDecimal!]
  _largePriceChangeBuffer: Int
  _largePriceChangeBuffer_not: Int
  _largePriceChangeBuffer_gt: Int
  _largePriceChangeBuffer_lt: Int
  _largePriceChangeBuffer_gte: Int
  _largePriceChangeBuffer_lte: Int
  _largePriceChangeBuffer_in: [Int!]
  _largePriceChangeBuffer_not_in: [Int!]
  _largeTVLImpactBuffer: Int
  _largeTVLImpactBuffer_not: Int
  _largeTVLImpactBuffer_gt: Int
  _largeTVLImpactBuffer_lt: Int
  _largeTVLImpactBuffer_gte: Int
  _largeTVLImpactBuffer_lte: Int
  _largeTVLImpactBuffer_in: [Int!]
  _largeTVLImpactBuffer_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_Token_filter]
  or: [Optimism_Token_filter]
}

enum Optimism_Token_orderBy {
  id
  name
  symbol
  decimals
  lastPriceUSD
  lastPriceBlockNumber
  _lastPricePool
  _totalSupply
  _totalValueLockedUSD
  _largePriceChangeBuffer
  _largeTVLImpactBuffer
}

type Optimism_UsageMetricsDailySnapshot {
  """ ID is # of days since Unix epoch time """
  id: Optimism_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ Protocol this snapshot is associated with """
  protocol: Optimism_DexAmmProtocol!
  """ Number of unique daily active users """
  dailyActiveUsers: Int!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. 
  """
  dailyTransactionCount: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Total number of deposits (add liquidity) in an day """
  dailyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) in an day """
  dailyWithdrawCount: Int!
  """ Total number of trades (swaps) in an day """
  dailySwapCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Optimism_UsageMetricsDailySnapshot_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Optimism_DexAmmProtocol_filter
  dailyActiveUsers: Int
  dailyActiveUsers_not: Int
  dailyActiveUsers_gt: Int
  dailyActiveUsers_lt: Int
  dailyActiveUsers_gte: Int
  dailyActiveUsers_lte: Int
  dailyActiveUsers_in: [Int!]
  dailyActiveUsers_not_in: [Int!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  dailyTransactionCount: Int
  dailyTransactionCount_not: Int
  dailyTransactionCount_gt: Int
  dailyTransactionCount_lt: Int
  dailyTransactionCount_gte: Int
  dailyTransactionCount_lte: Int
  dailyTransactionCount_in: [Int!]
  dailyTransactionCount_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  dailyDepositCount: Int
  dailyDepositCount_not: Int
  dailyDepositCount_gt: Int
  dailyDepositCount_lt: Int
  dailyDepositCount_gte: Int
  dailyDepositCount_lte: Int
  dailyDepositCount_in: [Int!]
  dailyDepositCount_not_in: [Int!]
  dailyWithdrawCount: Int
  dailyWithdrawCount_not: Int
  dailyWithdrawCount_gt: Int
  dailyWithdrawCount_lt: Int
  dailyWithdrawCount_gte: Int
  dailyWithdrawCount_lte: Int
  dailyWithdrawCount_in: [Int!]
  dailyWithdrawCount_not_in: [Int!]
  dailySwapCount: Int
  dailySwapCount_not: Int
  dailySwapCount_gt: Int
  dailySwapCount_lt: Int
  dailySwapCount_gte: Int
  dailySwapCount_lte: Int
  dailySwapCount_in: [Int!]
  dailySwapCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_UsageMetricsDailySnapshot_filter]
  or: [Optimism_UsageMetricsDailySnapshot_filter]
}

enum Optimism_UsageMetricsDailySnapshot_orderBy {
  id
  day
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  dailyActiveUsers
  cumulativeUniqueUsers
  dailyTransactionCount
  totalPoolCount
  dailyDepositCount
  dailyWithdrawCount
  dailySwapCount
  timestamp
  blockNumber
}

type Optimism_UsageMetricsHourlySnapshot {
  """ { # of hours since Unix epoch time } """
  id: Optimism_Bytes!
  """ Number of hours since Unix epoch time """
  hour: Int!
  """ Protocol this snapshot is associated with """
  protocol: Optimism_DexAmmProtocol!
  """ Number of unique hourly active users """
  hourlyActiveUsers: Int!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. 
  """
  hourlyTransactionCount: Int!
  """ Total number of deposits (add liquidity) in an hour """
  hourlyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) in an hour """
  hourlyWithdrawCount: Int!
  """ Total number of trades (swaps) in an hour """
  hourlySwapCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Optimism_UsageMetricsHourlySnapshot_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  hour: Int
  hour_not: Int
  hour_gt: Int
  hour_lt: Int
  hour_gte: Int
  hour_lte: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Optimism_DexAmmProtocol_filter
  hourlyActiveUsers: Int
  hourlyActiveUsers_not: Int
  hourlyActiveUsers_gt: Int
  hourlyActiveUsers_lt: Int
  hourlyActiveUsers_gte: Int
  hourlyActiveUsers_lte: Int
  hourlyActiveUsers_in: [Int!]
  hourlyActiveUsers_not_in: [Int!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  hourlyTransactionCount: Int
  hourlyTransactionCount_not: Int
  hourlyTransactionCount_gt: Int
  hourlyTransactionCount_lt: Int
  hourlyTransactionCount_gte: Int
  hourlyTransactionCount_lte: Int
  hourlyTransactionCount_in: [Int!]
  hourlyTransactionCount_not_in: [Int!]
  hourlyDepositCount: Int
  hourlyDepositCount_not: Int
  hourlyDepositCount_gt: Int
  hourlyDepositCount_lt: Int
  hourlyDepositCount_gte: Int
  hourlyDepositCount_lte: Int
  hourlyDepositCount_in: [Int!]
  hourlyDepositCount_not_in: [Int!]
  hourlyWithdrawCount: Int
  hourlyWithdrawCount_not: Int
  hourlyWithdrawCount_gt: Int
  hourlyWithdrawCount_lt: Int
  hourlyWithdrawCount_gte: Int
  hourlyWithdrawCount_lte: Int
  hourlyWithdrawCount_in: [Int!]
  hourlyWithdrawCount_not_in: [Int!]
  hourlySwapCount: Int
  hourlySwapCount_not: Int
  hourlySwapCount_gt: Int
  hourlySwapCount_lt: Int
  hourlySwapCount_gte: Int
  hourlySwapCount_lte: Int
  hourlySwapCount_in: [Int!]
  hourlySwapCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_UsageMetricsHourlySnapshot_filter]
  or: [Optimism_UsageMetricsHourlySnapshot_filter]
}

enum Optimism_UsageMetricsHourlySnapshot_orderBy {
  id
  hour
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  hourlyActiveUsers
  cumulativeUniqueUsers
  hourlyTransactionCount
  hourlyDepositCount
  hourlyWithdrawCount
  hourlySwapCount
  timestamp
  blockNumber
}

type Optimism_Withdraw {
  """ { Transaction hash }-{ Log index }"""
  id: Optimism_Bytes!
  """ Transaction hash of the transaction that emitted this event """
  hash: Optimism_Bytes!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Gas limit of the transaction that emitted this event """
  gasLimit: BigInt
  """ Gas used in this transaction. (Optional because not every chain will support this) 
  """
  gasUsed: BigInt
  """ Gas price of the transaction that emitted this event """
  gasPrice: BigInt
  """ The protocol this transaction belongs to """
  protocol: Optimism_DexAmmProtocol!
  """ Account that emitted this event """
  account: Optimism_Account!
  """ The user position changed by this event """
  position: Optimism_Position
  """ lower tick of position """
  tickLower: BigInt
  """ upper tick of position """
  tickUpper: BigInt
  """ The pool involving this event """
  pool: Optimism_LiquidityPool!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ Amount of liquidity burned """
  liquidity: BigInt!
  """ Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool 
  """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Optimism_Token_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_Token_filter): [Optimism_Token!]!
  """ Amount of input tokens in the token's native unit """
  inputTokenAmounts: [BigInt!]!
  """ Amount of input tokens in the liquidity pool """
  reserveAmounts: [BigInt!]
  """ USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool) 
  """
  amountUSD: Optimism_BigDecimal!
}

input Optimism_Withdraw_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  hash: Optimism_Bytes
  hash_not: Optimism_Bytes
  hash_gt: Optimism_Bytes
  hash_lt: Optimism_Bytes
  hash_gte: Optimism_Bytes
  hash_lte: Optimism_Bytes
  hash_in: [Optimism_Bytes!]
  hash_not_in: [Optimism_Bytes!]
  hash_contains: Optimism_Bytes
  hash_not_contains: Optimism_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Optimism_DexAmmProtocol_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Optimism_Account_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Optimism_Position_filter
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Optimism_LiquidityPool_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Optimism_Token_filter
  inputTokenAmounts: [BigInt!]
  inputTokenAmounts_not: [BigInt!]
  inputTokenAmounts_contains: [BigInt!]
  inputTokenAmounts_contains_nocase: [BigInt!]
  inputTokenAmounts_not_contains: [BigInt!]
  inputTokenAmounts_not_contains_nocase: [BigInt!]
  reserveAmounts: [BigInt!]
  reserveAmounts_not: [BigInt!]
  reserveAmounts_contains: [BigInt!]
  reserveAmounts_contains_nocase: [BigInt!]
  reserveAmounts_not_contains: [BigInt!]
  reserveAmounts_not_contains_nocase: [BigInt!]
  amountUSD: Optimism_BigDecimal
  amountUSD_not: Optimism_BigDecimal
  amountUSD_gt: Optimism_BigDecimal
  amountUSD_lt: Optimism_BigDecimal
  amountUSD_gte: Optimism_BigDecimal
  amountUSD_lte: Optimism_BigDecimal
  amountUSD_in: [Optimism_BigDecimal!]
  amountUSD_not_in: [Optimism_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism_Withdraw_filter]
  or: [Optimism_Withdraw_filter]
}

enum Optimism_Withdraw_orderBy {
  id
  hash
  nonce
  logIndex
  gasLimit
  gasUsed
  gasPrice
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__liquidityTokenType
  position__liquidity
  position__liquidityUSD
  position__cumulativeDepositUSD
  position__cumulativeWithdrawUSD
  position__depositCount
  position__withdrawCount
  tickLower
  tickUpper
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  blockNumber
  timestamp
  liquidity
  inputTokens
  inputTokenAmounts
  reserveAmounts
  amountUSD
}

type Optimism__Block_ {
  """The hash of the block"""
  hash: Optimism_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Optimism_Bytes
}

"""  Used to keep track of the price of Ether/TVL in USD, pool deposit count, and total unique users 
"""
type Optimism__HelperStore {
  id: Optimism_Bytes!
  """ Token Prices """
  valueDecimalList: [Optimism_BigDecimal!]
  """ price of ETH/TVL in USD """
  valueDecimal: Optimism_BigDecimal
  """ # of deposits, # of unique users """
  valueInt: Int
}

input Optimism__HelperStore_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  valueDecimalList: [Optimism_BigDecimal!]
  valueDecimalList_not: [Optimism_BigDecimal!]
  valueDecimalList_contains: [Optimism_BigDecimal!]
  valueDecimalList_contains_nocase: [Optimism_BigDecimal!]
  valueDecimalList_not_contains: [Optimism_BigDecimal!]
  valueDecimalList_not_contains_nocase: [Optimism_BigDecimal!]
  valueDecimal: Optimism_BigDecimal
  valueDecimal_not: Optimism_BigDecimal
  valueDecimal_gt: Optimism_BigDecimal
  valueDecimal_lt: Optimism_BigDecimal
  valueDecimal_gte: Optimism_BigDecimal
  valueDecimal_lte: Optimism_BigDecimal
  valueDecimal_in: [Optimism_BigDecimal!]
  valueDecimal_not_in: [Optimism_BigDecimal!]
  valueInt: Int
  valueInt_not: Int
  valueInt_gt: Int
  valueInt_lt: Int
  valueInt_gte: Int
  valueInt_lte: Int
  valueInt_in: [Int!]
  valueInt_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism__HelperStore_filter]
  or: [Optimism__HelperStore_filter]
}

enum Optimism__HelperStore_orderBy {
  id
  valueDecimalList
  valueDecimal
  valueInt
}

type Optimism__LiquidityPoolAmount {
  """ Smart contract address of the pool """
  id: Optimism_Bytes!
  """ Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool 
  """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Optimism_Token_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_Token_filter): [Optimism_Token!]!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [Optimism_BigDecimal!]!
  tokenPrices: [Optimism_BigDecimal!]!
}

input Optimism__LiquidityPoolAmount_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Optimism_Token_filter
  inputTokenBalances: [Optimism_BigDecimal!]
  inputTokenBalances_not: [Optimism_BigDecimal!]
  inputTokenBalances_contains: [Optimism_BigDecimal!]
  inputTokenBalances_contains_nocase: [Optimism_BigDecimal!]
  inputTokenBalances_not_contains: [Optimism_BigDecimal!]
  inputTokenBalances_not_contains_nocase: [Optimism_BigDecimal!]
  tokenPrices: [Optimism_BigDecimal!]
  tokenPrices_not: [Optimism_BigDecimal!]
  tokenPrices_contains: [Optimism_BigDecimal!]
  tokenPrices_contains_nocase: [Optimism_BigDecimal!]
  tokenPrices_not_contains: [Optimism_BigDecimal!]
  tokenPrices_not_contains_nocase: [Optimism_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism__LiquidityPoolAmount_filter]
  or: [Optimism__LiquidityPoolAmount_filter]
}

enum Optimism__LiquidityPoolAmount_orderBy {
  id
  inputTokens
  inputTokenBalances
  tokenPrices
}

"""The type for the top-level _meta field"""
type Optimism__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: Optimism__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum Optimism__SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

""" This is used to keep tract of the derived price of tokens in ethereum and the whitelisted pools to which it belongs
"""
type Optimism__TokenWhitelist {
  """ Token Address """
  id: Optimism_Bytes!
  """ pools token is in that are white listed for USD pricing """
  whitelistPools(skip: Int = 0, first: Int = 100, orderBy: Optimism_LiquidityPool_orderBy, orderDirection: Optimism_OrderDirection, where: Optimism_LiquidityPool_filter): [Optimism_LiquidityPool!]!
}

type Optimism__TokenWhitelistSymbol {
  """ Whitelist Token Symbol """
  id: ID!
  """ Whitelist Token Address"""
  address: Optimism_Bytes!
}

input Optimism__TokenWhitelistSymbol_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Optimism_Bytes
  address_not: Optimism_Bytes
  address_gt: Optimism_Bytes
  address_lt: Optimism_Bytes
  address_gte: Optimism_Bytes
  address_lte: Optimism_Bytes
  address_in: [Optimism_Bytes!]
  address_not_in: [Optimism_Bytes!]
  address_contains: Optimism_Bytes
  address_not_contains: Optimism_Bytes
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism__TokenWhitelistSymbol_filter]
  or: [Optimism__TokenWhitelistSymbol_filter]
}

enum Optimism__TokenWhitelistSymbol_orderBy {
  id
  address
}

input Optimism__TokenWhitelist_filter {
  id: Optimism_Bytes
  id_not: Optimism_Bytes
  id_gt: Optimism_Bytes
  id_lt: Optimism_Bytes
  id_gte: Optimism_Bytes
  id_lte: Optimism_Bytes
  id_in: [Optimism_Bytes!]
  id_not_in: [Optimism_Bytes!]
  id_contains: Optimism_Bytes
  id_not_contains: Optimism_Bytes
  whitelistPools: [String!]
  whitelistPools_not: [String!]
  whitelistPools_contains: [String!]
  whitelistPools_contains_nocase: [String!]
  whitelistPools_not_contains: [String!]
  whitelistPools_not_contains_nocase: [String!]
  whitelistPools_: Optimism_LiquidityPool_filter
  """Filter for the block changed event."""
  _change_block: Optimism_BlockChangedFilter
  and: [Optimism__TokenWhitelist_filter]
  or: [Optimism__TokenWhitelist_filter]
}

enum Optimism__TokenWhitelist_orderBy {
  id
  whitelistPools
}

type Arbitrum_Account {
  """ { Account address } """
  id: Arbitrum_Bytes!
  """ Number of positions this account has """
  positionCount: Int!
  """ All positions that belong to this account """
  positions(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_Position_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_Position_filter): [Arbitrum_Position!]!
  """ Number of open positions this account has """
  openPositionCount: Int!
  """ Number of closed positions this account has """
  closedPositionCount: Int!
  """ Number of deposits this account made """
  depositCount: Int!
  """ All deposit events of this account """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_Deposit_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_Deposit_filter): [Arbitrum_Deposit!]!
  """ Number of withdrawals this account made """
  withdrawCount: Int!
  """ All withdraw events of this account """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_Withdraw_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_Withdraw_filter): [Arbitrum_Withdraw!]!
  """ Number of times this account has traded/swapped"""
  swapCount: Int!
  """ All swap events of this account """
  swaps(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_Swap_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_Swap_filter): [Arbitrum_Swap!]!
}

input Arbitrum_Account_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  positions_: Arbitrum_Position_filter
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  deposits_: Arbitrum_Deposit_filter
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  withdraws_: Arbitrum_Withdraw_filter
  swapCount: Int
  swapCount_not: Int
  swapCount_gt: Int
  swapCount_lt: Int
  swapCount_gte: Int
  swapCount_lte: Int
  swapCount_in: [Int!]
  swapCount_not_in: [Int!]
  swaps_: Arbitrum_Swap_filter
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_Account_filter]
  or: [Arbitrum_Account_filter]
}

enum Arbitrum_Account_orderBy {
  id
  positionCount
  positions
  openPositionCount
  closedPositionCount
  depositCount
  deposits
  withdrawCount
  withdraws
  swapCount
  swaps
}

type Arbitrum_ActiveAccount {
  """ { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch } 
  """
  id: Arbitrum_Bytes!
}

input Arbitrum_ActiveAccount_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_ActiveAccount_filter]
  or: [Arbitrum_ActiveAccount_filter]
}

enum Arbitrum_ActiveAccount_orderBy {
  id
}

enum Arbitrum_Aggregation_interval {
  hour
  day
}

scalar Arbitrum_BigDecimal

input Arbitrum_BlockChangedFilter {
  number_gte: Int!
}

input Arbitrum_Block_height {
  hash: Arbitrum_Bytes
  number: Int
  number_gte: Int
}

scalar Arbitrum_Bytes

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.

"""
type Arbitrum_Deposit {
  """ { Transaction hash }-{ Log index } """
  id: Arbitrum_Bytes!
  """ Transaction hash of the transaction that emitted this event """
  hash: Arbitrum_Bytes!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Gas limit of the transaction that emitted this event """
  gasLimit: BigInt
  """ Gas used in this transaction. (Optional because not every chain will support this) 
  """
  gasUsed: BigInt
  """ Gas price of the transaction that emitted this event """
  gasPrice: BigInt
  """ The protocol this transaction belongs to """
  protocol: Arbitrum_DexAmmProtocol!
  """ Account that emitted this event """
  account: Arbitrum_Account!
  """ The user position changed by this event """
  position: Arbitrum_Position
  """ The pool involving this event """
  pool: Arbitrum_LiquidityPool!
  """ lower tick of position """
  tickLower: BigInt
  """ upper tick of position """
  tickUpper: BigInt
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ Amount of liquidity minted """
  liquidity: BigInt!
  """ Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_Token_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_Token_filter): [Arbitrum_Token!]!
  """ Amount of input tokens in the token's native unit """
  inputTokenAmounts: [BigInt!]!
  """ Amount of input tokens in the liquidity pool """
  reserveAmounts: [BigInt!]
  """ USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool) 
  """
  amountUSD: Arbitrum_BigDecimal!
}

input Arbitrum_Deposit_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  hash: Arbitrum_Bytes
  hash_not: Arbitrum_Bytes
  hash_gt: Arbitrum_Bytes
  hash_lt: Arbitrum_Bytes
  hash_gte: Arbitrum_Bytes
  hash_lte: Arbitrum_Bytes
  hash_in: [Arbitrum_Bytes!]
  hash_not_in: [Arbitrum_Bytes!]
  hash_contains: Arbitrum_Bytes
  hash_not_contains: Arbitrum_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Arbitrum_DexAmmProtocol_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Arbitrum_Account_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Arbitrum_Position_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Arbitrum_LiquidityPool_filter
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Arbitrum_Token_filter
  inputTokenAmounts: [BigInt!]
  inputTokenAmounts_not: [BigInt!]
  inputTokenAmounts_contains: [BigInt!]
  inputTokenAmounts_contains_nocase: [BigInt!]
  inputTokenAmounts_not_contains: [BigInt!]
  inputTokenAmounts_not_contains_nocase: [BigInt!]
  reserveAmounts: [BigInt!]
  reserveAmounts_not: [BigInt!]
  reserveAmounts_contains: [BigInt!]
  reserveAmounts_contains_nocase: [BigInt!]
  reserveAmounts_not_contains: [BigInt!]
  reserveAmounts_not_contains_nocase: [BigInt!]
  amountUSD: Arbitrum_BigDecimal
  amountUSD_not: Arbitrum_BigDecimal
  amountUSD_gt: Arbitrum_BigDecimal
  amountUSD_lt: Arbitrum_BigDecimal
  amountUSD_gte: Arbitrum_BigDecimal
  amountUSD_lte: Arbitrum_BigDecimal
  amountUSD_in: [Arbitrum_BigDecimal!]
  amountUSD_not_in: [Arbitrum_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_Deposit_filter]
  or: [Arbitrum_Deposit_filter]
}

enum Arbitrum_Deposit_orderBy {
  id
  hash
  nonce
  logIndex
  gasLimit
  gasUsed
  gasPrice
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__liquidityTokenType
  position__liquidity
  position__liquidityUSD
  position__cumulativeDepositUSD
  position__cumulativeWithdrawUSD
  position__depositCount
  position__withdrawCount
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  tickLower
  tickUpper
  blockNumber
  timestamp
  liquidity
  inputTokens
  inputTokenAmounts
  reserveAmounts
  amountUSD
}

type Arbitrum_DexAmmProtocol implements Arbitrum_Protocol {
  """ Smart contract address of the protocol's main contract (Factory, Registry, etc) 
  """
  id: Arbitrum_Bytes!
  """ Name of the protocol, including version. e.g. Uniswap v3 """
  name: String!
  """ Slug of protocol, including version. e.g. uniswap-v3 """
  slug: String!
  """ Version of the subgraph schema, in SemVer format (e.g. 1.0.0) """
  schemaVersion: String!
  """ Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) 
  """
  subgraphVersion: String!
  """ Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) 
  """
  methodologyVersion: String!
  """ The blockchain network this subgraph is indexing on """
  network: Arbitrum_Network!
  """ The type of protocol (e.g. DEX, Lending, Yield, etc) """
  type: Arbitrum_ProtocolType!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: Arbitrum_BigDecimal!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Arbitrum_BigDecimal!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Arbitrum_BigDecimal!
  """ All protocol-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedProtocolSideValueUSD: Arbitrum_BigDecimal!
  """ All supply-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedSupplySideValueUSD: Arbitrum_BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: Arbitrum_BigDecimal
  """ All historical volume in USD """
  cumulativeVolumeUSD: Arbitrum_BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: Arbitrum_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: Arbitrum_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: Arbitrum_BigDecimal!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Number of cumulative liquidity providers """
  cumulativeUniqueLPs: Int!
  """ Number of cumulative traders """
  cumulativeUniqueTraders: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Total number of open positions """
  openPositionCount: Int!
  """ Total number of positions (open and closed) """
  cumulativePositionCount: Int!
  """ Day ID of the most recent daily snapshot """
  lastSnapshotDayID: Int!
  """ Timestamp of the last time this entity was updated """
  lastUpdateTimestamp: BigInt!
  """ Block number of the last time this entity was updated """
  lastUpdateBlockNumber: BigInt!
  """ Daily usage metrics for this protocol """
  dailyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_UsageMetricsDailySnapshot_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_UsageMetricsDailySnapshot_filter): [Arbitrum_UsageMetricsDailySnapshot!]!
  """ Hourly usage metrics for this protocol """
  hourlyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_UsageMetricsHourlySnapshot_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_UsageMetricsHourlySnapshot_filter): [Arbitrum_UsageMetricsHourlySnapshot!]!
  """ Daily financial metrics for this protocol """
  financialMetrics(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_FinancialsDailySnapshot_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_FinancialsDailySnapshot_filter): [Arbitrum_FinancialsDailySnapshot!]!
  """ All pools that belong to this protocol """
  pools(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_LiquidityPool_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_LiquidityPool_filter): [Arbitrum_LiquidityPool!]!
  """ This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis 
  """
  _regenesis: Boolean!
}

input Arbitrum_DexAmmProtocol_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  schemaVersion: String
  schemaVersion_not: String
  schemaVersion_gt: String
  schemaVersion_lt: String
  schemaVersion_gte: String
  schemaVersion_lte: String
  schemaVersion_in: [String!]
  schemaVersion_not_in: [String!]
  schemaVersion_contains: String
  schemaVersion_contains_nocase: String
  schemaVersion_not_contains: String
  schemaVersion_not_contains_nocase: String
  schemaVersion_starts_with: String
  schemaVersion_starts_with_nocase: String
  schemaVersion_not_starts_with: String
  schemaVersion_not_starts_with_nocase: String
  schemaVersion_ends_with: String
  schemaVersion_ends_with_nocase: String
  schemaVersion_not_ends_with: String
  schemaVersion_not_ends_with_nocase: String
  subgraphVersion: String
  subgraphVersion_not: String
  subgraphVersion_gt: String
  subgraphVersion_lt: String
  subgraphVersion_gte: String
  subgraphVersion_lte: String
  subgraphVersion_in: [String!]
  subgraphVersion_not_in: [String!]
  subgraphVersion_contains: String
  subgraphVersion_contains_nocase: String
  subgraphVersion_not_contains: String
  subgraphVersion_not_contains_nocase: String
  subgraphVersion_starts_with: String
  subgraphVersion_starts_with_nocase: String
  subgraphVersion_not_starts_with: String
  subgraphVersion_not_starts_with_nocase: String
  subgraphVersion_ends_with: String
  subgraphVersion_ends_with_nocase: String
  subgraphVersion_not_ends_with: String
  subgraphVersion_not_ends_with_nocase: String
  methodologyVersion: String
  methodologyVersion_not: String
  methodologyVersion_gt: String
  methodologyVersion_lt: String
  methodologyVersion_gte: String
  methodologyVersion_lte: String
  methodologyVersion_in: [String!]
  methodologyVersion_not_in: [String!]
  methodologyVersion_contains: String
  methodologyVersion_contains_nocase: String
  methodologyVersion_not_contains: String
  methodologyVersion_not_contains_nocase: String
  methodologyVersion_starts_with: String
  methodologyVersion_starts_with_nocase: String
  methodologyVersion_not_starts_with: String
  methodologyVersion_not_starts_with_nocase: String
  methodologyVersion_ends_with: String
  methodologyVersion_ends_with_nocase: String
  methodologyVersion_not_ends_with: String
  methodologyVersion_not_ends_with_nocase: String
  network: Arbitrum_Network
  network_not: Arbitrum_Network
  network_in: [Arbitrum_Network!]
  network_not_in: [Arbitrum_Network!]
  type: Arbitrum_ProtocolType
  type_not: Arbitrum_ProtocolType
  type_in: [Arbitrum_ProtocolType!]
  type_not_in: [Arbitrum_ProtocolType!]
  totalValueLockedUSD: Arbitrum_BigDecimal
  totalValueLockedUSD_not: Arbitrum_BigDecimal
  totalValueLockedUSD_gt: Arbitrum_BigDecimal
  totalValueLockedUSD_lt: Arbitrum_BigDecimal
  totalValueLockedUSD_gte: Arbitrum_BigDecimal
  totalValueLockedUSD_lte: Arbitrum_BigDecimal
  totalValueLockedUSD_in: [Arbitrum_BigDecimal!]
  totalValueLockedUSD_not_in: [Arbitrum_BigDecimal!]
  totalLiquidityUSD: Arbitrum_BigDecimal
  totalLiquidityUSD_not: Arbitrum_BigDecimal
  totalLiquidityUSD_gt: Arbitrum_BigDecimal
  totalLiquidityUSD_lt: Arbitrum_BigDecimal
  totalLiquidityUSD_gte: Arbitrum_BigDecimal
  totalLiquidityUSD_lte: Arbitrum_BigDecimal
  totalLiquidityUSD_in: [Arbitrum_BigDecimal!]
  totalLiquidityUSD_not_in: [Arbitrum_BigDecimal!]
  activeLiquidityUSD: Arbitrum_BigDecimal
  activeLiquidityUSD_not: Arbitrum_BigDecimal
  activeLiquidityUSD_gt: Arbitrum_BigDecimal
  activeLiquidityUSD_lt: Arbitrum_BigDecimal
  activeLiquidityUSD_gte: Arbitrum_BigDecimal
  activeLiquidityUSD_lte: Arbitrum_BigDecimal
  activeLiquidityUSD_in: [Arbitrum_BigDecimal!]
  activeLiquidityUSD_not_in: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValueUSD: Arbitrum_BigDecimal
  uncollectedProtocolSideValueUSD_not: Arbitrum_BigDecimal
  uncollectedProtocolSideValueUSD_gt: Arbitrum_BigDecimal
  uncollectedProtocolSideValueUSD_lt: Arbitrum_BigDecimal
  uncollectedProtocolSideValueUSD_gte: Arbitrum_BigDecimal
  uncollectedProtocolSideValueUSD_lte: Arbitrum_BigDecimal
  uncollectedProtocolSideValueUSD_in: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValueUSD_not_in: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValueUSD: Arbitrum_BigDecimal
  uncollectedSupplySideValueUSD_not: Arbitrum_BigDecimal
  uncollectedSupplySideValueUSD_gt: Arbitrum_BigDecimal
  uncollectedSupplySideValueUSD_lt: Arbitrum_BigDecimal
  uncollectedSupplySideValueUSD_gte: Arbitrum_BigDecimal
  uncollectedSupplySideValueUSD_lte: Arbitrum_BigDecimal
  uncollectedSupplySideValueUSD_in: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValueUSD_not_in: [Arbitrum_BigDecimal!]
  protocolControlledValueUSD: Arbitrum_BigDecimal
  protocolControlledValueUSD_not: Arbitrum_BigDecimal
  protocolControlledValueUSD_gt: Arbitrum_BigDecimal
  protocolControlledValueUSD_lt: Arbitrum_BigDecimal
  protocolControlledValueUSD_gte: Arbitrum_BigDecimal
  protocolControlledValueUSD_lte: Arbitrum_BigDecimal
  protocolControlledValueUSD_in: [Arbitrum_BigDecimal!]
  protocolControlledValueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeVolumeUSD: Arbitrum_BigDecimal
  cumulativeVolumeUSD_not: Arbitrum_BigDecimal
  cumulativeVolumeUSD_gt: Arbitrum_BigDecimal
  cumulativeVolumeUSD_lt: Arbitrum_BigDecimal
  cumulativeVolumeUSD_gte: Arbitrum_BigDecimal
  cumulativeVolumeUSD_lte: Arbitrum_BigDecimal
  cumulativeVolumeUSD_in: [Arbitrum_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeTotalRevenueUSD: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  cumulativeUniqueLPs: Int
  cumulativeUniqueLPs_not: Int
  cumulativeUniqueLPs_gt: Int
  cumulativeUniqueLPs_lt: Int
  cumulativeUniqueLPs_gte: Int
  cumulativeUniqueLPs_lte: Int
  cumulativeUniqueLPs_in: [Int!]
  cumulativeUniqueLPs_not_in: [Int!]
  cumulativeUniqueTraders: Int
  cumulativeUniqueTraders_not: Int
  cumulativeUniqueTraders_gt: Int
  cumulativeUniqueTraders_lt: Int
  cumulativeUniqueTraders_gte: Int
  cumulativeUniqueTraders_lte: Int
  cumulativeUniqueTraders_in: [Int!]
  cumulativeUniqueTraders_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  cumulativePositionCount: Int
  cumulativePositionCount_not: Int
  cumulativePositionCount_gt: Int
  cumulativePositionCount_lt: Int
  cumulativePositionCount_gte: Int
  cumulativePositionCount_lte: Int
  cumulativePositionCount_in: [Int!]
  cumulativePositionCount_not_in: [Int!]
  lastSnapshotDayID: Int
  lastSnapshotDayID_not: Int
  lastSnapshotDayID_gt: Int
  lastSnapshotDayID_lt: Int
  lastSnapshotDayID_gte: Int
  lastSnapshotDayID_lte: Int
  lastSnapshotDayID_in: [Int!]
  lastSnapshotDayID_not_in: [Int!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  dailyUsageMetrics_: Arbitrum_UsageMetricsDailySnapshot_filter
  hourlyUsageMetrics_: Arbitrum_UsageMetricsHourlySnapshot_filter
  financialMetrics_: Arbitrum_FinancialsDailySnapshot_filter
  pools_: Arbitrum_LiquidityPool_filter
  _regenesis: Boolean
  _regenesis_not: Boolean
  _regenesis_in: [Boolean!]
  _regenesis_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_DexAmmProtocol_filter]
  or: [Arbitrum_DexAmmProtocol_filter]
}

enum Arbitrum_DexAmmProtocol_orderBy {
  id
  name
  slug
  schemaVersion
  subgraphVersion
  methodologyVersion
  network
  type
  totalValueLockedUSD
  totalLiquidityUSD
  activeLiquidityUSD
  uncollectedProtocolSideValueUSD
  uncollectedSupplySideValueUSD
  protocolControlledValueUSD
  cumulativeVolumeUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  cumulativeUniqueUsers
  cumulativeUniqueLPs
  cumulativeUniqueTraders
  totalPoolCount
  openPositionCount
  cumulativePositionCount
  lastSnapshotDayID
  lastUpdateTimestamp
  lastUpdateBlockNumber
  dailyUsageMetrics
  hourlyUsageMetrics
  financialMetrics
  pools
  _regenesis
}

type Arbitrum_FinancialsDailySnapshot {
  """ ID is # of days since Unix epoch time """
  id: Arbitrum_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ Protocol this snapshot is associated with """
  protocol: Arbitrum_DexAmmProtocol!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: Arbitrum_BigDecimal!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Arbitrum_BigDecimal!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Arbitrum_BigDecimal!
  """ All protocol-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedProtocolSideValueUSD: Arbitrum_BigDecimal!
  """ All supply-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedSupplySideValueUSD: Arbitrum_BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: Arbitrum_BigDecimal
  """ All trade volume occurred in a given day, in USD """
  dailyVolumeUSD: Arbitrum_BigDecimal!
  """ All historical trade volume in USD """
  cumulativeVolumeUSD: Arbitrum_BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  dailySupplySideRevenueUSD: Arbitrum_BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: Arbitrum_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  dailyProtocolSideRevenueUSD: Arbitrum_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: Arbitrum_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  dailyTotalRevenueUSD: Arbitrum_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: Arbitrum_BigDecimal!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Arbitrum_FinancialsDailySnapshot_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Arbitrum_DexAmmProtocol_filter
  totalValueLockedUSD: Arbitrum_BigDecimal
  totalValueLockedUSD_not: Arbitrum_BigDecimal
  totalValueLockedUSD_gt: Arbitrum_BigDecimal
  totalValueLockedUSD_lt: Arbitrum_BigDecimal
  totalValueLockedUSD_gte: Arbitrum_BigDecimal
  totalValueLockedUSD_lte: Arbitrum_BigDecimal
  totalValueLockedUSD_in: [Arbitrum_BigDecimal!]
  totalValueLockedUSD_not_in: [Arbitrum_BigDecimal!]
  totalLiquidityUSD: Arbitrum_BigDecimal
  totalLiquidityUSD_not: Arbitrum_BigDecimal
  totalLiquidityUSD_gt: Arbitrum_BigDecimal
  totalLiquidityUSD_lt: Arbitrum_BigDecimal
  totalLiquidityUSD_gte: Arbitrum_BigDecimal
  totalLiquidityUSD_lte: Arbitrum_BigDecimal
  totalLiquidityUSD_in: [Arbitrum_BigDecimal!]
  totalLiquidityUSD_not_in: [Arbitrum_BigDecimal!]
  activeLiquidityUSD: Arbitrum_BigDecimal
  activeLiquidityUSD_not: Arbitrum_BigDecimal
  activeLiquidityUSD_gt: Arbitrum_BigDecimal
  activeLiquidityUSD_lt: Arbitrum_BigDecimal
  activeLiquidityUSD_gte: Arbitrum_BigDecimal
  activeLiquidityUSD_lte: Arbitrum_BigDecimal
  activeLiquidityUSD_in: [Arbitrum_BigDecimal!]
  activeLiquidityUSD_not_in: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValueUSD: Arbitrum_BigDecimal
  uncollectedProtocolSideValueUSD_not: Arbitrum_BigDecimal
  uncollectedProtocolSideValueUSD_gt: Arbitrum_BigDecimal
  uncollectedProtocolSideValueUSD_lt: Arbitrum_BigDecimal
  uncollectedProtocolSideValueUSD_gte: Arbitrum_BigDecimal
  uncollectedProtocolSideValueUSD_lte: Arbitrum_BigDecimal
  uncollectedProtocolSideValueUSD_in: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValueUSD_not_in: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValueUSD: Arbitrum_BigDecimal
  uncollectedSupplySideValueUSD_not: Arbitrum_BigDecimal
  uncollectedSupplySideValueUSD_gt: Arbitrum_BigDecimal
  uncollectedSupplySideValueUSD_lt: Arbitrum_BigDecimal
  uncollectedSupplySideValueUSD_gte: Arbitrum_BigDecimal
  uncollectedSupplySideValueUSD_lte: Arbitrum_BigDecimal
  uncollectedSupplySideValueUSD_in: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValueUSD_not_in: [Arbitrum_BigDecimal!]
  protocolControlledValueUSD: Arbitrum_BigDecimal
  protocolControlledValueUSD_not: Arbitrum_BigDecimal
  protocolControlledValueUSD_gt: Arbitrum_BigDecimal
  protocolControlledValueUSD_lt: Arbitrum_BigDecimal
  protocolControlledValueUSD_gte: Arbitrum_BigDecimal
  protocolControlledValueUSD_lte: Arbitrum_BigDecimal
  protocolControlledValueUSD_in: [Arbitrum_BigDecimal!]
  protocolControlledValueUSD_not_in: [Arbitrum_BigDecimal!]
  dailyVolumeUSD: Arbitrum_BigDecimal
  dailyVolumeUSD_not: Arbitrum_BigDecimal
  dailyVolumeUSD_gt: Arbitrum_BigDecimal
  dailyVolumeUSD_lt: Arbitrum_BigDecimal
  dailyVolumeUSD_gte: Arbitrum_BigDecimal
  dailyVolumeUSD_lte: Arbitrum_BigDecimal
  dailyVolumeUSD_in: [Arbitrum_BigDecimal!]
  dailyVolumeUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeVolumeUSD: Arbitrum_BigDecimal
  cumulativeVolumeUSD_not: Arbitrum_BigDecimal
  cumulativeVolumeUSD_gt: Arbitrum_BigDecimal
  cumulativeVolumeUSD_lt: Arbitrum_BigDecimal
  cumulativeVolumeUSD_gte: Arbitrum_BigDecimal
  cumulativeVolumeUSD_lte: Arbitrum_BigDecimal
  cumulativeVolumeUSD_in: [Arbitrum_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Arbitrum_BigDecimal!]
  dailySupplySideRevenueUSD: Arbitrum_BigDecimal
  dailySupplySideRevenueUSD_not: Arbitrum_BigDecimal
  dailySupplySideRevenueUSD_gt: Arbitrum_BigDecimal
  dailySupplySideRevenueUSD_lt: Arbitrum_BigDecimal
  dailySupplySideRevenueUSD_gte: Arbitrum_BigDecimal
  dailySupplySideRevenueUSD_lte: Arbitrum_BigDecimal
  dailySupplySideRevenueUSD_in: [Arbitrum_BigDecimal!]
  dailySupplySideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  dailyProtocolSideRevenueUSD: Arbitrum_BigDecimal
  dailyProtocolSideRevenueUSD_not: Arbitrum_BigDecimal
  dailyProtocolSideRevenueUSD_gt: Arbitrum_BigDecimal
  dailyProtocolSideRevenueUSD_lt: Arbitrum_BigDecimal
  dailyProtocolSideRevenueUSD_gte: Arbitrum_BigDecimal
  dailyProtocolSideRevenueUSD_lte: Arbitrum_BigDecimal
  dailyProtocolSideRevenueUSD_in: [Arbitrum_BigDecimal!]
  dailyProtocolSideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  dailyTotalRevenueUSD: Arbitrum_BigDecimal
  dailyTotalRevenueUSD_not: Arbitrum_BigDecimal
  dailyTotalRevenueUSD_gt: Arbitrum_BigDecimal
  dailyTotalRevenueUSD_lt: Arbitrum_BigDecimal
  dailyTotalRevenueUSD_gte: Arbitrum_BigDecimal
  dailyTotalRevenueUSD_lte: Arbitrum_BigDecimal
  dailyTotalRevenueUSD_in: [Arbitrum_BigDecimal!]
  dailyTotalRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeTotalRevenueUSD: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_FinancialsDailySnapshot_filter]
  or: [Arbitrum_FinancialsDailySnapshot_filter]
}

enum Arbitrum_FinancialsDailySnapshot_orderBy {
  id
  day
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  totalValueLockedUSD
  totalLiquidityUSD
  activeLiquidityUSD
  uncollectedProtocolSideValueUSD
  uncollectedSupplySideValueUSD
  protocolControlledValueUSD
  dailyVolumeUSD
  cumulativeVolumeUSD
  dailySupplySideRevenueUSD
  cumulativeSupplySideRevenueUSD
  dailyProtocolSideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  dailyTotalRevenueUSD
  cumulativeTotalRevenueUSD
  timestamp
  blockNumber
}

"""
8 bytes signed integer

"""
scalar Arbitrum_Int8

type Arbitrum_LiquidityPool {
  """ Smart contract address of the pool """
  id: Arbitrum_Bytes!
  """ The protocol this pool belongs to """
  protocol: Arbitrum_DexAmmProtocol!
  """ Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT) """
  name: String
  """ Symbol of liquidity pool (e.g. 3CRV) """
  symbol: String
  """ Token that is to represent ownership of liquidity """
  liquidityToken: Arbitrum_Token
  """ Type of token used to track liquidity """
  liquidityTokenType: Arbitrum_TokenType
  """ Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer 
  """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_Token_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_Token_filter): [Arbitrum_Token!]!
  """ Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon 
  """
  rewardTokens(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_RewardToken_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_RewardToken_filter): [Arbitrum_RewardToken!]
  """ Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee. ) 
  """
  fees(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_LiquidityPoolFee_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_LiquidityPoolFee_filter): [Arbitrum_LiquidityPoolFee!]!
  """ Whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol. 
  """
  isSingleSided: Boolean!
  """ Creation timestamp """
  createdTimestamp: BigInt!
  """ Creation block number """
  createdBlockNumber: BigInt!
  """ Current tick representing the price of token0/token1 """
  tick: BigInt
  """ Current TVL (Total Value Locked) of this pool in USD """
  totalValueLockedUSD: Arbitrum_BigDecimal!
  """ The sum of all active and non-active liquidity for this pool. """
  totalLiquidity: BigInt!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Arbitrum_BigDecimal!
  """ All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidity: BigInt!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Arbitrum_BigDecimal!
  """ All protocol-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  """ All protocol-side value locking in USD that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideValuesUSD: [Arbitrum_BigDecimal!]!
  """ All supply-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  """ All supply-side value locked in USD that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideValuesUSD: [Arbitrum_BigDecimal!]!
  """ All revenue generated by the liquidity pool, accrued to the supply side. 
  """
  cumulativeSupplySideRevenueUSD: Arbitrum_BigDecimal!
  """ All revenue generated by the liquidity pool, accrued to the protocol. 
  """
  cumulativeProtocolSideRevenueUSD: Arbitrum_BigDecimal!
  """ All revenue generated by the liquidity pool. """
  cumulativeTotalRevenueUSD: Arbitrum_BigDecimal!
  """ All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenAmount: [BigInt!]!
  """ All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenUSD: [Arbitrum_BigDecimal!]!
  """ All historical trade volume occurred in this pool, in USD """
  cumulativeVolumeUSD: Arbitrum_BigDecimal!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalancesUSD: [Arbitrum_BigDecimal!]!
  """ Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool 
  """
  inputTokenWeights: [Arbitrum_BigDecimal!]!
  """ Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. 
  """
  stakedOutputTokenAmount: BigInt
  """ Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [Arbitrum_BigDecimal!]
  """ Total number of deposits (add liquidity) """
  cumulativeDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) """
  cumulativeWithdrawCount: Int!
  """ Total number of trades (swaps) """
  cumulativeSwapCount: Int!
  """ All positions in this market """
  positions(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_Position_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_Position_filter): [Arbitrum_Position!]!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Day ID of the most recent daily snapshot """
  lastSnapshotDayID: Int!
  """ Hour ID of the most recent hourly snapshot """
  lastSnapshotHourID: Int!
  """ Timestamp of the last time this entity was updated """
  lastUpdateTimestamp: BigInt!
  """ Block number of the last time this entity was updated """
  lastUpdateBlockNumber: BigInt!
  """ Liquidity pool daily snapshots """
  dailySnapshots(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_LiquidityPoolDailySnapshot_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_LiquidityPoolDailySnapshot_filter): [Arbitrum_LiquidityPoolDailySnapshot!]!
  """ Liquidity pool hourly snapshots """
  hourlySnapshots(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_LiquidityPoolHourlySnapshot_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_LiquidityPoolHourlySnapshot_filter): [Arbitrum_LiquidityPoolHourlySnapshot!]!
  """ All deposit (add liquidity) events occurred in this pool """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_Deposit_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_Deposit_filter): [Arbitrum_Deposit!]!
  """ All withdraw (remove liquidity) events occurred in this pool """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_Withdraw_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_Withdraw_filter): [Arbitrum_Withdraw!]!
  """ All trade (swap) events occurred in this pool """
  swaps(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_Swap_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_Swap_filter): [Arbitrum_Swap!]!
}

type Arbitrum_LiquidityPoolDailySnapshot {
  """ { Smart contract address of the pool }-{ # of days since Unix epoch time } 
  """
  id: Arbitrum_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ The protocol this snapshot belongs to """
  protocol: Arbitrum_DexAmmProtocol!
  """ The pool this snapshot belongs to """
  pool: Arbitrum_LiquidityPool!
  """ Current tick representing the price of token0/token1 """
  tick: BigInt
  """ Current TVL (Total Value Locked) of this pool """
  totalValueLockedUSD: Arbitrum_BigDecimal!
  """ The sum of all active and non-active liquidity for this pool. """
  totalLiquidity: BigInt!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Arbitrum_BigDecimal!
  """ All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidity: BigInt!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Arbitrum_BigDecimal!
  """ All protocol-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  """ All protocol-side value locking in USD that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideValuesUSD: [Arbitrum_BigDecimal!]!
  """ All supply-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  """ All supply-side value locked in USD that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideValuesUSD: [Arbitrum_BigDecimal!]!
  """ All revenue generated by the liquidity pool, accrued to the supply side. 
  """
  cumulativeSupplySideRevenueUSD: Arbitrum_BigDecimal!
  """ Daily revenue generated by the liquidity pool, accrued to the supply side. 
  """
  dailySupplySideRevenueUSD: Arbitrum_BigDecimal!
  """ All revenue generated by the liquidity pool, accrued to the protocol. 
  """
  cumulativeProtocolSideRevenueUSD: Arbitrum_BigDecimal!
  """ Daily revenue generated by the liquidity pool, accrued to the protocol. 
  """
  dailyProtocolSideRevenueUSD: Arbitrum_BigDecimal!
  """ All revenue generated by the liquidity pool. """
  cumulativeTotalRevenueUSD: Arbitrum_BigDecimal!
  """ Daily revenue generated by the liquidity pool. """
  dailyTotalRevenueUSD: Arbitrum_BigDecimal!
  """ All historical trade volume occurred in this pool, in USD """
  cumulativeVolumeUSD: Arbitrum_BigDecimal!
  """ All trade volume occurred in a given day, in USD """
  dailyVolumeUSD: Arbitrum_BigDecimal!
  """ All trade volume , in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenAmount: [BigInt!]!
  """ All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  dailyVolumeByTokenAmount: [BigInt!]!
  """ All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenUSD: [Arbitrum_BigDecimal!]!
  """ All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  dailyVolumeByTokenUSD: [Arbitrum_BigDecimal!]!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalancesUSD: [Arbitrum_BigDecimal!]!
  """ Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool 
  """
  inputTokenWeights: [Arbitrum_BigDecimal!]!
  """ Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. 
  """
  stakedOutputTokenAmount: BigInt
  """ Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [Arbitrum_BigDecimal!]
  """ Total number of deposits (add liquidity) """
  cumulativeDepositCount: Int!
  """ Total number of deposits (add liquidity) in a day """
  dailyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) """
  cumulativeWithdrawCount: Int!
  """ Total number of withdrawals (remove liquidity) in a day """
  dailyWithdrawCount: Int!
  """ Total number of trades (swaps) """
  cumulativeSwapCount: Int!
  """ Total number of trades (swaps) in a day """
  dailySwapCount: Int!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Arbitrum_LiquidityPoolDailySnapshot_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Arbitrum_DexAmmProtocol_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Arbitrum_LiquidityPool_filter
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  totalValueLockedUSD: Arbitrum_BigDecimal
  totalValueLockedUSD_not: Arbitrum_BigDecimal
  totalValueLockedUSD_gt: Arbitrum_BigDecimal
  totalValueLockedUSD_lt: Arbitrum_BigDecimal
  totalValueLockedUSD_gte: Arbitrum_BigDecimal
  totalValueLockedUSD_lte: Arbitrum_BigDecimal
  totalValueLockedUSD_in: [Arbitrum_BigDecimal!]
  totalValueLockedUSD_not_in: [Arbitrum_BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalLiquidityUSD: Arbitrum_BigDecimal
  totalLiquidityUSD_not: Arbitrum_BigDecimal
  totalLiquidityUSD_gt: Arbitrum_BigDecimal
  totalLiquidityUSD_lt: Arbitrum_BigDecimal
  totalLiquidityUSD_gte: Arbitrum_BigDecimal
  totalLiquidityUSD_lte: Arbitrum_BigDecimal
  totalLiquidityUSD_in: [Arbitrum_BigDecimal!]
  totalLiquidityUSD_not_in: [Arbitrum_BigDecimal!]
  activeLiquidity: BigInt
  activeLiquidity_not: BigInt
  activeLiquidity_gt: BigInt
  activeLiquidity_lt: BigInt
  activeLiquidity_gte: BigInt
  activeLiquidity_lte: BigInt
  activeLiquidity_in: [BigInt!]
  activeLiquidity_not_in: [BigInt!]
  activeLiquidityUSD: Arbitrum_BigDecimal
  activeLiquidityUSD_not: Arbitrum_BigDecimal
  activeLiquidityUSD_gt: Arbitrum_BigDecimal
  activeLiquidityUSD_lt: Arbitrum_BigDecimal
  activeLiquidityUSD_gte: Arbitrum_BigDecimal
  activeLiquidityUSD_lte: Arbitrum_BigDecimal
  activeLiquidityUSD_in: [Arbitrum_BigDecimal!]
  activeLiquidityUSD_not_in: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideTokenAmounts: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedProtocolSideValuesUSD: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains_nocase: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  uncollectedSupplySideTokenAmounts: [BigInt!]
  uncollectedSupplySideTokenAmounts_not: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedSupplySideValuesUSD: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains_nocase: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  dailySupplySideRevenueUSD: Arbitrum_BigDecimal
  dailySupplySideRevenueUSD_not: Arbitrum_BigDecimal
  dailySupplySideRevenueUSD_gt: Arbitrum_BigDecimal
  dailySupplySideRevenueUSD_lt: Arbitrum_BigDecimal
  dailySupplySideRevenueUSD_gte: Arbitrum_BigDecimal
  dailySupplySideRevenueUSD_lte: Arbitrum_BigDecimal
  dailySupplySideRevenueUSD_in: [Arbitrum_BigDecimal!]
  dailySupplySideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  dailyProtocolSideRevenueUSD: Arbitrum_BigDecimal
  dailyProtocolSideRevenueUSD_not: Arbitrum_BigDecimal
  dailyProtocolSideRevenueUSD_gt: Arbitrum_BigDecimal
  dailyProtocolSideRevenueUSD_lt: Arbitrum_BigDecimal
  dailyProtocolSideRevenueUSD_gte: Arbitrum_BigDecimal
  dailyProtocolSideRevenueUSD_lte: Arbitrum_BigDecimal
  dailyProtocolSideRevenueUSD_in: [Arbitrum_BigDecimal!]
  dailyProtocolSideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeTotalRevenueUSD: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  dailyTotalRevenueUSD: Arbitrum_BigDecimal
  dailyTotalRevenueUSD_not: Arbitrum_BigDecimal
  dailyTotalRevenueUSD_gt: Arbitrum_BigDecimal
  dailyTotalRevenueUSD_lt: Arbitrum_BigDecimal
  dailyTotalRevenueUSD_gte: Arbitrum_BigDecimal
  dailyTotalRevenueUSD_lte: Arbitrum_BigDecimal
  dailyTotalRevenueUSD_in: [Arbitrum_BigDecimal!]
  dailyTotalRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeVolumeUSD: Arbitrum_BigDecimal
  cumulativeVolumeUSD_not: Arbitrum_BigDecimal
  cumulativeVolumeUSD_gt: Arbitrum_BigDecimal
  cumulativeVolumeUSD_lt: Arbitrum_BigDecimal
  cumulativeVolumeUSD_gte: Arbitrum_BigDecimal
  cumulativeVolumeUSD_lte: Arbitrum_BigDecimal
  cumulativeVolumeUSD_in: [Arbitrum_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Arbitrum_BigDecimal!]
  dailyVolumeUSD: Arbitrum_BigDecimal
  dailyVolumeUSD_not: Arbitrum_BigDecimal
  dailyVolumeUSD_gt: Arbitrum_BigDecimal
  dailyVolumeUSD_lt: Arbitrum_BigDecimal
  dailyVolumeUSD_gte: Arbitrum_BigDecimal
  dailyVolumeUSD_lte: Arbitrum_BigDecimal
  dailyVolumeUSD_in: [Arbitrum_BigDecimal!]
  dailyVolumeUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenAmount: [BigInt!]
  cumulativeVolumeByTokenAmount_not: [BigInt!]
  cumulativeVolumeByTokenAmount_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  dailyVolumeByTokenAmount: [BigInt!]
  dailyVolumeByTokenAmount_not: [BigInt!]
  dailyVolumeByTokenAmount_contains: [BigInt!]
  dailyVolumeByTokenAmount_contains_nocase: [BigInt!]
  dailyVolumeByTokenAmount_not_contains: [BigInt!]
  dailyVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenUSD: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains_nocase: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  dailyVolumeByTokenUSD: [Arbitrum_BigDecimal!]
  dailyVolumeByTokenUSD_not: [Arbitrum_BigDecimal!]
  dailyVolumeByTokenUSD_contains: [Arbitrum_BigDecimal!]
  dailyVolumeByTokenUSD_contains_nocase: [Arbitrum_BigDecimal!]
  dailyVolumeByTokenUSD_not_contains: [Arbitrum_BigDecimal!]
  dailyVolumeByTokenUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenBalancesUSD: [Arbitrum_BigDecimal!]
  inputTokenBalancesUSD_not: [Arbitrum_BigDecimal!]
  inputTokenBalancesUSD_contains: [Arbitrum_BigDecimal!]
  inputTokenBalancesUSD_contains_nocase: [Arbitrum_BigDecimal!]
  inputTokenBalancesUSD_not_contains: [Arbitrum_BigDecimal!]
  inputTokenBalancesUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  inputTokenWeights: [Arbitrum_BigDecimal!]
  inputTokenWeights_not: [Arbitrum_BigDecimal!]
  inputTokenWeights_contains: [Arbitrum_BigDecimal!]
  inputTokenWeights_contains_nocase: [Arbitrum_BigDecimal!]
  inputTokenWeights_not_contains: [Arbitrum_BigDecimal!]
  inputTokenWeights_not_contains_nocase: [Arbitrum_BigDecimal!]
  stakedOutputTokenAmount: BigInt
  stakedOutputTokenAmount_not: BigInt
  stakedOutputTokenAmount_gt: BigInt
  stakedOutputTokenAmount_lt: BigInt
  stakedOutputTokenAmount_gte: BigInt
  stakedOutputTokenAmount_lte: BigInt
  stakedOutputTokenAmount_in: [BigInt!]
  stakedOutputTokenAmount_not_in: [BigInt!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [Arbitrum_BigDecimal!]
  rewardTokenEmissionsUSD_not: [Arbitrum_BigDecimal!]
  rewardTokenEmissionsUSD_contains: [Arbitrum_BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [Arbitrum_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [Arbitrum_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  cumulativeDepositCount: Int
  cumulativeDepositCount_not: Int
  cumulativeDepositCount_gt: Int
  cumulativeDepositCount_lt: Int
  cumulativeDepositCount_gte: Int
  cumulativeDepositCount_lte: Int
  cumulativeDepositCount_in: [Int!]
  cumulativeDepositCount_not_in: [Int!]
  dailyDepositCount: Int
  dailyDepositCount_not: Int
  dailyDepositCount_gt: Int
  dailyDepositCount_lt: Int
  dailyDepositCount_gte: Int
  dailyDepositCount_lte: Int
  dailyDepositCount_in: [Int!]
  dailyDepositCount_not_in: [Int!]
  cumulativeWithdrawCount: Int
  cumulativeWithdrawCount_not: Int
  cumulativeWithdrawCount_gt: Int
  cumulativeWithdrawCount_lt: Int
  cumulativeWithdrawCount_gte: Int
  cumulativeWithdrawCount_lte: Int
  cumulativeWithdrawCount_in: [Int!]
  cumulativeWithdrawCount_not_in: [Int!]
  dailyWithdrawCount: Int
  dailyWithdrawCount_not: Int
  dailyWithdrawCount_gt: Int
  dailyWithdrawCount_lt: Int
  dailyWithdrawCount_gte: Int
  dailyWithdrawCount_lte: Int
  dailyWithdrawCount_in: [Int!]
  dailyWithdrawCount_not_in: [Int!]
  cumulativeSwapCount: Int
  cumulativeSwapCount_not: Int
  cumulativeSwapCount_gt: Int
  cumulativeSwapCount_lt: Int
  cumulativeSwapCount_gte: Int
  cumulativeSwapCount_lte: Int
  cumulativeSwapCount_in: [Int!]
  cumulativeSwapCount_not_in: [Int!]
  dailySwapCount: Int
  dailySwapCount_not: Int
  dailySwapCount_gt: Int
  dailySwapCount_lt: Int
  dailySwapCount_gte: Int
  dailySwapCount_lte: Int
  dailySwapCount_in: [Int!]
  dailySwapCount_not_in: [Int!]
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_LiquidityPoolDailySnapshot_filter]
  or: [Arbitrum_LiquidityPoolDailySnapshot_filter]
}

enum Arbitrum_LiquidityPoolDailySnapshot_orderBy {
  id
  day
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  tick
  totalValueLockedUSD
  totalLiquidity
  totalLiquidityUSD
  activeLiquidity
  activeLiquidityUSD
  uncollectedProtocolSideTokenAmounts
  uncollectedProtocolSideValuesUSD
  uncollectedSupplySideTokenAmounts
  uncollectedSupplySideValuesUSD
  cumulativeSupplySideRevenueUSD
  dailySupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  dailyProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  dailyTotalRevenueUSD
  cumulativeVolumeUSD
  dailyVolumeUSD
  cumulativeVolumeByTokenAmount
  dailyVolumeByTokenAmount
  cumulativeVolumeByTokenUSD
  dailyVolumeByTokenUSD
  inputTokenBalances
  inputTokenBalancesUSD
  inputTokenWeights
  stakedOutputTokenAmount
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  cumulativeDepositCount
  dailyDepositCount
  cumulativeWithdrawCount
  dailyWithdrawCount
  cumulativeSwapCount
  dailySwapCount
  positionCount
  openPositionCount
  closedPositionCount
  timestamp
  blockNumber
}

type Arbitrum_LiquidityPoolFee {
  """ { Fee type }-{ Pool address } """
  id: Arbitrum_Bytes!
  """ Fee as a percentage of the trade (swap) amount. Does not always apply 
  """
  feePercentage: Arbitrum_BigDecimal
  """ Type of fee this pool uses """
  feeType: Arbitrum_LiquidityPoolFeeType!
}

enum Arbitrum_LiquidityPoolFeeType {
  """ Total fixed fee paid by the user per trade, as a percentage of the traded amount. e.g. 0.3% for Uniswap v2, 0.3% for Sushiswap, 0.04% for Curve v1. 
  """
  FIXED_TRADING_FEE
  """ Some protocols use tiered fees instead of fixed fee (e.g. DYDX, DODO). Set `feePercentage` as 0 but handle the tiered fees in the mapping code. 
  """
  TIERED_TRADING_FEE
  """ Some protocols use dynamic fees instead of fixed fee (e.g. Balancer v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. 
  """
  DYNAMIC_TRADING_FEE
  """ Fixed fee that's paid to the LP, as a percentage of the traded amount. e.g. 0.25% for Sushiswap, 0.02% for Curve v1. 
  """
  FIXED_LP_FEE
  """ Some protocols use dynamic LP fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. 
  """
  DYNAMIC_LP_FEE
  """ Fixed fee that's paid to the protocol, as a percentage of the traded amount. e.g. 0.05% for Sushiswap, 0.02% for Curve v1. 
  """
  FIXED_PROTOCOL_FEE
  """ Some protocols use dynamic protocol fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. 
  """
  DYNAMIC_PROTOCOL_FEE
  """ One-time fee charged by the protocol during deposit, in percentages of the deposit token 
  """
  DEPOSIT_FEE
  """ One-time fee charged by the protocol (e.g. Bancor v3) during withdrawal, in percentages of the withdrawal token 
  """
  WITHDRAWAL_FEE
}

input Arbitrum_LiquidityPoolFee_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  feePercentage: Arbitrum_BigDecimal
  feePercentage_not: Arbitrum_BigDecimal
  feePercentage_gt: Arbitrum_BigDecimal
  feePercentage_lt: Arbitrum_BigDecimal
  feePercentage_gte: Arbitrum_BigDecimal
  feePercentage_lte: Arbitrum_BigDecimal
  feePercentage_in: [Arbitrum_BigDecimal!]
  feePercentage_not_in: [Arbitrum_BigDecimal!]
  feeType: Arbitrum_LiquidityPoolFeeType
  feeType_not: Arbitrum_LiquidityPoolFeeType
  feeType_in: [Arbitrum_LiquidityPoolFeeType!]
  feeType_not_in: [Arbitrum_LiquidityPoolFeeType!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_LiquidityPoolFee_filter]
  or: [Arbitrum_LiquidityPoolFee_filter]
}

enum Arbitrum_LiquidityPoolFee_orderBy {
  id
  feePercentage
  feeType
}

type Arbitrum_LiquidityPoolHourlySnapshot {
  """ { Smart contract address of the pool }-{ # of hours since Unix epoch time } 
  """
  id: Arbitrum_Bytes!
  """ Number of hours since Unix epoch time """
  hour: Int!
  """ The protocol this snapshot belongs to """
  protocol: Arbitrum_DexAmmProtocol!
  """ The pool this snapshot belongs to """
  pool: Arbitrum_LiquidityPool!
  """ Current tick representing the price of token0/token1 """
  tick: BigInt
  """ Current TVL (Total Value Locked) of this pool """
  totalValueLockedUSD: Arbitrum_BigDecimal!
  """ The sum of all active and non-active liquidity for this pool. """
  totalLiquidity: BigInt!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Arbitrum_BigDecimal!
  """ All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidity: BigInt!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Arbitrum_BigDecimal!
  """ All protocol-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  """ All protocol-side value locking in USD that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideValuesUSD: [Arbitrum_BigDecimal!]!
  """ All supply-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  """ All supply-side value locked in USD that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideValuesUSD: [Arbitrum_BigDecimal!]!
  """ All revenue generated by the liquidity pool, accrued to the supply side. 
  """
  cumulativeSupplySideRevenueUSD: Arbitrum_BigDecimal!
  """ Hourly revenue generated by the liquidity pool, accrued to the supply side. 
  """
  hourlySupplySideRevenueUSD: Arbitrum_BigDecimal!
  """ All revenue generated by the liquidity pool, accrued to the protocol. 
  """
  cumulativeProtocolSideRevenueUSD: Arbitrum_BigDecimal!
  """ Hourly revenue generated by the liquidity pool, accrued to the protocol. 
  """
  hourlyProtocolSideRevenueUSD: Arbitrum_BigDecimal!
  """ All revenue generated by the liquidity pool. """
  cumulativeTotalRevenueUSD: Arbitrum_BigDecimal!
  """ Hourly revenue generated by the liquidity pool. """
  hourlyTotalRevenueUSD: Arbitrum_BigDecimal!
  """ All historical trade volume occurred in this pool, in USD """
  cumulativeVolumeUSD: Arbitrum_BigDecimal!
  """ All trade volume occurred in a given hour, in USD """
  hourlyVolumeUSD: Arbitrum_BigDecimal!
  """ All trade volume, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenAmount: [BigInt!]!
  """ All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  hourlyVolumeByTokenAmount: [BigInt!]!
  """ All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenUSD: [Arbitrum_BigDecimal!]!
  """ All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  hourlyVolumeByTokenUSD: [Arbitrum_BigDecimal!]!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalancesUSD: [Arbitrum_BigDecimal!]!
  """ Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool 
  """
  inputTokenWeights: [Arbitrum_BigDecimal!]!
  """ Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. 
  """
  stakedOutputTokenAmount: BigInt
  """ Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [Arbitrum_BigDecimal!]
  """ Total number of deposits (add liquidity) """
  cumulativeDepositCount: Int!
  """ Total number of deposits (add liquidity) in an hour """
  hourlyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) """
  cumulativeWithdrawCount: Int!
  """ Total number of withdrawals (remove liquidity) in an hour """
  hourlyWithdrawCount: Int!
  """ Total number of trades (swaps) """
  cumulativeSwapCount: Int!
  """ Total number of trades (swaps) in an hour """
  hourlySwapCount: Int!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Arbitrum_LiquidityPoolHourlySnapshot_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  hour: Int
  hour_not: Int
  hour_gt: Int
  hour_lt: Int
  hour_gte: Int
  hour_lte: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Arbitrum_DexAmmProtocol_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Arbitrum_LiquidityPool_filter
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  totalValueLockedUSD: Arbitrum_BigDecimal
  totalValueLockedUSD_not: Arbitrum_BigDecimal
  totalValueLockedUSD_gt: Arbitrum_BigDecimal
  totalValueLockedUSD_lt: Arbitrum_BigDecimal
  totalValueLockedUSD_gte: Arbitrum_BigDecimal
  totalValueLockedUSD_lte: Arbitrum_BigDecimal
  totalValueLockedUSD_in: [Arbitrum_BigDecimal!]
  totalValueLockedUSD_not_in: [Arbitrum_BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalLiquidityUSD: Arbitrum_BigDecimal
  totalLiquidityUSD_not: Arbitrum_BigDecimal
  totalLiquidityUSD_gt: Arbitrum_BigDecimal
  totalLiquidityUSD_lt: Arbitrum_BigDecimal
  totalLiquidityUSD_gte: Arbitrum_BigDecimal
  totalLiquidityUSD_lte: Arbitrum_BigDecimal
  totalLiquidityUSD_in: [Arbitrum_BigDecimal!]
  totalLiquidityUSD_not_in: [Arbitrum_BigDecimal!]
  activeLiquidity: BigInt
  activeLiquidity_not: BigInt
  activeLiquidity_gt: BigInt
  activeLiquidity_lt: BigInt
  activeLiquidity_gte: BigInt
  activeLiquidity_lte: BigInt
  activeLiquidity_in: [BigInt!]
  activeLiquidity_not_in: [BigInt!]
  activeLiquidityUSD: Arbitrum_BigDecimal
  activeLiquidityUSD_not: Arbitrum_BigDecimal
  activeLiquidityUSD_gt: Arbitrum_BigDecimal
  activeLiquidityUSD_lt: Arbitrum_BigDecimal
  activeLiquidityUSD_gte: Arbitrum_BigDecimal
  activeLiquidityUSD_lte: Arbitrum_BigDecimal
  activeLiquidityUSD_in: [Arbitrum_BigDecimal!]
  activeLiquidityUSD_not_in: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideTokenAmounts: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedProtocolSideValuesUSD: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains_nocase: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  uncollectedSupplySideTokenAmounts: [BigInt!]
  uncollectedSupplySideTokenAmounts_not: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedSupplySideValuesUSD: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains_nocase: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  hourlySupplySideRevenueUSD: Arbitrum_BigDecimal
  hourlySupplySideRevenueUSD_not: Arbitrum_BigDecimal
  hourlySupplySideRevenueUSD_gt: Arbitrum_BigDecimal
  hourlySupplySideRevenueUSD_lt: Arbitrum_BigDecimal
  hourlySupplySideRevenueUSD_gte: Arbitrum_BigDecimal
  hourlySupplySideRevenueUSD_lte: Arbitrum_BigDecimal
  hourlySupplySideRevenueUSD_in: [Arbitrum_BigDecimal!]
  hourlySupplySideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  hourlyProtocolSideRevenueUSD: Arbitrum_BigDecimal
  hourlyProtocolSideRevenueUSD_not: Arbitrum_BigDecimal
  hourlyProtocolSideRevenueUSD_gt: Arbitrum_BigDecimal
  hourlyProtocolSideRevenueUSD_lt: Arbitrum_BigDecimal
  hourlyProtocolSideRevenueUSD_gte: Arbitrum_BigDecimal
  hourlyProtocolSideRevenueUSD_lte: Arbitrum_BigDecimal
  hourlyProtocolSideRevenueUSD_in: [Arbitrum_BigDecimal!]
  hourlyProtocolSideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeTotalRevenueUSD: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  hourlyTotalRevenueUSD: Arbitrum_BigDecimal
  hourlyTotalRevenueUSD_not: Arbitrum_BigDecimal
  hourlyTotalRevenueUSD_gt: Arbitrum_BigDecimal
  hourlyTotalRevenueUSD_lt: Arbitrum_BigDecimal
  hourlyTotalRevenueUSD_gte: Arbitrum_BigDecimal
  hourlyTotalRevenueUSD_lte: Arbitrum_BigDecimal
  hourlyTotalRevenueUSD_in: [Arbitrum_BigDecimal!]
  hourlyTotalRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeVolumeUSD: Arbitrum_BigDecimal
  cumulativeVolumeUSD_not: Arbitrum_BigDecimal
  cumulativeVolumeUSD_gt: Arbitrum_BigDecimal
  cumulativeVolumeUSD_lt: Arbitrum_BigDecimal
  cumulativeVolumeUSD_gte: Arbitrum_BigDecimal
  cumulativeVolumeUSD_lte: Arbitrum_BigDecimal
  cumulativeVolumeUSD_in: [Arbitrum_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Arbitrum_BigDecimal!]
  hourlyVolumeUSD: Arbitrum_BigDecimal
  hourlyVolumeUSD_not: Arbitrum_BigDecimal
  hourlyVolumeUSD_gt: Arbitrum_BigDecimal
  hourlyVolumeUSD_lt: Arbitrum_BigDecimal
  hourlyVolumeUSD_gte: Arbitrum_BigDecimal
  hourlyVolumeUSD_lte: Arbitrum_BigDecimal
  hourlyVolumeUSD_in: [Arbitrum_BigDecimal!]
  hourlyVolumeUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenAmount: [BigInt!]
  cumulativeVolumeByTokenAmount_not: [BigInt!]
  cumulativeVolumeByTokenAmount_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  hourlyVolumeByTokenAmount: [BigInt!]
  hourlyVolumeByTokenAmount_not: [BigInt!]
  hourlyVolumeByTokenAmount_contains: [BigInt!]
  hourlyVolumeByTokenAmount_contains_nocase: [BigInt!]
  hourlyVolumeByTokenAmount_not_contains: [BigInt!]
  hourlyVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenUSD: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains_nocase: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  hourlyVolumeByTokenUSD: [Arbitrum_BigDecimal!]
  hourlyVolumeByTokenUSD_not: [Arbitrum_BigDecimal!]
  hourlyVolumeByTokenUSD_contains: [Arbitrum_BigDecimal!]
  hourlyVolumeByTokenUSD_contains_nocase: [Arbitrum_BigDecimal!]
  hourlyVolumeByTokenUSD_not_contains: [Arbitrum_BigDecimal!]
  hourlyVolumeByTokenUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenBalancesUSD: [Arbitrum_BigDecimal!]
  inputTokenBalancesUSD_not: [Arbitrum_BigDecimal!]
  inputTokenBalancesUSD_contains: [Arbitrum_BigDecimal!]
  inputTokenBalancesUSD_contains_nocase: [Arbitrum_BigDecimal!]
  inputTokenBalancesUSD_not_contains: [Arbitrum_BigDecimal!]
  inputTokenBalancesUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  inputTokenWeights: [Arbitrum_BigDecimal!]
  inputTokenWeights_not: [Arbitrum_BigDecimal!]
  inputTokenWeights_contains: [Arbitrum_BigDecimal!]
  inputTokenWeights_contains_nocase: [Arbitrum_BigDecimal!]
  inputTokenWeights_not_contains: [Arbitrum_BigDecimal!]
  inputTokenWeights_not_contains_nocase: [Arbitrum_BigDecimal!]
  stakedOutputTokenAmount: BigInt
  stakedOutputTokenAmount_not: BigInt
  stakedOutputTokenAmount_gt: BigInt
  stakedOutputTokenAmount_lt: BigInt
  stakedOutputTokenAmount_gte: BigInt
  stakedOutputTokenAmount_lte: BigInt
  stakedOutputTokenAmount_in: [BigInt!]
  stakedOutputTokenAmount_not_in: [BigInt!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [Arbitrum_BigDecimal!]
  rewardTokenEmissionsUSD_not: [Arbitrum_BigDecimal!]
  rewardTokenEmissionsUSD_contains: [Arbitrum_BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [Arbitrum_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [Arbitrum_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  cumulativeDepositCount: Int
  cumulativeDepositCount_not: Int
  cumulativeDepositCount_gt: Int
  cumulativeDepositCount_lt: Int
  cumulativeDepositCount_gte: Int
  cumulativeDepositCount_lte: Int
  cumulativeDepositCount_in: [Int!]
  cumulativeDepositCount_not_in: [Int!]
  hourlyDepositCount: Int
  hourlyDepositCount_not: Int
  hourlyDepositCount_gt: Int
  hourlyDepositCount_lt: Int
  hourlyDepositCount_gte: Int
  hourlyDepositCount_lte: Int
  hourlyDepositCount_in: [Int!]
  hourlyDepositCount_not_in: [Int!]
  cumulativeWithdrawCount: Int
  cumulativeWithdrawCount_not: Int
  cumulativeWithdrawCount_gt: Int
  cumulativeWithdrawCount_lt: Int
  cumulativeWithdrawCount_gte: Int
  cumulativeWithdrawCount_lte: Int
  cumulativeWithdrawCount_in: [Int!]
  cumulativeWithdrawCount_not_in: [Int!]
  hourlyWithdrawCount: Int
  hourlyWithdrawCount_not: Int
  hourlyWithdrawCount_gt: Int
  hourlyWithdrawCount_lt: Int
  hourlyWithdrawCount_gte: Int
  hourlyWithdrawCount_lte: Int
  hourlyWithdrawCount_in: [Int!]
  hourlyWithdrawCount_not_in: [Int!]
  cumulativeSwapCount: Int
  cumulativeSwapCount_not: Int
  cumulativeSwapCount_gt: Int
  cumulativeSwapCount_lt: Int
  cumulativeSwapCount_gte: Int
  cumulativeSwapCount_lte: Int
  cumulativeSwapCount_in: [Int!]
  cumulativeSwapCount_not_in: [Int!]
  hourlySwapCount: Int
  hourlySwapCount_not: Int
  hourlySwapCount_gt: Int
  hourlySwapCount_lt: Int
  hourlySwapCount_gte: Int
  hourlySwapCount_lte: Int
  hourlySwapCount_in: [Int!]
  hourlySwapCount_not_in: [Int!]
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_LiquidityPoolHourlySnapshot_filter]
  or: [Arbitrum_LiquidityPoolHourlySnapshot_filter]
}

enum Arbitrum_LiquidityPoolHourlySnapshot_orderBy {
  id
  hour
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  tick
  totalValueLockedUSD
  totalLiquidity
  totalLiquidityUSD
  activeLiquidity
  activeLiquidityUSD
  uncollectedProtocolSideTokenAmounts
  uncollectedProtocolSideValuesUSD
  uncollectedSupplySideTokenAmounts
  uncollectedSupplySideValuesUSD
  cumulativeSupplySideRevenueUSD
  hourlySupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  hourlyProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  hourlyTotalRevenueUSD
  cumulativeVolumeUSD
  hourlyVolumeUSD
  cumulativeVolumeByTokenAmount
  hourlyVolumeByTokenAmount
  cumulativeVolumeByTokenUSD
  hourlyVolumeByTokenUSD
  inputTokenBalances
  inputTokenBalancesUSD
  inputTokenWeights
  stakedOutputTokenAmount
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  cumulativeDepositCount
  hourlyDepositCount
  cumulativeWithdrawCount
  hourlyWithdrawCount
  cumulativeSwapCount
  hourlySwapCount
  positionCount
  openPositionCount
  closedPositionCount
  timestamp
  blockNumber
}

input Arbitrum_LiquidityPool_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Arbitrum_DexAmmProtocol_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  liquidityToken: String
  liquidityToken_not: String
  liquidityToken_gt: String
  liquidityToken_lt: String
  liquidityToken_gte: String
  liquidityToken_lte: String
  liquidityToken_in: [String!]
  liquidityToken_not_in: [String!]
  liquidityToken_contains: String
  liquidityToken_contains_nocase: String
  liquidityToken_not_contains: String
  liquidityToken_not_contains_nocase: String
  liquidityToken_starts_with: String
  liquidityToken_starts_with_nocase: String
  liquidityToken_not_starts_with: String
  liquidityToken_not_starts_with_nocase: String
  liquidityToken_ends_with: String
  liquidityToken_ends_with_nocase: String
  liquidityToken_not_ends_with: String
  liquidityToken_not_ends_with_nocase: String
  liquidityToken_: Arbitrum_Token_filter
  liquidityTokenType: Arbitrum_TokenType
  liquidityTokenType_not: Arbitrum_TokenType
  liquidityTokenType_in: [Arbitrum_TokenType!]
  liquidityTokenType_not_in: [Arbitrum_TokenType!]
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Arbitrum_Token_filter
  rewardTokens: [String!]
  rewardTokens_not: [String!]
  rewardTokens_contains: [String!]
  rewardTokens_contains_nocase: [String!]
  rewardTokens_not_contains: [String!]
  rewardTokens_not_contains_nocase: [String!]
  rewardTokens_: Arbitrum_RewardToken_filter
  fees: [String!]
  fees_not: [String!]
  fees_contains: [String!]
  fees_contains_nocase: [String!]
  fees_not_contains: [String!]
  fees_not_contains_nocase: [String!]
  fees_: Arbitrum_LiquidityPoolFee_filter
  isSingleSided: Boolean
  isSingleSided_not: Boolean
  isSingleSided_in: [Boolean!]
  isSingleSided_not_in: [Boolean!]
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  totalValueLockedUSD: Arbitrum_BigDecimal
  totalValueLockedUSD_not: Arbitrum_BigDecimal
  totalValueLockedUSD_gt: Arbitrum_BigDecimal
  totalValueLockedUSD_lt: Arbitrum_BigDecimal
  totalValueLockedUSD_gte: Arbitrum_BigDecimal
  totalValueLockedUSD_lte: Arbitrum_BigDecimal
  totalValueLockedUSD_in: [Arbitrum_BigDecimal!]
  totalValueLockedUSD_not_in: [Arbitrum_BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalLiquidityUSD: Arbitrum_BigDecimal
  totalLiquidityUSD_not: Arbitrum_BigDecimal
  totalLiquidityUSD_gt: Arbitrum_BigDecimal
  totalLiquidityUSD_lt: Arbitrum_BigDecimal
  totalLiquidityUSD_gte: Arbitrum_BigDecimal
  totalLiquidityUSD_lte: Arbitrum_BigDecimal
  totalLiquidityUSD_in: [Arbitrum_BigDecimal!]
  totalLiquidityUSD_not_in: [Arbitrum_BigDecimal!]
  activeLiquidity: BigInt
  activeLiquidity_not: BigInt
  activeLiquidity_gt: BigInt
  activeLiquidity_lt: BigInt
  activeLiquidity_gte: BigInt
  activeLiquidity_lte: BigInt
  activeLiquidity_in: [BigInt!]
  activeLiquidity_not_in: [BigInt!]
  activeLiquidityUSD: Arbitrum_BigDecimal
  activeLiquidityUSD_not: Arbitrum_BigDecimal
  activeLiquidityUSD_gt: Arbitrum_BigDecimal
  activeLiquidityUSD_lt: Arbitrum_BigDecimal
  activeLiquidityUSD_gte: Arbitrum_BigDecimal
  activeLiquidityUSD_lte: Arbitrum_BigDecimal
  activeLiquidityUSD_in: [Arbitrum_BigDecimal!]
  activeLiquidityUSD_not_in: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideTokenAmounts: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedProtocolSideValuesUSD: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains_nocase: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains: [Arbitrum_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  uncollectedSupplySideTokenAmounts: [BigInt!]
  uncollectedSupplySideTokenAmounts_not: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedSupplySideValuesUSD: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains_nocase: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains: [Arbitrum_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeTotalRevenueUSD: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenAmount: [BigInt!]
  cumulativeVolumeByTokenAmount_not: [BigInt!]
  cumulativeVolumeByTokenAmount_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenUSD: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains_nocase: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains: [Arbitrum_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  cumulativeVolumeUSD: Arbitrum_BigDecimal
  cumulativeVolumeUSD_not: Arbitrum_BigDecimal
  cumulativeVolumeUSD_gt: Arbitrum_BigDecimal
  cumulativeVolumeUSD_lt: Arbitrum_BigDecimal
  cumulativeVolumeUSD_gte: Arbitrum_BigDecimal
  cumulativeVolumeUSD_lte: Arbitrum_BigDecimal
  cumulativeVolumeUSD_in: [Arbitrum_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Arbitrum_BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenBalancesUSD: [Arbitrum_BigDecimal!]
  inputTokenBalancesUSD_not: [Arbitrum_BigDecimal!]
  inputTokenBalancesUSD_contains: [Arbitrum_BigDecimal!]
  inputTokenBalancesUSD_contains_nocase: [Arbitrum_BigDecimal!]
  inputTokenBalancesUSD_not_contains: [Arbitrum_BigDecimal!]
  inputTokenBalancesUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  inputTokenWeights: [Arbitrum_BigDecimal!]
  inputTokenWeights_not: [Arbitrum_BigDecimal!]
  inputTokenWeights_contains: [Arbitrum_BigDecimal!]
  inputTokenWeights_contains_nocase: [Arbitrum_BigDecimal!]
  inputTokenWeights_not_contains: [Arbitrum_BigDecimal!]
  inputTokenWeights_not_contains_nocase: [Arbitrum_BigDecimal!]
  stakedOutputTokenAmount: BigInt
  stakedOutputTokenAmount_not: BigInt
  stakedOutputTokenAmount_gt: BigInt
  stakedOutputTokenAmount_lt: BigInt
  stakedOutputTokenAmount_gte: BigInt
  stakedOutputTokenAmount_lte: BigInt
  stakedOutputTokenAmount_in: [BigInt!]
  stakedOutputTokenAmount_not_in: [BigInt!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [Arbitrum_BigDecimal!]
  rewardTokenEmissionsUSD_not: [Arbitrum_BigDecimal!]
  rewardTokenEmissionsUSD_contains: [Arbitrum_BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [Arbitrum_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [Arbitrum_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [Arbitrum_BigDecimal!]
  cumulativeDepositCount: Int
  cumulativeDepositCount_not: Int
  cumulativeDepositCount_gt: Int
  cumulativeDepositCount_lt: Int
  cumulativeDepositCount_gte: Int
  cumulativeDepositCount_lte: Int
  cumulativeDepositCount_in: [Int!]
  cumulativeDepositCount_not_in: [Int!]
  cumulativeWithdrawCount: Int
  cumulativeWithdrawCount_not: Int
  cumulativeWithdrawCount_gt: Int
  cumulativeWithdrawCount_lt: Int
  cumulativeWithdrawCount_gte: Int
  cumulativeWithdrawCount_lte: Int
  cumulativeWithdrawCount_in: [Int!]
  cumulativeWithdrawCount_not_in: [Int!]
  cumulativeSwapCount: Int
  cumulativeSwapCount_not: Int
  cumulativeSwapCount_gt: Int
  cumulativeSwapCount_lt: Int
  cumulativeSwapCount_gte: Int
  cumulativeSwapCount_lte: Int
  cumulativeSwapCount_in: [Int!]
  cumulativeSwapCount_not_in: [Int!]
  positions_: Arbitrum_Position_filter
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  lastSnapshotDayID: Int
  lastSnapshotDayID_not: Int
  lastSnapshotDayID_gt: Int
  lastSnapshotDayID_lt: Int
  lastSnapshotDayID_gte: Int
  lastSnapshotDayID_lte: Int
  lastSnapshotDayID_in: [Int!]
  lastSnapshotDayID_not_in: [Int!]
  lastSnapshotHourID: Int
  lastSnapshotHourID_not: Int
  lastSnapshotHourID_gt: Int
  lastSnapshotHourID_lt: Int
  lastSnapshotHourID_gte: Int
  lastSnapshotHourID_lte: Int
  lastSnapshotHourID_in: [Int!]
  lastSnapshotHourID_not_in: [Int!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  dailySnapshots_: Arbitrum_LiquidityPoolDailySnapshot_filter
  hourlySnapshots_: Arbitrum_LiquidityPoolHourlySnapshot_filter
  deposits_: Arbitrum_Deposit_filter
  withdraws_: Arbitrum_Withdraw_filter
  swaps_: Arbitrum_Swap_filter
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_LiquidityPool_filter]
  or: [Arbitrum_LiquidityPool_filter]
}

enum Arbitrum_LiquidityPool_orderBy {
  id
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  name
  symbol
  liquidityToken
  liquidityToken__id
  liquidityToken__name
  liquidityToken__symbol
  liquidityToken__decimals
  liquidityToken__lastPriceUSD
  liquidityToken__lastPriceBlockNumber
  liquidityToken___lastPricePool
  liquidityToken___totalSupply
  liquidityToken___totalValueLockedUSD
  liquidityToken___largePriceChangeBuffer
  liquidityToken___largeTVLImpactBuffer
  liquidityTokenType
  inputTokens
  rewardTokens
  fees
  isSingleSided
  createdTimestamp
  createdBlockNumber
  tick
  totalValueLockedUSD
  totalLiquidity
  totalLiquidityUSD
  activeLiquidity
  activeLiquidityUSD
  uncollectedProtocolSideTokenAmounts
  uncollectedProtocolSideValuesUSD
  uncollectedSupplySideTokenAmounts
  uncollectedSupplySideValuesUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  cumulativeVolumeByTokenAmount
  cumulativeVolumeByTokenUSD
  cumulativeVolumeUSD
  inputTokenBalances
  inputTokenBalancesUSD
  inputTokenWeights
  stakedOutputTokenAmount
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  cumulativeDepositCount
  cumulativeWithdrawCount
  cumulativeSwapCount
  positions
  positionCount
  openPositionCount
  closedPositionCount
  lastSnapshotDayID
  lastSnapshotHourID
  lastUpdateTimestamp
  lastUpdateBlockNumber
  dailySnapshots
  hourlySnapshots
  deposits
  withdraws
  swaps
}

enum Arbitrum_Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BASE
  BOBA
  BSC
  CELO
  COSMOS
  CRONOS
  MAINNET
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC
  XDAI
}

"""Defines the order direction, either ascending or descending"""
enum Arbitrum_OrderDirection {
  asc
  desc
}

type Arbitrum_Position {
  """ { Account address }-{ Market address }-{ Count } """
  id: Arbitrum_Bytes!
  """ Account that owns this position """
  account: Arbitrum_Account!
  """ The liquidity pool in which this position was opened """
  pool: Arbitrum_LiquidityPool!
  """ The hash of the transaction that opened this position """
  hashOpened: Arbitrum_Bytes!
  """ The hash of the transaction that closed this position """
  hashClosed: Arbitrum_Bytes
  """ Block number of when the position was opened """
  blockNumberOpened: BigInt!
  """ Timestamp when the position was opened """
  timestampOpened: BigInt!
  """ Block number of when the position was closed (0 if still open) """
  blockNumberClosed: BigInt
  """ Timestamp when the position was closed (0 if still open) """
  timestampClosed: BigInt
  """ lower tick of the position """
  tickLower: Arbitrum_Tick
  """ upper tick of the position """
  tickUpper: Arbitrum_Tick
  """ Token that is to represent ownership of liquidity """
  liquidityToken: Arbitrum_Token
  """ Type of token used to track liquidity """
  liquidityTokenType: Arbitrum_TokenType
  """ total position liquidity """
  liquidity: BigInt!
  """ total position liquidity in USD """
  liquidityUSD: Arbitrum_BigDecimal!
  """ amount of tokens ever deposited to position """
  cumulativeDepositTokenAmounts: [BigInt!]!
  """ amount of tokens in USD deposited to position """
  cumulativeDepositUSD: Arbitrum_BigDecimal!
  """ amount of tokens ever withdrawn from position (without fees) """
  cumulativeWithdrawTokenAmounts: [BigInt!]!
  """ amount of tokens in USD withdrawn from position (without fees) """
  cumulativeWithdrawUSD: Arbitrum_BigDecimal!
  """ Total reward token accumulated under this position, in USD """
  cumulativeRewardUSD: [BigInt!]
  """ Number of deposits related to this position """
  depositCount: Int!
  """ All deposit events of this position """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_Deposit_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_Deposit_filter): [Arbitrum_Deposit!]!
  """ Number of withdrawals related to this position """
  withdrawCount: Int!
  """ All withdraw events of this position """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_Withdraw_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_Withdraw_filter): [Arbitrum_Withdraw!]!
  """ Position daily snapshots for open positions """
  snapshots(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_PositionSnapshot_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_PositionSnapshot_filter): [Arbitrum_PositionSnapshot!]!
}

type Arbitrum_PositionSnapshot {
  """ { Position ID }-{ Transaction hash }-{ Log index } """
  id: Arbitrum_Bytes!
  """ Transaction hash of the transaction that triggered this snapshot """
  hash: Arbitrum_Bytes!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Nonce of the transaction that triggered this snapshot """
  nonce: BigInt!
  """ Position of this snapshot """
  position: Arbitrum_Position!
  """ Type of token used to track liquidity """
  liquidityTokenType: Arbitrum_TokenType
  """ total position liquidity """
  liquidity: BigInt
  """ total position liquidity in USD """
  liquidityUSD: Arbitrum_BigDecimal
  """ amount of tokens ever deposited to position """
  cumulativeDepositTokenAmounts: [BigInt!]!
  """ amount of tokens in USD deposited to position """
  cumulativeDepositUSD: Arbitrum_BigDecimal!
  """ amount of tokens ever withdrawn from position (without fees) """
  cumulativeWithdrawTokenAmounts: [BigInt!]!
  """ amount of tokens in USD withdrawn from position (without fees) """
  cumulativeWithdrawUSD: Arbitrum_BigDecimal!
  """ Total reward token accumulated under this position, in native amounts 
  """
  cumulativeRewardTokenAmounts: [BigInt!]
  """ Total reward token accumulated under this position, in USD """
  cumulativeRewardUSD: [BigInt!]
  """ Number of deposits related to this position """
  depositCount: Int!
  """ Number of withdrawals related to this position """
  withdrawCount: Int!
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
}

input Arbitrum_PositionSnapshot_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  hash: Arbitrum_Bytes
  hash_not: Arbitrum_Bytes
  hash_gt: Arbitrum_Bytes
  hash_lt: Arbitrum_Bytes
  hash_gte: Arbitrum_Bytes
  hash_lte: Arbitrum_Bytes
  hash_in: [Arbitrum_Bytes!]
  hash_not_in: [Arbitrum_Bytes!]
  hash_contains: Arbitrum_Bytes
  hash_not_contains: Arbitrum_Bytes
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Arbitrum_Position_filter
  liquidityTokenType: Arbitrum_TokenType
  liquidityTokenType_not: Arbitrum_TokenType
  liquidityTokenType_in: [Arbitrum_TokenType!]
  liquidityTokenType_not_in: [Arbitrum_TokenType!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  liquidityUSD: Arbitrum_BigDecimal
  liquidityUSD_not: Arbitrum_BigDecimal
  liquidityUSD_gt: Arbitrum_BigDecimal
  liquidityUSD_lt: Arbitrum_BigDecimal
  liquidityUSD_gte: Arbitrum_BigDecimal
  liquidityUSD_lte: Arbitrum_BigDecimal
  liquidityUSD_in: [Arbitrum_BigDecimal!]
  liquidityUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeDepositTokenAmounts: [BigInt!]
  cumulativeDepositTokenAmounts_not: [BigInt!]
  cumulativeDepositTokenAmounts_contains: [BigInt!]
  cumulativeDepositTokenAmounts_contains_nocase: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeDepositUSD: Arbitrum_BigDecimal
  cumulativeDepositUSD_not: Arbitrum_BigDecimal
  cumulativeDepositUSD_gt: Arbitrum_BigDecimal
  cumulativeDepositUSD_lt: Arbitrum_BigDecimal
  cumulativeDepositUSD_gte: Arbitrum_BigDecimal
  cumulativeDepositUSD_lte: Arbitrum_BigDecimal
  cumulativeDepositUSD_in: [Arbitrum_BigDecimal!]
  cumulativeDepositUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeWithdrawTokenAmounts: [BigInt!]
  cumulativeWithdrawTokenAmounts_not: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains_nocase: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeWithdrawUSD: Arbitrum_BigDecimal
  cumulativeWithdrawUSD_not: Arbitrum_BigDecimal
  cumulativeWithdrawUSD_gt: Arbitrum_BigDecimal
  cumulativeWithdrawUSD_lt: Arbitrum_BigDecimal
  cumulativeWithdrawUSD_gte: Arbitrum_BigDecimal
  cumulativeWithdrawUSD_lte: Arbitrum_BigDecimal
  cumulativeWithdrawUSD_in: [Arbitrum_BigDecimal!]
  cumulativeWithdrawUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeRewardTokenAmounts: [BigInt!]
  cumulativeRewardTokenAmounts_not: [BigInt!]
  cumulativeRewardTokenAmounts_contains: [BigInt!]
  cumulativeRewardTokenAmounts_contains_nocase: [BigInt!]
  cumulativeRewardTokenAmounts_not_contains: [BigInt!]
  cumulativeRewardTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeRewardUSD: [BigInt!]
  cumulativeRewardUSD_not: [BigInt!]
  cumulativeRewardUSD_contains: [BigInt!]
  cumulativeRewardUSD_contains_nocase: [BigInt!]
  cumulativeRewardUSD_not_contains: [BigInt!]
  cumulativeRewardUSD_not_contains_nocase: [BigInt!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_PositionSnapshot_filter]
  or: [Arbitrum_PositionSnapshot_filter]
}

enum Arbitrum_PositionSnapshot_orderBy {
  id
  hash
  logIndex
  nonce
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__liquidityTokenType
  position__liquidity
  position__liquidityUSD
  position__cumulativeDepositUSD
  position__cumulativeWithdrawUSD
  position__depositCount
  position__withdrawCount
  liquidityTokenType
  liquidity
  liquidityUSD
  cumulativeDepositTokenAmounts
  cumulativeDepositUSD
  cumulativeWithdrawTokenAmounts
  cumulativeWithdrawUSD
  cumulativeRewardTokenAmounts
  cumulativeRewardUSD
  depositCount
  withdrawCount
  blockNumber
  timestamp
}

input Arbitrum_Position_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Arbitrum_Account_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Arbitrum_LiquidityPool_filter
  hashOpened: Arbitrum_Bytes
  hashOpened_not: Arbitrum_Bytes
  hashOpened_gt: Arbitrum_Bytes
  hashOpened_lt: Arbitrum_Bytes
  hashOpened_gte: Arbitrum_Bytes
  hashOpened_lte: Arbitrum_Bytes
  hashOpened_in: [Arbitrum_Bytes!]
  hashOpened_not_in: [Arbitrum_Bytes!]
  hashOpened_contains: Arbitrum_Bytes
  hashOpened_not_contains: Arbitrum_Bytes
  hashClosed: Arbitrum_Bytes
  hashClosed_not: Arbitrum_Bytes
  hashClosed_gt: Arbitrum_Bytes
  hashClosed_lt: Arbitrum_Bytes
  hashClosed_gte: Arbitrum_Bytes
  hashClosed_lte: Arbitrum_Bytes
  hashClosed_in: [Arbitrum_Bytes!]
  hashClosed_not_in: [Arbitrum_Bytes!]
  hashClosed_contains: Arbitrum_Bytes
  hashClosed_not_contains: Arbitrum_Bytes
  blockNumberOpened: BigInt
  blockNumberOpened_not: BigInt
  blockNumberOpened_gt: BigInt
  blockNumberOpened_lt: BigInt
  blockNumberOpened_gte: BigInt
  blockNumberOpened_lte: BigInt
  blockNumberOpened_in: [BigInt!]
  blockNumberOpened_not_in: [BigInt!]
  timestampOpened: BigInt
  timestampOpened_not: BigInt
  timestampOpened_gt: BigInt
  timestampOpened_lt: BigInt
  timestampOpened_gte: BigInt
  timestampOpened_lte: BigInt
  timestampOpened_in: [BigInt!]
  timestampOpened_not_in: [BigInt!]
  blockNumberClosed: BigInt
  blockNumberClosed_not: BigInt
  blockNumberClosed_gt: BigInt
  blockNumberClosed_lt: BigInt
  blockNumberClosed_gte: BigInt
  blockNumberClosed_lte: BigInt
  blockNumberClosed_in: [BigInt!]
  blockNumberClosed_not_in: [BigInt!]
  timestampClosed: BigInt
  timestampClosed_not: BigInt
  timestampClosed_gt: BigInt
  timestampClosed_lt: BigInt
  timestampClosed_gte: BigInt
  timestampClosed_lte: BigInt
  timestampClosed_in: [BigInt!]
  timestampClosed_not_in: [BigInt!]
  tickLower: String
  tickLower_not: String
  tickLower_gt: String
  tickLower_lt: String
  tickLower_gte: String
  tickLower_lte: String
  tickLower_in: [String!]
  tickLower_not_in: [String!]
  tickLower_contains: String
  tickLower_contains_nocase: String
  tickLower_not_contains: String
  tickLower_not_contains_nocase: String
  tickLower_starts_with: String
  tickLower_starts_with_nocase: String
  tickLower_not_starts_with: String
  tickLower_not_starts_with_nocase: String
  tickLower_ends_with: String
  tickLower_ends_with_nocase: String
  tickLower_not_ends_with: String
  tickLower_not_ends_with_nocase: String
  tickLower_: Arbitrum_Tick_filter
  tickUpper: String
  tickUpper_not: String
  tickUpper_gt: String
  tickUpper_lt: String
  tickUpper_gte: String
  tickUpper_lte: String
  tickUpper_in: [String!]
  tickUpper_not_in: [String!]
  tickUpper_contains: String
  tickUpper_contains_nocase: String
  tickUpper_not_contains: String
  tickUpper_not_contains_nocase: String
  tickUpper_starts_with: String
  tickUpper_starts_with_nocase: String
  tickUpper_not_starts_with: String
  tickUpper_not_starts_with_nocase: String
  tickUpper_ends_with: String
  tickUpper_ends_with_nocase: String
  tickUpper_not_ends_with: String
  tickUpper_not_ends_with_nocase: String
  tickUpper_: Arbitrum_Tick_filter
  liquidityToken: String
  liquidityToken_not: String
  liquidityToken_gt: String
  liquidityToken_lt: String
  liquidityToken_gte: String
  liquidityToken_lte: String
  liquidityToken_in: [String!]
  liquidityToken_not_in: [String!]
  liquidityToken_contains: String
  liquidityToken_contains_nocase: String
  liquidityToken_not_contains: String
  liquidityToken_not_contains_nocase: String
  liquidityToken_starts_with: String
  liquidityToken_starts_with_nocase: String
  liquidityToken_not_starts_with: String
  liquidityToken_not_starts_with_nocase: String
  liquidityToken_ends_with: String
  liquidityToken_ends_with_nocase: String
  liquidityToken_not_ends_with: String
  liquidityToken_not_ends_with_nocase: String
  liquidityToken_: Arbitrum_Token_filter
  liquidityTokenType: Arbitrum_TokenType
  liquidityTokenType_not: Arbitrum_TokenType
  liquidityTokenType_in: [Arbitrum_TokenType!]
  liquidityTokenType_not_in: [Arbitrum_TokenType!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  liquidityUSD: Arbitrum_BigDecimal
  liquidityUSD_not: Arbitrum_BigDecimal
  liquidityUSD_gt: Arbitrum_BigDecimal
  liquidityUSD_lt: Arbitrum_BigDecimal
  liquidityUSD_gte: Arbitrum_BigDecimal
  liquidityUSD_lte: Arbitrum_BigDecimal
  liquidityUSD_in: [Arbitrum_BigDecimal!]
  liquidityUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeDepositTokenAmounts: [BigInt!]
  cumulativeDepositTokenAmounts_not: [BigInt!]
  cumulativeDepositTokenAmounts_contains: [BigInt!]
  cumulativeDepositTokenAmounts_contains_nocase: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeDepositUSD: Arbitrum_BigDecimal
  cumulativeDepositUSD_not: Arbitrum_BigDecimal
  cumulativeDepositUSD_gt: Arbitrum_BigDecimal
  cumulativeDepositUSD_lt: Arbitrum_BigDecimal
  cumulativeDepositUSD_gte: Arbitrum_BigDecimal
  cumulativeDepositUSD_lte: Arbitrum_BigDecimal
  cumulativeDepositUSD_in: [Arbitrum_BigDecimal!]
  cumulativeDepositUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeWithdrawTokenAmounts: [BigInt!]
  cumulativeWithdrawTokenAmounts_not: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains_nocase: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeWithdrawUSD: Arbitrum_BigDecimal
  cumulativeWithdrawUSD_not: Arbitrum_BigDecimal
  cumulativeWithdrawUSD_gt: Arbitrum_BigDecimal
  cumulativeWithdrawUSD_lt: Arbitrum_BigDecimal
  cumulativeWithdrawUSD_gte: Arbitrum_BigDecimal
  cumulativeWithdrawUSD_lte: Arbitrum_BigDecimal
  cumulativeWithdrawUSD_in: [Arbitrum_BigDecimal!]
  cumulativeWithdrawUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeRewardUSD: [BigInt!]
  cumulativeRewardUSD_not: [BigInt!]
  cumulativeRewardUSD_contains: [BigInt!]
  cumulativeRewardUSD_contains_nocase: [BigInt!]
  cumulativeRewardUSD_not_contains: [BigInt!]
  cumulativeRewardUSD_not_contains_nocase: [BigInt!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  deposits_: Arbitrum_Deposit_filter
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  withdraws_: Arbitrum_Withdraw_filter
  snapshots_: Arbitrum_PositionSnapshot_filter
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_Position_filter]
  or: [Arbitrum_Position_filter]
}

enum Arbitrum_Position_orderBy {
  id
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  hashOpened
  hashClosed
  blockNumberOpened
  timestampOpened
  blockNumberClosed
  timestampClosed
  tickLower
  tickLower__id
  tickLower__index
  tickLower__createdTimestamp
  tickLower__createdBlockNumber
  tickLower__liquidityGross
  tickLower__liquidityGrossUSD
  tickLower__liquidityNet
  tickLower__liquidityNetUSD
  tickLower__lastSnapshotDayID
  tickLower__lastSnapshotHourID
  tickLower__lastUpdateTimestamp
  tickLower__lastUpdateBlockNumber
  tickUpper
  tickUpper__id
  tickUpper__index
  tickUpper__createdTimestamp
  tickUpper__createdBlockNumber
  tickUpper__liquidityGross
  tickUpper__liquidityGrossUSD
  tickUpper__liquidityNet
  tickUpper__liquidityNetUSD
  tickUpper__lastSnapshotDayID
  tickUpper__lastSnapshotHourID
  tickUpper__lastUpdateTimestamp
  tickUpper__lastUpdateBlockNumber
  liquidityToken
  liquidityToken__id
  liquidityToken__name
  liquidityToken__symbol
  liquidityToken__decimals
  liquidityToken__lastPriceUSD
  liquidityToken__lastPriceBlockNumber
  liquidityToken___lastPricePool
  liquidityToken___totalSupply
  liquidityToken___totalValueLockedUSD
  liquidityToken___largePriceChangeBuffer
  liquidityToken___largeTVLImpactBuffer
  liquidityTokenType
  liquidity
  liquidityUSD
  cumulativeDepositTokenAmounts
  cumulativeDepositUSD
  cumulativeWithdrawTokenAmounts
  cumulativeWithdrawUSD
  cumulativeRewardUSD
  depositCount
  deposits
  withdrawCount
  withdraws
  snapshots
}

interface Arbitrum_Protocol {
  """ Smart contract address of the protocol's main contract (Factory, Registry, etc) 
  """
  id: Arbitrum_Bytes!
  """ Name of the protocol, including version. e.g. Uniswap v3 """
  name: String!
  """ Slug of protocol, including version. e.g. uniswap-v3 """
  slug: String!
  """ Version of the subgraph schema, in SemVer format (e.g. 1.0.0) """
  schemaVersion: String!
  """ Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) 
  """
  subgraphVersion: String!
  """ Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) 
  """
  methodologyVersion: String!
  """ The blockchain network this subgraph is indexing on """
  network: Arbitrum_Network!
  """ The type of protocol (e.g. DEX, Lending, Yield, etc) """
  type: Arbitrum_ProtocolType!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: Arbitrum_BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: Arbitrum_BigDecimal
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: Arbitrum_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: Arbitrum_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: Arbitrum_BigDecimal!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Daily usage metrics for this protocol """
  dailyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_UsageMetricsDailySnapshot_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_UsageMetricsDailySnapshot_filter): [Arbitrum_UsageMetricsDailySnapshot!]!
  """ Hourly usage metrics for this protocol """
  hourlyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_UsageMetricsHourlySnapshot_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_UsageMetricsHourlySnapshot_filter): [Arbitrum_UsageMetricsHourlySnapshot!]!
  """ Daily financial metrics for this protocol """
  financialMetrics(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_FinancialsDailySnapshot_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_FinancialsDailySnapshot_filter): [Arbitrum_FinancialsDailySnapshot!]!
}

enum Arbitrum_ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
}

input Arbitrum_Protocol_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  schemaVersion: String
  schemaVersion_not: String
  schemaVersion_gt: String
  schemaVersion_lt: String
  schemaVersion_gte: String
  schemaVersion_lte: String
  schemaVersion_in: [String!]
  schemaVersion_not_in: [String!]
  schemaVersion_contains: String
  schemaVersion_contains_nocase: String
  schemaVersion_not_contains: String
  schemaVersion_not_contains_nocase: String
  schemaVersion_starts_with: String
  schemaVersion_starts_with_nocase: String
  schemaVersion_not_starts_with: String
  schemaVersion_not_starts_with_nocase: String
  schemaVersion_ends_with: String
  schemaVersion_ends_with_nocase: String
  schemaVersion_not_ends_with: String
  schemaVersion_not_ends_with_nocase: String
  subgraphVersion: String
  subgraphVersion_not: String
  subgraphVersion_gt: String
  subgraphVersion_lt: String
  subgraphVersion_gte: String
  subgraphVersion_lte: String
  subgraphVersion_in: [String!]
  subgraphVersion_not_in: [String!]
  subgraphVersion_contains: String
  subgraphVersion_contains_nocase: String
  subgraphVersion_not_contains: String
  subgraphVersion_not_contains_nocase: String
  subgraphVersion_starts_with: String
  subgraphVersion_starts_with_nocase: String
  subgraphVersion_not_starts_with: String
  subgraphVersion_not_starts_with_nocase: String
  subgraphVersion_ends_with: String
  subgraphVersion_ends_with_nocase: String
  subgraphVersion_not_ends_with: String
  subgraphVersion_not_ends_with_nocase: String
  methodologyVersion: String
  methodologyVersion_not: String
  methodologyVersion_gt: String
  methodologyVersion_lt: String
  methodologyVersion_gte: String
  methodologyVersion_lte: String
  methodologyVersion_in: [String!]
  methodologyVersion_not_in: [String!]
  methodologyVersion_contains: String
  methodologyVersion_contains_nocase: String
  methodologyVersion_not_contains: String
  methodologyVersion_not_contains_nocase: String
  methodologyVersion_starts_with: String
  methodologyVersion_starts_with_nocase: String
  methodologyVersion_not_starts_with: String
  methodologyVersion_not_starts_with_nocase: String
  methodologyVersion_ends_with: String
  methodologyVersion_ends_with_nocase: String
  methodologyVersion_not_ends_with: String
  methodologyVersion_not_ends_with_nocase: String
  network: Arbitrum_Network
  network_not: Arbitrum_Network
  network_in: [Arbitrum_Network!]
  network_not_in: [Arbitrum_Network!]
  type: Arbitrum_ProtocolType
  type_not: Arbitrum_ProtocolType
  type_in: [Arbitrum_ProtocolType!]
  type_not_in: [Arbitrum_ProtocolType!]
  totalValueLockedUSD: Arbitrum_BigDecimal
  totalValueLockedUSD_not: Arbitrum_BigDecimal
  totalValueLockedUSD_gt: Arbitrum_BigDecimal
  totalValueLockedUSD_lt: Arbitrum_BigDecimal
  totalValueLockedUSD_gte: Arbitrum_BigDecimal
  totalValueLockedUSD_lte: Arbitrum_BigDecimal
  totalValueLockedUSD_in: [Arbitrum_BigDecimal!]
  totalValueLockedUSD_not_in: [Arbitrum_BigDecimal!]
  protocolControlledValueUSD: Arbitrum_BigDecimal
  protocolControlledValueUSD_not: Arbitrum_BigDecimal
  protocolControlledValueUSD_gt: Arbitrum_BigDecimal
  protocolControlledValueUSD_lt: Arbitrum_BigDecimal
  protocolControlledValueUSD_gte: Arbitrum_BigDecimal
  protocolControlledValueUSD_lte: Arbitrum_BigDecimal
  protocolControlledValueUSD_in: [Arbitrum_BigDecimal!]
  protocolControlledValueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeTotalRevenueUSD: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_not: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_gt: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_lt: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_gte: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_lte: Arbitrum_BigDecimal
  cumulativeTotalRevenueUSD_in: [Arbitrum_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Arbitrum_BigDecimal!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  dailyUsageMetrics_: Arbitrum_UsageMetricsDailySnapshot_filter
  hourlyUsageMetrics_: Arbitrum_UsageMetricsHourlySnapshot_filter
  financialMetrics_: Arbitrum_FinancialsDailySnapshot_filter
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_Protocol_filter]
  or: [Arbitrum_Protocol_filter]
}

enum Arbitrum_Protocol_orderBy {
  id
  name
  slug
  schemaVersion
  subgraphVersion
  methodologyVersion
  network
  type
  totalValueLockedUSD
  protocolControlledValueUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  cumulativeUniqueUsers
  totalPoolCount
  dailyUsageMetrics
  hourlyUsageMetrics
  financialMetrics
}

type Arbitrum_RewardToken {
  """ { Reward token type }-{ Smart contract address of the reward token } """
  id: Arbitrum_Bytes!
  """ Reference to the actual token """
  token: Arbitrum_Token!
  """ The type of the reward token """
  type: Arbitrum_RewardTokenType!
}

enum Arbitrum_RewardTokenType {
  """ For reward tokens awarded to LPs/lenders """
  DEPOSIT
  """ For reward tokens awarded to borrowers """
  BORROW
}

input Arbitrum_RewardToken_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Arbitrum_Token_filter
  type: Arbitrum_RewardTokenType
  type_not: Arbitrum_RewardTokenType
  type_in: [Arbitrum_RewardTokenType!]
  type_not_in: [Arbitrum_RewardTokenType!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_RewardToken_filter]
  or: [Arbitrum_RewardToken_filter]
}

enum Arbitrum_RewardToken_orderBy {
  id
  token
  token__id
  token__name
  token__symbol
  token__decimals
  token__lastPriceUSD
  token__lastPriceBlockNumber
  token___lastPricePool
  token___totalSupply
  token___totalValueLockedUSD
  token___largePriceChangeBuffer
  token___largeTVLImpactBuffer
  type
}

type Arbitrum_Swap {
  """ { Transaction hash }-{ Log index } """
  id: Arbitrum_Bytes!
  """ Transaction hash of the transaction that emitted this event """
  hash: Arbitrum_Bytes!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Gas limit of the transaction that emitted this event """
  gasLimit: BigInt
  """ Gas used in this transaction. (Optional because not every chain will support this) 
  """
  gasUsed: BigInt
  """ Gas price of the transaction that emitted this event """
  gasPrice: BigInt
  """ The protocol this transaction belongs to """
  protocol: Arbitrum_DexAmmProtocol!
  """ Account that emitted this event """
  account: Arbitrum_Account!
  """ The pool involving this event """
  pool: Arbitrum_LiquidityPool!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ the tick after the swap """
  tick: BigInt
  """ Token deposited into pool """
  tokenIn: Arbitrum_Token!
  """ Amount of token deposited into pool in native units """
  amountIn: BigInt!
  """ Amount of token deposited into pool in USD """
  amountInUSD: Arbitrum_BigDecimal!
  """ Token withdrawn from pool """
  tokenOut: Arbitrum_Token!
  """ Amount of token withdrawn from pool in native units """
  amountOut: BigInt!
  """ Amount of token withdrawn from pool in USD """
  amountOutUSD: Arbitrum_BigDecimal!
  """ Amount of input tokens in the liquidity pool """
  reserveAmounts: [BigInt!]
}

input Arbitrum_Swap_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  hash: Arbitrum_Bytes
  hash_not: Arbitrum_Bytes
  hash_gt: Arbitrum_Bytes
  hash_lt: Arbitrum_Bytes
  hash_gte: Arbitrum_Bytes
  hash_lte: Arbitrum_Bytes
  hash_in: [Arbitrum_Bytes!]
  hash_not_in: [Arbitrum_Bytes!]
  hash_contains: Arbitrum_Bytes
  hash_not_contains: Arbitrum_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Arbitrum_DexAmmProtocol_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Arbitrum_Account_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Arbitrum_LiquidityPool_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  tokenIn: String
  tokenIn_not: String
  tokenIn_gt: String
  tokenIn_lt: String
  tokenIn_gte: String
  tokenIn_lte: String
  tokenIn_in: [String!]
  tokenIn_not_in: [String!]
  tokenIn_contains: String
  tokenIn_contains_nocase: String
  tokenIn_not_contains: String
  tokenIn_not_contains_nocase: String
  tokenIn_starts_with: String
  tokenIn_starts_with_nocase: String
  tokenIn_not_starts_with: String
  tokenIn_not_starts_with_nocase: String
  tokenIn_ends_with: String
  tokenIn_ends_with_nocase: String
  tokenIn_not_ends_with: String
  tokenIn_not_ends_with_nocase: String
  tokenIn_: Arbitrum_Token_filter
  amountIn: BigInt
  amountIn_not: BigInt
  amountIn_gt: BigInt
  amountIn_lt: BigInt
  amountIn_gte: BigInt
  amountIn_lte: BigInt
  amountIn_in: [BigInt!]
  amountIn_not_in: [BigInt!]
  amountInUSD: Arbitrum_BigDecimal
  amountInUSD_not: Arbitrum_BigDecimal
  amountInUSD_gt: Arbitrum_BigDecimal
  amountInUSD_lt: Arbitrum_BigDecimal
  amountInUSD_gte: Arbitrum_BigDecimal
  amountInUSD_lte: Arbitrum_BigDecimal
  amountInUSD_in: [Arbitrum_BigDecimal!]
  amountInUSD_not_in: [Arbitrum_BigDecimal!]
  tokenOut: String
  tokenOut_not: String
  tokenOut_gt: String
  tokenOut_lt: String
  tokenOut_gte: String
  tokenOut_lte: String
  tokenOut_in: [String!]
  tokenOut_not_in: [String!]
  tokenOut_contains: String
  tokenOut_contains_nocase: String
  tokenOut_not_contains: String
  tokenOut_not_contains_nocase: String
  tokenOut_starts_with: String
  tokenOut_starts_with_nocase: String
  tokenOut_not_starts_with: String
  tokenOut_not_starts_with_nocase: String
  tokenOut_ends_with: String
  tokenOut_ends_with_nocase: String
  tokenOut_not_ends_with: String
  tokenOut_not_ends_with_nocase: String
  tokenOut_: Arbitrum_Token_filter
  amountOut: BigInt
  amountOut_not: BigInt
  amountOut_gt: BigInt
  amountOut_lt: BigInt
  amountOut_gte: BigInt
  amountOut_lte: BigInt
  amountOut_in: [BigInt!]
  amountOut_not_in: [BigInt!]
  amountOutUSD: Arbitrum_BigDecimal
  amountOutUSD_not: Arbitrum_BigDecimal
  amountOutUSD_gt: Arbitrum_BigDecimal
  amountOutUSD_lt: Arbitrum_BigDecimal
  amountOutUSD_gte: Arbitrum_BigDecimal
  amountOutUSD_lte: Arbitrum_BigDecimal
  amountOutUSD_in: [Arbitrum_BigDecimal!]
  amountOutUSD_not_in: [Arbitrum_BigDecimal!]
  reserveAmounts: [BigInt!]
  reserveAmounts_not: [BigInt!]
  reserveAmounts_contains: [BigInt!]
  reserveAmounts_contains_nocase: [BigInt!]
  reserveAmounts_not_contains: [BigInt!]
  reserveAmounts_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_Swap_filter]
  or: [Arbitrum_Swap_filter]
}

enum Arbitrum_Swap_orderBy {
  id
  hash
  nonce
  logIndex
  gasLimit
  gasUsed
  gasPrice
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  blockNumber
  timestamp
  tick
  tokenIn
  tokenIn__id
  tokenIn__name
  tokenIn__symbol
  tokenIn__decimals
  tokenIn__lastPriceUSD
  tokenIn__lastPriceBlockNumber
  tokenIn___lastPricePool
  tokenIn___totalSupply
  tokenIn___totalValueLockedUSD
  tokenIn___largePriceChangeBuffer
  tokenIn___largeTVLImpactBuffer
  amountIn
  amountInUSD
  tokenOut
  tokenOut__id
  tokenOut__name
  tokenOut__symbol
  tokenOut__decimals
  tokenOut__lastPriceUSD
  tokenOut__lastPriceBlockNumber
  tokenOut___lastPricePool
  tokenOut___totalSupply
  tokenOut___totalValueLockedUSD
  tokenOut___largePriceChangeBuffer
  tokenOut___largeTVLImpactBuffer
  amountOut
  amountOutUSD
  reserveAmounts
}

type Arbitrum_Tick {
  """ { pool address }-{ tick index } """
  id: Arbitrum_Bytes!
  """ tick index """
  index: BigInt!
  """ Liquidity pool this tick belongs to """
  pool: Arbitrum_LiquidityPool!
  """ Creation timestamp """
  createdTimestamp: BigInt!
  """ Creation block number """
  createdBlockNumber: BigInt!
  """ calculated price of token0 of tick within this pool - constant """
  prices: [Arbitrum_BigDecimal!]!
  """ total liquidity pool has as tick lower or upper """
  liquidityGross: BigInt!
  """ total liquidity in USD pool has as tick lower or upper """
  liquidityGrossUSD: Arbitrum_BigDecimal!
  """ how much liquidity changes when tick crossed """
  liquidityNet: BigInt!
  """ how much liquidity in USD changes when tick crossed """
  liquidityNetUSD: Arbitrum_BigDecimal!
  """ Day ID of the most recent daily snapshot """
  lastSnapshotDayID: Int!
  """ Hour ID of the most recent hourly snapshot """
  lastSnapshotHourID: Int!
  """ Timestamp of the last time this entity was updated """
  lastUpdateTimestamp: BigInt!
  """ Block number of the last time this entity was updated """
  lastUpdateBlockNumber: BigInt!
}

type Arbitrum_TickDailySnapshot {
  """ { pool address }-{ tick index }-{ day ID } """
  id: Arbitrum_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ tick index """
  tick: Arbitrum_Tick!
  """ liquidity pool this tick belongs to """
  pool: Arbitrum_LiquidityPool!
  """ total liquidity pool has as tick lower or upper """
  liquidityGross: BigInt!
  """ total liquidity in USD pool has as tick lower or upper """
  liquidityGrossUSD: Arbitrum_BigDecimal!
  """ how much liquidity changes when tick crossed """
  liquidityNet: BigInt!
  """ how much liquidity in USD changes when tick crossed """
  liquidityNetUSD: Arbitrum_BigDecimal!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Arbitrum_TickDailySnapshot_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Arbitrum_Tick_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Arbitrum_LiquidityPool_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityGrossUSD: Arbitrum_BigDecimal
  liquidityGrossUSD_not: Arbitrum_BigDecimal
  liquidityGrossUSD_gt: Arbitrum_BigDecimal
  liquidityGrossUSD_lt: Arbitrum_BigDecimal
  liquidityGrossUSD_gte: Arbitrum_BigDecimal
  liquidityGrossUSD_lte: Arbitrum_BigDecimal
  liquidityGrossUSD_in: [Arbitrum_BigDecimal!]
  liquidityGrossUSD_not_in: [Arbitrum_BigDecimal!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  liquidityNetUSD: Arbitrum_BigDecimal
  liquidityNetUSD_not: Arbitrum_BigDecimal
  liquidityNetUSD_gt: Arbitrum_BigDecimal
  liquidityNetUSD_lt: Arbitrum_BigDecimal
  liquidityNetUSD_gte: Arbitrum_BigDecimal
  liquidityNetUSD_lte: Arbitrum_BigDecimal
  liquidityNetUSD_in: [Arbitrum_BigDecimal!]
  liquidityNetUSD_not_in: [Arbitrum_BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_TickDailySnapshot_filter]
  or: [Arbitrum_TickDailySnapshot_filter]
}

enum Arbitrum_TickDailySnapshot_orderBy {
  id
  day
  tick
  tick__id
  tick__index
  tick__createdTimestamp
  tick__createdBlockNumber
  tick__liquidityGross
  tick__liquidityGrossUSD
  tick__liquidityNet
  tick__liquidityNetUSD
  tick__lastSnapshotDayID
  tick__lastSnapshotHourID
  tick__lastUpdateTimestamp
  tick__lastUpdateBlockNumber
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  liquidityGross
  liquidityGrossUSD
  liquidityNet
  liquidityNetUSD
  timestamp
  blockNumber
}

type Arbitrum_TickHourlySnapshot {
  """ { pool address }-{ tick index }-{ hour ID } """
  id: Arbitrum_Bytes!
  """ Number of hours since Unix epoch time """
  hour: Int!
  """ tick index """
  tick: Arbitrum_Tick!
  """ liquidity pool this tick belongs to """
  pool: Arbitrum_LiquidityPool!
  """ total liquidity pool has as tick lower or upper """
  liquidityGross: BigInt!
  """ total liquidity in USD pool has as tick lower or upper """
  liquidityGrossUSD: Arbitrum_BigDecimal!
  """ how much liquidity changes when tick crossed """
  liquidityNet: BigInt!
  """ how much liquidity in USD changes when tick crossed """
  liquidityNetUSD: Arbitrum_BigDecimal!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Arbitrum_TickHourlySnapshot_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  hour: Int
  hour_not: Int
  hour_gt: Int
  hour_lt: Int
  hour_gte: Int
  hour_lte: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Arbitrum_Tick_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Arbitrum_LiquidityPool_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityGrossUSD: Arbitrum_BigDecimal
  liquidityGrossUSD_not: Arbitrum_BigDecimal
  liquidityGrossUSD_gt: Arbitrum_BigDecimal
  liquidityGrossUSD_lt: Arbitrum_BigDecimal
  liquidityGrossUSD_gte: Arbitrum_BigDecimal
  liquidityGrossUSD_lte: Arbitrum_BigDecimal
  liquidityGrossUSD_in: [Arbitrum_BigDecimal!]
  liquidityGrossUSD_not_in: [Arbitrum_BigDecimal!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  liquidityNetUSD: Arbitrum_BigDecimal
  liquidityNetUSD_not: Arbitrum_BigDecimal
  liquidityNetUSD_gt: Arbitrum_BigDecimal
  liquidityNetUSD_lt: Arbitrum_BigDecimal
  liquidityNetUSD_gte: Arbitrum_BigDecimal
  liquidityNetUSD_lte: Arbitrum_BigDecimal
  liquidityNetUSD_in: [Arbitrum_BigDecimal!]
  liquidityNetUSD_not_in: [Arbitrum_BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_TickHourlySnapshot_filter]
  or: [Arbitrum_TickHourlySnapshot_filter]
}

enum Arbitrum_TickHourlySnapshot_orderBy {
  id
  hour
  tick
  tick__id
  tick__index
  tick__createdTimestamp
  tick__createdBlockNumber
  tick__liquidityGross
  tick__liquidityGrossUSD
  tick__liquidityNet
  tick__liquidityNetUSD
  tick__lastSnapshotDayID
  tick__lastSnapshotHourID
  tick__lastUpdateTimestamp
  tick__lastUpdateBlockNumber
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  liquidityGross
  liquidityGrossUSD
  liquidityNet
  liquidityNetUSD
  timestamp
  blockNumber
}

input Arbitrum_Tick_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Arbitrum_LiquidityPool_filter
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  prices: [Arbitrum_BigDecimal!]
  prices_not: [Arbitrum_BigDecimal!]
  prices_contains: [Arbitrum_BigDecimal!]
  prices_contains_nocase: [Arbitrum_BigDecimal!]
  prices_not_contains: [Arbitrum_BigDecimal!]
  prices_not_contains_nocase: [Arbitrum_BigDecimal!]
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityGrossUSD: Arbitrum_BigDecimal
  liquidityGrossUSD_not: Arbitrum_BigDecimal
  liquidityGrossUSD_gt: Arbitrum_BigDecimal
  liquidityGrossUSD_lt: Arbitrum_BigDecimal
  liquidityGrossUSD_gte: Arbitrum_BigDecimal
  liquidityGrossUSD_lte: Arbitrum_BigDecimal
  liquidityGrossUSD_in: [Arbitrum_BigDecimal!]
  liquidityGrossUSD_not_in: [Arbitrum_BigDecimal!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  liquidityNetUSD: Arbitrum_BigDecimal
  liquidityNetUSD_not: Arbitrum_BigDecimal
  liquidityNetUSD_gt: Arbitrum_BigDecimal
  liquidityNetUSD_lt: Arbitrum_BigDecimal
  liquidityNetUSD_gte: Arbitrum_BigDecimal
  liquidityNetUSD_lte: Arbitrum_BigDecimal
  liquidityNetUSD_in: [Arbitrum_BigDecimal!]
  liquidityNetUSD_not_in: [Arbitrum_BigDecimal!]
  lastSnapshotDayID: Int
  lastSnapshotDayID_not: Int
  lastSnapshotDayID_gt: Int
  lastSnapshotDayID_lt: Int
  lastSnapshotDayID_gte: Int
  lastSnapshotDayID_lte: Int
  lastSnapshotDayID_in: [Int!]
  lastSnapshotDayID_not_in: [Int!]
  lastSnapshotHourID: Int
  lastSnapshotHourID_not: Int
  lastSnapshotHourID_gt: Int
  lastSnapshotHourID_lt: Int
  lastSnapshotHourID_gte: Int
  lastSnapshotHourID_lte: Int
  lastSnapshotHourID_in: [Int!]
  lastSnapshotHourID_not_in: [Int!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_Tick_filter]
  or: [Arbitrum_Tick_filter]
}

enum Arbitrum_Tick_orderBy {
  id
  index
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  createdTimestamp
  createdBlockNumber
  prices
  liquidityGross
  liquidityGrossUSD
  liquidityNet
  liquidityNetUSD
  lastSnapshotDayID
  lastSnapshotHourID
  lastUpdateTimestamp
  lastUpdateBlockNumber
}

type Arbitrum_Token {
  """ Smart contract address of the token """
  id: Arbitrum_Bytes!
  """ Name of the token, mirrored from the smart contract """
  name: String!
  """ Symbol of the token, mirrored from the smart contract """
  symbol: String!
  """ The number of decimal places this token uses, default to 18 """
  decimals: Int!
  """ Optional field to track the price of a token, mostly for caching purposes 
  """
  lastPriceUSD: Arbitrum_BigDecimal
  """ Optional field to track the block number of the last token price """
  lastPriceBlockNumber: BigInt
  """ last pool that gave this token a price """
  _lastPricePool: Arbitrum_Bytes
  """ amount of tokens in the protocol """
  _totalSupply: BigInt!
  """ Total value locked in the protocol """
  _totalValueLockedUSD: Arbitrum_BigDecimal!
  _largePriceChangeBuffer: Int!
  _largeTVLImpactBuffer: Int!
}

enum Arbitrum_TokenType {
  MULTIPLE
  UNKNOWN
  ERC20
  ERC721
  ERC1155
  BEP20
  BEP721
  BEP1155
}

input Arbitrum_Token_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  lastPriceUSD: Arbitrum_BigDecimal
  lastPriceUSD_not: Arbitrum_BigDecimal
  lastPriceUSD_gt: Arbitrum_BigDecimal
  lastPriceUSD_lt: Arbitrum_BigDecimal
  lastPriceUSD_gte: Arbitrum_BigDecimal
  lastPriceUSD_lte: Arbitrum_BigDecimal
  lastPriceUSD_in: [Arbitrum_BigDecimal!]
  lastPriceUSD_not_in: [Arbitrum_BigDecimal!]
  lastPriceBlockNumber: BigInt
  lastPriceBlockNumber_not: BigInt
  lastPriceBlockNumber_gt: BigInt
  lastPriceBlockNumber_lt: BigInt
  lastPriceBlockNumber_gte: BigInt
  lastPriceBlockNumber_lte: BigInt
  lastPriceBlockNumber_in: [BigInt!]
  lastPriceBlockNumber_not_in: [BigInt!]
  _lastPricePool: Arbitrum_Bytes
  _lastPricePool_not: Arbitrum_Bytes
  _lastPricePool_gt: Arbitrum_Bytes
  _lastPricePool_lt: Arbitrum_Bytes
  _lastPricePool_gte: Arbitrum_Bytes
  _lastPricePool_lte: Arbitrum_Bytes
  _lastPricePool_in: [Arbitrum_Bytes!]
  _lastPricePool_not_in: [Arbitrum_Bytes!]
  _lastPricePool_contains: Arbitrum_Bytes
  _lastPricePool_not_contains: Arbitrum_Bytes
  _totalSupply: BigInt
  _totalSupply_not: BigInt
  _totalSupply_gt: BigInt
  _totalSupply_lt: BigInt
  _totalSupply_gte: BigInt
  _totalSupply_lte: BigInt
  _totalSupply_in: [BigInt!]
  _totalSupply_not_in: [BigInt!]
  _totalValueLockedUSD: Arbitrum_BigDecimal
  _totalValueLockedUSD_not: Arbitrum_BigDecimal
  _totalValueLockedUSD_gt: Arbitrum_BigDecimal
  _totalValueLockedUSD_lt: Arbitrum_BigDecimal
  _totalValueLockedUSD_gte: Arbitrum_BigDecimal
  _totalValueLockedUSD_lte: Arbitrum_BigDecimal
  _totalValueLockedUSD_in: [Arbitrum_BigDecimal!]
  _totalValueLockedUSD_not_in: [Arbitrum_BigDecimal!]
  _largePriceChangeBuffer: Int
  _largePriceChangeBuffer_not: Int
  _largePriceChangeBuffer_gt: Int
  _largePriceChangeBuffer_lt: Int
  _largePriceChangeBuffer_gte: Int
  _largePriceChangeBuffer_lte: Int
  _largePriceChangeBuffer_in: [Int!]
  _largePriceChangeBuffer_not_in: [Int!]
  _largeTVLImpactBuffer: Int
  _largeTVLImpactBuffer_not: Int
  _largeTVLImpactBuffer_gt: Int
  _largeTVLImpactBuffer_lt: Int
  _largeTVLImpactBuffer_gte: Int
  _largeTVLImpactBuffer_lte: Int
  _largeTVLImpactBuffer_in: [Int!]
  _largeTVLImpactBuffer_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_Token_filter]
  or: [Arbitrum_Token_filter]
}

enum Arbitrum_Token_orderBy {
  id
  name
  symbol
  decimals
  lastPriceUSD
  lastPriceBlockNumber
  _lastPricePool
  _totalSupply
  _totalValueLockedUSD
  _largePriceChangeBuffer
  _largeTVLImpactBuffer
}

type Arbitrum_UsageMetricsDailySnapshot {
  """ ID is # of days since Unix epoch time """
  id: Arbitrum_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ Protocol this snapshot is associated with """
  protocol: Arbitrum_DexAmmProtocol!
  """ Number of unique daily active users """
  dailyActiveUsers: Int!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. 
  """
  dailyTransactionCount: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Total number of deposits (add liquidity) in an day """
  dailyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) in an day """
  dailyWithdrawCount: Int!
  """ Total number of trades (swaps) in an day """
  dailySwapCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Arbitrum_UsageMetricsDailySnapshot_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Arbitrum_DexAmmProtocol_filter
  dailyActiveUsers: Int
  dailyActiveUsers_not: Int
  dailyActiveUsers_gt: Int
  dailyActiveUsers_lt: Int
  dailyActiveUsers_gte: Int
  dailyActiveUsers_lte: Int
  dailyActiveUsers_in: [Int!]
  dailyActiveUsers_not_in: [Int!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  dailyTransactionCount: Int
  dailyTransactionCount_not: Int
  dailyTransactionCount_gt: Int
  dailyTransactionCount_lt: Int
  dailyTransactionCount_gte: Int
  dailyTransactionCount_lte: Int
  dailyTransactionCount_in: [Int!]
  dailyTransactionCount_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  dailyDepositCount: Int
  dailyDepositCount_not: Int
  dailyDepositCount_gt: Int
  dailyDepositCount_lt: Int
  dailyDepositCount_gte: Int
  dailyDepositCount_lte: Int
  dailyDepositCount_in: [Int!]
  dailyDepositCount_not_in: [Int!]
  dailyWithdrawCount: Int
  dailyWithdrawCount_not: Int
  dailyWithdrawCount_gt: Int
  dailyWithdrawCount_lt: Int
  dailyWithdrawCount_gte: Int
  dailyWithdrawCount_lte: Int
  dailyWithdrawCount_in: [Int!]
  dailyWithdrawCount_not_in: [Int!]
  dailySwapCount: Int
  dailySwapCount_not: Int
  dailySwapCount_gt: Int
  dailySwapCount_lt: Int
  dailySwapCount_gte: Int
  dailySwapCount_lte: Int
  dailySwapCount_in: [Int!]
  dailySwapCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_UsageMetricsDailySnapshot_filter]
  or: [Arbitrum_UsageMetricsDailySnapshot_filter]
}

enum Arbitrum_UsageMetricsDailySnapshot_orderBy {
  id
  day
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  dailyActiveUsers
  cumulativeUniqueUsers
  dailyTransactionCount
  totalPoolCount
  dailyDepositCount
  dailyWithdrawCount
  dailySwapCount
  timestamp
  blockNumber
}

type Arbitrum_UsageMetricsHourlySnapshot {
  """ { # of hours since Unix epoch time } """
  id: Arbitrum_Bytes!
  """ Number of hours since Unix epoch time """
  hour: Int!
  """ Protocol this snapshot is associated with """
  protocol: Arbitrum_DexAmmProtocol!
  """ Number of unique hourly active users """
  hourlyActiveUsers: Int!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. 
  """
  hourlyTransactionCount: Int!
  """ Total number of deposits (add liquidity) in an hour """
  hourlyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) in an hour """
  hourlyWithdrawCount: Int!
  """ Total number of trades (swaps) in an hour """
  hourlySwapCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Arbitrum_UsageMetricsHourlySnapshot_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  hour: Int
  hour_not: Int
  hour_gt: Int
  hour_lt: Int
  hour_gte: Int
  hour_lte: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Arbitrum_DexAmmProtocol_filter
  hourlyActiveUsers: Int
  hourlyActiveUsers_not: Int
  hourlyActiveUsers_gt: Int
  hourlyActiveUsers_lt: Int
  hourlyActiveUsers_gte: Int
  hourlyActiveUsers_lte: Int
  hourlyActiveUsers_in: [Int!]
  hourlyActiveUsers_not_in: [Int!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  hourlyTransactionCount: Int
  hourlyTransactionCount_not: Int
  hourlyTransactionCount_gt: Int
  hourlyTransactionCount_lt: Int
  hourlyTransactionCount_gte: Int
  hourlyTransactionCount_lte: Int
  hourlyTransactionCount_in: [Int!]
  hourlyTransactionCount_not_in: [Int!]
  hourlyDepositCount: Int
  hourlyDepositCount_not: Int
  hourlyDepositCount_gt: Int
  hourlyDepositCount_lt: Int
  hourlyDepositCount_gte: Int
  hourlyDepositCount_lte: Int
  hourlyDepositCount_in: [Int!]
  hourlyDepositCount_not_in: [Int!]
  hourlyWithdrawCount: Int
  hourlyWithdrawCount_not: Int
  hourlyWithdrawCount_gt: Int
  hourlyWithdrawCount_lt: Int
  hourlyWithdrawCount_gte: Int
  hourlyWithdrawCount_lte: Int
  hourlyWithdrawCount_in: [Int!]
  hourlyWithdrawCount_not_in: [Int!]
  hourlySwapCount: Int
  hourlySwapCount_not: Int
  hourlySwapCount_gt: Int
  hourlySwapCount_lt: Int
  hourlySwapCount_gte: Int
  hourlySwapCount_lte: Int
  hourlySwapCount_in: [Int!]
  hourlySwapCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_UsageMetricsHourlySnapshot_filter]
  or: [Arbitrum_UsageMetricsHourlySnapshot_filter]
}

enum Arbitrum_UsageMetricsHourlySnapshot_orderBy {
  id
  hour
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  hourlyActiveUsers
  cumulativeUniqueUsers
  hourlyTransactionCount
  hourlyDepositCount
  hourlyWithdrawCount
  hourlySwapCount
  timestamp
  blockNumber
}

type Arbitrum_Withdraw {
  """ { Transaction hash }-{ Log index }"""
  id: Arbitrum_Bytes!
  """ Transaction hash of the transaction that emitted this event """
  hash: Arbitrum_Bytes!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Gas limit of the transaction that emitted this event """
  gasLimit: BigInt
  """ Gas used in this transaction. (Optional because not every chain will support this) 
  """
  gasUsed: BigInt
  """ Gas price of the transaction that emitted this event """
  gasPrice: BigInt
  """ The protocol this transaction belongs to """
  protocol: Arbitrum_DexAmmProtocol!
  """ Account that emitted this event """
  account: Arbitrum_Account!
  """ The user position changed by this event """
  position: Arbitrum_Position
  """ lower tick of position """
  tickLower: BigInt
  """ upper tick of position """
  tickUpper: BigInt
  """ The pool involving this event """
  pool: Arbitrum_LiquidityPool!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ Amount of liquidity burned """
  liquidity: BigInt!
  """ Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool 
  """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_Token_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_Token_filter): [Arbitrum_Token!]!
  """ Amount of input tokens in the token's native unit """
  inputTokenAmounts: [BigInt!]!
  """ Amount of input tokens in the liquidity pool """
  reserveAmounts: [BigInt!]
  """ USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool) 
  """
  amountUSD: Arbitrum_BigDecimal!
}

input Arbitrum_Withdraw_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  hash: Arbitrum_Bytes
  hash_not: Arbitrum_Bytes
  hash_gt: Arbitrum_Bytes
  hash_lt: Arbitrum_Bytes
  hash_gte: Arbitrum_Bytes
  hash_lte: Arbitrum_Bytes
  hash_in: [Arbitrum_Bytes!]
  hash_not_in: [Arbitrum_Bytes!]
  hash_contains: Arbitrum_Bytes
  hash_not_contains: Arbitrum_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Arbitrum_DexAmmProtocol_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Arbitrum_Account_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Arbitrum_Position_filter
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Arbitrum_LiquidityPool_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Arbitrum_Token_filter
  inputTokenAmounts: [BigInt!]
  inputTokenAmounts_not: [BigInt!]
  inputTokenAmounts_contains: [BigInt!]
  inputTokenAmounts_contains_nocase: [BigInt!]
  inputTokenAmounts_not_contains: [BigInt!]
  inputTokenAmounts_not_contains_nocase: [BigInt!]
  reserveAmounts: [BigInt!]
  reserveAmounts_not: [BigInt!]
  reserveAmounts_contains: [BigInt!]
  reserveAmounts_contains_nocase: [BigInt!]
  reserveAmounts_not_contains: [BigInt!]
  reserveAmounts_not_contains_nocase: [BigInt!]
  amountUSD: Arbitrum_BigDecimal
  amountUSD_not: Arbitrum_BigDecimal
  amountUSD_gt: Arbitrum_BigDecimal
  amountUSD_lt: Arbitrum_BigDecimal
  amountUSD_gte: Arbitrum_BigDecimal
  amountUSD_lte: Arbitrum_BigDecimal
  amountUSD_in: [Arbitrum_BigDecimal!]
  amountUSD_not_in: [Arbitrum_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum_Withdraw_filter]
  or: [Arbitrum_Withdraw_filter]
}

enum Arbitrum_Withdraw_orderBy {
  id
  hash
  nonce
  logIndex
  gasLimit
  gasUsed
  gasPrice
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__liquidityTokenType
  position__liquidity
  position__liquidityUSD
  position__cumulativeDepositUSD
  position__cumulativeWithdrawUSD
  position__depositCount
  position__withdrawCount
  tickLower
  tickUpper
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  blockNumber
  timestamp
  liquidity
  inputTokens
  inputTokenAmounts
  reserveAmounts
  amountUSD
}

type Arbitrum__Block_ {
  """The hash of the block"""
  hash: Arbitrum_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Arbitrum_Bytes
}

"""  Used to keep track of the price of Ether/TVL in USD, pool deposit count, and total unique users 
"""
type Arbitrum__HelperStore {
  id: Arbitrum_Bytes!
  """ Token Prices """
  valueDecimalList: [Arbitrum_BigDecimal!]
  """ price of ETH/TVL in USD """
  valueDecimal: Arbitrum_BigDecimal
  """ # of deposits, # of unique users """
  valueInt: Int
}

input Arbitrum__HelperStore_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  valueDecimalList: [Arbitrum_BigDecimal!]
  valueDecimalList_not: [Arbitrum_BigDecimal!]
  valueDecimalList_contains: [Arbitrum_BigDecimal!]
  valueDecimalList_contains_nocase: [Arbitrum_BigDecimal!]
  valueDecimalList_not_contains: [Arbitrum_BigDecimal!]
  valueDecimalList_not_contains_nocase: [Arbitrum_BigDecimal!]
  valueDecimal: Arbitrum_BigDecimal
  valueDecimal_not: Arbitrum_BigDecimal
  valueDecimal_gt: Arbitrum_BigDecimal
  valueDecimal_lt: Arbitrum_BigDecimal
  valueDecimal_gte: Arbitrum_BigDecimal
  valueDecimal_lte: Arbitrum_BigDecimal
  valueDecimal_in: [Arbitrum_BigDecimal!]
  valueDecimal_not_in: [Arbitrum_BigDecimal!]
  valueInt: Int
  valueInt_not: Int
  valueInt_gt: Int
  valueInt_lt: Int
  valueInt_gte: Int
  valueInt_lte: Int
  valueInt_in: [Int!]
  valueInt_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum__HelperStore_filter]
  or: [Arbitrum__HelperStore_filter]
}

enum Arbitrum__HelperStore_orderBy {
  id
  valueDecimalList
  valueDecimal
  valueInt
}

type Arbitrum__LiquidityPoolAmount {
  """ Smart contract address of the pool """
  id: Arbitrum_Bytes!
  """ Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool 
  """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_Token_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_Token_filter): [Arbitrum_Token!]!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [Arbitrum_BigDecimal!]!
  tokenPrices: [Arbitrum_BigDecimal!]!
}

input Arbitrum__LiquidityPoolAmount_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Arbitrum_Token_filter
  inputTokenBalances: [Arbitrum_BigDecimal!]
  inputTokenBalances_not: [Arbitrum_BigDecimal!]
  inputTokenBalances_contains: [Arbitrum_BigDecimal!]
  inputTokenBalances_contains_nocase: [Arbitrum_BigDecimal!]
  inputTokenBalances_not_contains: [Arbitrum_BigDecimal!]
  inputTokenBalances_not_contains_nocase: [Arbitrum_BigDecimal!]
  tokenPrices: [Arbitrum_BigDecimal!]
  tokenPrices_not: [Arbitrum_BigDecimal!]
  tokenPrices_contains: [Arbitrum_BigDecimal!]
  tokenPrices_contains_nocase: [Arbitrum_BigDecimal!]
  tokenPrices_not_contains: [Arbitrum_BigDecimal!]
  tokenPrices_not_contains_nocase: [Arbitrum_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum__LiquidityPoolAmount_filter]
  or: [Arbitrum__LiquidityPoolAmount_filter]
}

enum Arbitrum__LiquidityPoolAmount_orderBy {
  id
  inputTokens
  inputTokenBalances
  tokenPrices
}

"""The type for the top-level _meta field"""
type Arbitrum__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: Arbitrum__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum Arbitrum__SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

""" This is used to keep tract of the derived price of tokens in ethereum and the whitelisted pools to which it belongs
"""
type Arbitrum__TokenWhitelist {
  """ Token Address """
  id: Arbitrum_Bytes!
  """ pools token is in that are white listed for USD pricing """
  whitelistPools(skip: Int = 0, first: Int = 100, orderBy: Arbitrum_LiquidityPool_orderBy, orderDirection: Arbitrum_OrderDirection, where: Arbitrum_LiquidityPool_filter): [Arbitrum_LiquidityPool!]!
}

type Arbitrum__TokenWhitelistSymbol {
  """ Whitelist Token Symbol """
  id: ID!
  """ Whitelist Token Address"""
  address: Arbitrum_Bytes!
}

input Arbitrum__TokenWhitelistSymbol_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Arbitrum_Bytes
  address_not: Arbitrum_Bytes
  address_gt: Arbitrum_Bytes
  address_lt: Arbitrum_Bytes
  address_gte: Arbitrum_Bytes
  address_lte: Arbitrum_Bytes
  address_in: [Arbitrum_Bytes!]
  address_not_in: [Arbitrum_Bytes!]
  address_contains: Arbitrum_Bytes
  address_not_contains: Arbitrum_Bytes
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum__TokenWhitelistSymbol_filter]
  or: [Arbitrum__TokenWhitelistSymbol_filter]
}

enum Arbitrum__TokenWhitelistSymbol_orderBy {
  id
  address
}

input Arbitrum__TokenWhitelist_filter {
  id: Arbitrum_Bytes
  id_not: Arbitrum_Bytes
  id_gt: Arbitrum_Bytes
  id_lt: Arbitrum_Bytes
  id_gte: Arbitrum_Bytes
  id_lte: Arbitrum_Bytes
  id_in: [Arbitrum_Bytes!]
  id_not_in: [Arbitrum_Bytes!]
  id_contains: Arbitrum_Bytes
  id_not_contains: Arbitrum_Bytes
  whitelistPools: [String!]
  whitelistPools_not: [String!]
  whitelistPools_contains: [String!]
  whitelistPools_contains_nocase: [String!]
  whitelistPools_not_contains: [String!]
  whitelistPools_not_contains_nocase: [String!]
  whitelistPools_: Arbitrum_LiquidityPool_filter
  """Filter for the block changed event."""
  _change_block: Arbitrum_BlockChangedFilter
  and: [Arbitrum__TokenWhitelist_filter]
  or: [Arbitrum__TokenWhitelist_filter]
}

enum Arbitrum__TokenWhitelist_orderBy {
  id
  whitelistPools
}

type Base_Account {
  """ { Account address } """
  id: Base_Bytes!
  """ Number of positions this account has """
  positionCount: Int!
  """ All positions that belong to this account """
  positions(skip: Int = 0, first: Int = 100, orderBy: Base_Position_orderBy, orderDirection: Base_OrderDirection, where: Base_Position_filter): [Base_Position!]!
  """ Number of open positions this account has """
  openPositionCount: Int!
  """ Number of closed positions this account has """
  closedPositionCount: Int!
  """ Number of deposits this account made """
  depositCount: Int!
  """ All deposit events of this account """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Base_Deposit_orderBy, orderDirection: Base_OrderDirection, where: Base_Deposit_filter): [Base_Deposit!]!
  """ Number of withdrawals this account made """
  withdrawCount: Int!
  """ All withdraw events of this account """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Base_Withdraw_orderBy, orderDirection: Base_OrderDirection, where: Base_Withdraw_filter): [Base_Withdraw!]!
  """ Number of times this account has traded/swapped"""
  swapCount: Int!
  """ All swap events of this account """
  swaps(skip: Int = 0, first: Int = 100, orderBy: Base_Swap_orderBy, orderDirection: Base_OrderDirection, where: Base_Swap_filter): [Base_Swap!]!
}

input Base_Account_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  positions_: Base_Position_filter
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  deposits_: Base_Deposit_filter
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  withdraws_: Base_Withdraw_filter
  swapCount: Int
  swapCount_not: Int
  swapCount_gt: Int
  swapCount_lt: Int
  swapCount_gte: Int
  swapCount_lte: Int
  swapCount_in: [Int!]
  swapCount_not_in: [Int!]
  swaps_: Base_Swap_filter
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_Account_filter]
  or: [Base_Account_filter]
}

enum Base_Account_orderBy {
  id
  positionCount
  positions
  openPositionCount
  closedPositionCount
  depositCount
  deposits
  withdrawCount
  withdraws
  swapCount
  swaps
}

type Base_ActiveAccount {
  """ { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch } 
  """
  id: Base_Bytes!
}

input Base_ActiveAccount_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_ActiveAccount_filter]
  or: [Base_ActiveAccount_filter]
}

enum Base_ActiveAccount_orderBy {
  id
}

enum Base_Aggregation_interval {
  hour
  day
}

scalar Base_BigDecimal

input Base_BlockChangedFilter {
  number_gte: Int!
}

input Base_Block_height {
  hash: Base_Bytes
  number: Int
  number_gte: Int
}

scalar Base_Bytes

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.

"""
type Base_Deposit {
  """ { Transaction hash }-{ Log index } """
  id: Base_Bytes!
  """ Transaction hash of the transaction that emitted this event """
  hash: Base_Bytes!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Gas limit of the transaction that emitted this event """
  gasLimit: BigInt
  """ Gas used in this transaction. (Optional because not every chain will support this) 
  """
  gasUsed: BigInt
  """ Gas price of the transaction that emitted this event """
  gasPrice: BigInt
  """ The protocol this transaction belongs to """
  protocol: Base_DexAmmProtocol!
  """ Account that emitted this event """
  account: Base_Account!
  """ The user position changed by this event """
  position: Base_Position
  """ The pool involving this event """
  pool: Base_LiquidityPool!
  """ lower tick of position """
  tickLower: BigInt
  """ upper tick of position """
  tickUpper: BigInt
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ Amount of liquidity minted """
  liquidity: BigInt!
  """ Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Base_Token_orderBy, orderDirection: Base_OrderDirection, where: Base_Token_filter): [Base_Token!]!
  """ Amount of input tokens in the token's native unit """
  inputTokenAmounts: [BigInt!]!
  """ Amount of input tokens in the liquidity pool """
  reserveAmounts: [BigInt!]
  """ USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool) 
  """
  amountUSD: Base_BigDecimal!
}

input Base_Deposit_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  hash: Base_Bytes
  hash_not: Base_Bytes
  hash_gt: Base_Bytes
  hash_lt: Base_Bytes
  hash_gte: Base_Bytes
  hash_lte: Base_Bytes
  hash_in: [Base_Bytes!]
  hash_not_in: [Base_Bytes!]
  hash_contains: Base_Bytes
  hash_not_contains: Base_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Base_DexAmmProtocol_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Base_Account_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Base_Position_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Base_LiquidityPool_filter
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Base_Token_filter
  inputTokenAmounts: [BigInt!]
  inputTokenAmounts_not: [BigInt!]
  inputTokenAmounts_contains: [BigInt!]
  inputTokenAmounts_contains_nocase: [BigInt!]
  inputTokenAmounts_not_contains: [BigInt!]
  inputTokenAmounts_not_contains_nocase: [BigInt!]
  reserveAmounts: [BigInt!]
  reserveAmounts_not: [BigInt!]
  reserveAmounts_contains: [BigInt!]
  reserveAmounts_contains_nocase: [BigInt!]
  reserveAmounts_not_contains: [BigInt!]
  reserveAmounts_not_contains_nocase: [BigInt!]
  amountUSD: Base_BigDecimal
  amountUSD_not: Base_BigDecimal
  amountUSD_gt: Base_BigDecimal
  amountUSD_lt: Base_BigDecimal
  amountUSD_gte: Base_BigDecimal
  amountUSD_lte: Base_BigDecimal
  amountUSD_in: [Base_BigDecimal!]
  amountUSD_not_in: [Base_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_Deposit_filter]
  or: [Base_Deposit_filter]
}

enum Base_Deposit_orderBy {
  id
  hash
  nonce
  logIndex
  gasLimit
  gasUsed
  gasPrice
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__liquidityTokenType
  position__liquidity
  position__liquidityUSD
  position__cumulativeDepositUSD
  position__cumulativeWithdrawUSD
  position__depositCount
  position__withdrawCount
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  tickLower
  tickUpper
  blockNumber
  timestamp
  liquidity
  inputTokens
  inputTokenAmounts
  reserveAmounts
  amountUSD
}

type Base_DexAmmProtocol implements Base_Protocol {
  """ Smart contract address of the protocol's main contract (Factory, Registry, etc) 
  """
  id: Base_Bytes!
  """ Name of the protocol, including version. e.g. Uniswap v3 """
  name: String!
  """ Slug of protocol, including version. e.g. uniswap-v3 """
  slug: String!
  """ Version of the subgraph schema, in SemVer format (e.g. 1.0.0) """
  schemaVersion: String!
  """ Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) 
  """
  subgraphVersion: String!
  """ Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) 
  """
  methodologyVersion: String!
  """ The blockchain network this subgraph is indexing on """
  network: Base_Network!
  """ The type of protocol (e.g. DEX, Lending, Yield, etc) """
  type: Base_ProtocolType!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: Base_BigDecimal!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Base_BigDecimal!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Base_BigDecimal!
  """ All protocol-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedProtocolSideValueUSD: Base_BigDecimal!
  """ All supply-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedSupplySideValueUSD: Base_BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: Base_BigDecimal
  """ All historical volume in USD """
  cumulativeVolumeUSD: Base_BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: Base_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: Base_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: Base_BigDecimal!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Number of cumulative liquidity providers """
  cumulativeUniqueLPs: Int!
  """ Number of cumulative traders """
  cumulativeUniqueTraders: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Total number of open positions """
  openPositionCount: Int!
  """ Total number of positions (open and closed) """
  cumulativePositionCount: Int!
  """ Day ID of the most recent daily snapshot """
  lastSnapshotDayID: Int!
  """ Timestamp of the last time this entity was updated """
  lastUpdateTimestamp: BigInt!
  """ Block number of the last time this entity was updated """
  lastUpdateBlockNumber: BigInt!
  """ Daily usage metrics for this protocol """
  dailyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Base_UsageMetricsDailySnapshot_orderBy, orderDirection: Base_OrderDirection, where: Base_UsageMetricsDailySnapshot_filter): [Base_UsageMetricsDailySnapshot!]!
  """ Hourly usage metrics for this protocol """
  hourlyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Base_UsageMetricsHourlySnapshot_orderBy, orderDirection: Base_OrderDirection, where: Base_UsageMetricsHourlySnapshot_filter): [Base_UsageMetricsHourlySnapshot!]!
  """ Daily financial metrics for this protocol """
  financialMetrics(skip: Int = 0, first: Int = 100, orderBy: Base_FinancialsDailySnapshot_orderBy, orderDirection: Base_OrderDirection, where: Base_FinancialsDailySnapshot_filter): [Base_FinancialsDailySnapshot!]!
  """ All pools that belong to this protocol """
  pools(skip: Int = 0, first: Int = 100, orderBy: Base_LiquidityPool_orderBy, orderDirection: Base_OrderDirection, where: Base_LiquidityPool_filter): [Base_LiquidityPool!]!
  """ This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis 
  """
  _regenesis: Boolean!
}

input Base_DexAmmProtocol_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  schemaVersion: String
  schemaVersion_not: String
  schemaVersion_gt: String
  schemaVersion_lt: String
  schemaVersion_gte: String
  schemaVersion_lte: String
  schemaVersion_in: [String!]
  schemaVersion_not_in: [String!]
  schemaVersion_contains: String
  schemaVersion_contains_nocase: String
  schemaVersion_not_contains: String
  schemaVersion_not_contains_nocase: String
  schemaVersion_starts_with: String
  schemaVersion_starts_with_nocase: String
  schemaVersion_not_starts_with: String
  schemaVersion_not_starts_with_nocase: String
  schemaVersion_ends_with: String
  schemaVersion_ends_with_nocase: String
  schemaVersion_not_ends_with: String
  schemaVersion_not_ends_with_nocase: String
  subgraphVersion: String
  subgraphVersion_not: String
  subgraphVersion_gt: String
  subgraphVersion_lt: String
  subgraphVersion_gte: String
  subgraphVersion_lte: String
  subgraphVersion_in: [String!]
  subgraphVersion_not_in: [String!]
  subgraphVersion_contains: String
  subgraphVersion_contains_nocase: String
  subgraphVersion_not_contains: String
  subgraphVersion_not_contains_nocase: String
  subgraphVersion_starts_with: String
  subgraphVersion_starts_with_nocase: String
  subgraphVersion_not_starts_with: String
  subgraphVersion_not_starts_with_nocase: String
  subgraphVersion_ends_with: String
  subgraphVersion_ends_with_nocase: String
  subgraphVersion_not_ends_with: String
  subgraphVersion_not_ends_with_nocase: String
  methodologyVersion: String
  methodologyVersion_not: String
  methodologyVersion_gt: String
  methodologyVersion_lt: String
  methodologyVersion_gte: String
  methodologyVersion_lte: String
  methodologyVersion_in: [String!]
  methodologyVersion_not_in: [String!]
  methodologyVersion_contains: String
  methodologyVersion_contains_nocase: String
  methodologyVersion_not_contains: String
  methodologyVersion_not_contains_nocase: String
  methodologyVersion_starts_with: String
  methodologyVersion_starts_with_nocase: String
  methodologyVersion_not_starts_with: String
  methodologyVersion_not_starts_with_nocase: String
  methodologyVersion_ends_with: String
  methodologyVersion_ends_with_nocase: String
  methodologyVersion_not_ends_with: String
  methodologyVersion_not_ends_with_nocase: String
  network: Base_Network
  network_not: Base_Network
  network_in: [Base_Network!]
  network_not_in: [Base_Network!]
  type: Base_ProtocolType
  type_not: Base_ProtocolType
  type_in: [Base_ProtocolType!]
  type_not_in: [Base_ProtocolType!]
  totalValueLockedUSD: Base_BigDecimal
  totalValueLockedUSD_not: Base_BigDecimal
  totalValueLockedUSD_gt: Base_BigDecimal
  totalValueLockedUSD_lt: Base_BigDecimal
  totalValueLockedUSD_gte: Base_BigDecimal
  totalValueLockedUSD_lte: Base_BigDecimal
  totalValueLockedUSD_in: [Base_BigDecimal!]
  totalValueLockedUSD_not_in: [Base_BigDecimal!]
  totalLiquidityUSD: Base_BigDecimal
  totalLiquidityUSD_not: Base_BigDecimal
  totalLiquidityUSD_gt: Base_BigDecimal
  totalLiquidityUSD_lt: Base_BigDecimal
  totalLiquidityUSD_gte: Base_BigDecimal
  totalLiquidityUSD_lte: Base_BigDecimal
  totalLiquidityUSD_in: [Base_BigDecimal!]
  totalLiquidityUSD_not_in: [Base_BigDecimal!]
  activeLiquidityUSD: Base_BigDecimal
  activeLiquidityUSD_not: Base_BigDecimal
  activeLiquidityUSD_gt: Base_BigDecimal
  activeLiquidityUSD_lt: Base_BigDecimal
  activeLiquidityUSD_gte: Base_BigDecimal
  activeLiquidityUSD_lte: Base_BigDecimal
  activeLiquidityUSD_in: [Base_BigDecimal!]
  activeLiquidityUSD_not_in: [Base_BigDecimal!]
  uncollectedProtocolSideValueUSD: Base_BigDecimal
  uncollectedProtocolSideValueUSD_not: Base_BigDecimal
  uncollectedProtocolSideValueUSD_gt: Base_BigDecimal
  uncollectedProtocolSideValueUSD_lt: Base_BigDecimal
  uncollectedProtocolSideValueUSD_gte: Base_BigDecimal
  uncollectedProtocolSideValueUSD_lte: Base_BigDecimal
  uncollectedProtocolSideValueUSD_in: [Base_BigDecimal!]
  uncollectedProtocolSideValueUSD_not_in: [Base_BigDecimal!]
  uncollectedSupplySideValueUSD: Base_BigDecimal
  uncollectedSupplySideValueUSD_not: Base_BigDecimal
  uncollectedSupplySideValueUSD_gt: Base_BigDecimal
  uncollectedSupplySideValueUSD_lt: Base_BigDecimal
  uncollectedSupplySideValueUSD_gte: Base_BigDecimal
  uncollectedSupplySideValueUSD_lte: Base_BigDecimal
  uncollectedSupplySideValueUSD_in: [Base_BigDecimal!]
  uncollectedSupplySideValueUSD_not_in: [Base_BigDecimal!]
  protocolControlledValueUSD: Base_BigDecimal
  protocolControlledValueUSD_not: Base_BigDecimal
  protocolControlledValueUSD_gt: Base_BigDecimal
  protocolControlledValueUSD_lt: Base_BigDecimal
  protocolControlledValueUSD_gte: Base_BigDecimal
  protocolControlledValueUSD_lte: Base_BigDecimal
  protocolControlledValueUSD_in: [Base_BigDecimal!]
  protocolControlledValueUSD_not_in: [Base_BigDecimal!]
  cumulativeVolumeUSD: Base_BigDecimal
  cumulativeVolumeUSD_not: Base_BigDecimal
  cumulativeVolumeUSD_gt: Base_BigDecimal
  cumulativeVolumeUSD_lt: Base_BigDecimal
  cumulativeVolumeUSD_gte: Base_BigDecimal
  cumulativeVolumeUSD_lte: Base_BigDecimal
  cumulativeVolumeUSD_in: [Base_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Base_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Base_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Base_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeTotalRevenueUSD: Base_BigDecimal
  cumulativeTotalRevenueUSD_not: Base_BigDecimal
  cumulativeTotalRevenueUSD_gt: Base_BigDecimal
  cumulativeTotalRevenueUSD_lt: Base_BigDecimal
  cumulativeTotalRevenueUSD_gte: Base_BigDecimal
  cumulativeTotalRevenueUSD_lte: Base_BigDecimal
  cumulativeTotalRevenueUSD_in: [Base_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  cumulativeUniqueLPs: Int
  cumulativeUniqueLPs_not: Int
  cumulativeUniqueLPs_gt: Int
  cumulativeUniqueLPs_lt: Int
  cumulativeUniqueLPs_gte: Int
  cumulativeUniqueLPs_lte: Int
  cumulativeUniqueLPs_in: [Int!]
  cumulativeUniqueLPs_not_in: [Int!]
  cumulativeUniqueTraders: Int
  cumulativeUniqueTraders_not: Int
  cumulativeUniqueTraders_gt: Int
  cumulativeUniqueTraders_lt: Int
  cumulativeUniqueTraders_gte: Int
  cumulativeUniqueTraders_lte: Int
  cumulativeUniqueTraders_in: [Int!]
  cumulativeUniqueTraders_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  cumulativePositionCount: Int
  cumulativePositionCount_not: Int
  cumulativePositionCount_gt: Int
  cumulativePositionCount_lt: Int
  cumulativePositionCount_gte: Int
  cumulativePositionCount_lte: Int
  cumulativePositionCount_in: [Int!]
  cumulativePositionCount_not_in: [Int!]
  lastSnapshotDayID: Int
  lastSnapshotDayID_not: Int
  lastSnapshotDayID_gt: Int
  lastSnapshotDayID_lt: Int
  lastSnapshotDayID_gte: Int
  lastSnapshotDayID_lte: Int
  lastSnapshotDayID_in: [Int!]
  lastSnapshotDayID_not_in: [Int!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  dailyUsageMetrics_: Base_UsageMetricsDailySnapshot_filter
  hourlyUsageMetrics_: Base_UsageMetricsHourlySnapshot_filter
  financialMetrics_: Base_FinancialsDailySnapshot_filter
  pools_: Base_LiquidityPool_filter
  _regenesis: Boolean
  _regenesis_not: Boolean
  _regenesis_in: [Boolean!]
  _regenesis_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_DexAmmProtocol_filter]
  or: [Base_DexAmmProtocol_filter]
}

enum Base_DexAmmProtocol_orderBy {
  id
  name
  slug
  schemaVersion
  subgraphVersion
  methodologyVersion
  network
  type
  totalValueLockedUSD
  totalLiquidityUSD
  activeLiquidityUSD
  uncollectedProtocolSideValueUSD
  uncollectedSupplySideValueUSD
  protocolControlledValueUSD
  cumulativeVolumeUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  cumulativeUniqueUsers
  cumulativeUniqueLPs
  cumulativeUniqueTraders
  totalPoolCount
  openPositionCount
  cumulativePositionCount
  lastSnapshotDayID
  lastUpdateTimestamp
  lastUpdateBlockNumber
  dailyUsageMetrics
  hourlyUsageMetrics
  financialMetrics
  pools
  _regenesis
}

type Base_FinancialsDailySnapshot {
  """ ID is # of days since Unix epoch time """
  id: Base_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ Protocol this snapshot is associated with """
  protocol: Base_DexAmmProtocol!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: Base_BigDecimal!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Base_BigDecimal!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Base_BigDecimal!
  """ All protocol-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedProtocolSideValueUSD: Base_BigDecimal!
  """ All supply-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedSupplySideValueUSD: Base_BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: Base_BigDecimal
  """ All trade volume occurred in a given day, in USD """
  dailyVolumeUSD: Base_BigDecimal!
  """ All historical trade volume in USD """
  cumulativeVolumeUSD: Base_BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  dailySupplySideRevenueUSD: Base_BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: Base_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  dailyProtocolSideRevenueUSD: Base_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: Base_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  dailyTotalRevenueUSD: Base_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: Base_BigDecimal!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Base_FinancialsDailySnapshot_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Base_DexAmmProtocol_filter
  totalValueLockedUSD: Base_BigDecimal
  totalValueLockedUSD_not: Base_BigDecimal
  totalValueLockedUSD_gt: Base_BigDecimal
  totalValueLockedUSD_lt: Base_BigDecimal
  totalValueLockedUSD_gte: Base_BigDecimal
  totalValueLockedUSD_lte: Base_BigDecimal
  totalValueLockedUSD_in: [Base_BigDecimal!]
  totalValueLockedUSD_not_in: [Base_BigDecimal!]
  totalLiquidityUSD: Base_BigDecimal
  totalLiquidityUSD_not: Base_BigDecimal
  totalLiquidityUSD_gt: Base_BigDecimal
  totalLiquidityUSD_lt: Base_BigDecimal
  totalLiquidityUSD_gte: Base_BigDecimal
  totalLiquidityUSD_lte: Base_BigDecimal
  totalLiquidityUSD_in: [Base_BigDecimal!]
  totalLiquidityUSD_not_in: [Base_BigDecimal!]
  activeLiquidityUSD: Base_BigDecimal
  activeLiquidityUSD_not: Base_BigDecimal
  activeLiquidityUSD_gt: Base_BigDecimal
  activeLiquidityUSD_lt: Base_BigDecimal
  activeLiquidityUSD_gte: Base_BigDecimal
  activeLiquidityUSD_lte: Base_BigDecimal
  activeLiquidityUSD_in: [Base_BigDecimal!]
  activeLiquidityUSD_not_in: [Base_BigDecimal!]
  uncollectedProtocolSideValueUSD: Base_BigDecimal
  uncollectedProtocolSideValueUSD_not: Base_BigDecimal
  uncollectedProtocolSideValueUSD_gt: Base_BigDecimal
  uncollectedProtocolSideValueUSD_lt: Base_BigDecimal
  uncollectedProtocolSideValueUSD_gte: Base_BigDecimal
  uncollectedProtocolSideValueUSD_lte: Base_BigDecimal
  uncollectedProtocolSideValueUSD_in: [Base_BigDecimal!]
  uncollectedProtocolSideValueUSD_not_in: [Base_BigDecimal!]
  uncollectedSupplySideValueUSD: Base_BigDecimal
  uncollectedSupplySideValueUSD_not: Base_BigDecimal
  uncollectedSupplySideValueUSD_gt: Base_BigDecimal
  uncollectedSupplySideValueUSD_lt: Base_BigDecimal
  uncollectedSupplySideValueUSD_gte: Base_BigDecimal
  uncollectedSupplySideValueUSD_lte: Base_BigDecimal
  uncollectedSupplySideValueUSD_in: [Base_BigDecimal!]
  uncollectedSupplySideValueUSD_not_in: [Base_BigDecimal!]
  protocolControlledValueUSD: Base_BigDecimal
  protocolControlledValueUSD_not: Base_BigDecimal
  protocolControlledValueUSD_gt: Base_BigDecimal
  protocolControlledValueUSD_lt: Base_BigDecimal
  protocolControlledValueUSD_gte: Base_BigDecimal
  protocolControlledValueUSD_lte: Base_BigDecimal
  protocolControlledValueUSD_in: [Base_BigDecimal!]
  protocolControlledValueUSD_not_in: [Base_BigDecimal!]
  dailyVolumeUSD: Base_BigDecimal
  dailyVolumeUSD_not: Base_BigDecimal
  dailyVolumeUSD_gt: Base_BigDecimal
  dailyVolumeUSD_lt: Base_BigDecimal
  dailyVolumeUSD_gte: Base_BigDecimal
  dailyVolumeUSD_lte: Base_BigDecimal
  dailyVolumeUSD_in: [Base_BigDecimal!]
  dailyVolumeUSD_not_in: [Base_BigDecimal!]
  cumulativeVolumeUSD: Base_BigDecimal
  cumulativeVolumeUSD_not: Base_BigDecimal
  cumulativeVolumeUSD_gt: Base_BigDecimal
  cumulativeVolumeUSD_lt: Base_BigDecimal
  cumulativeVolumeUSD_gte: Base_BigDecimal
  cumulativeVolumeUSD_lte: Base_BigDecimal
  cumulativeVolumeUSD_in: [Base_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Base_BigDecimal!]
  dailySupplySideRevenueUSD: Base_BigDecimal
  dailySupplySideRevenueUSD_not: Base_BigDecimal
  dailySupplySideRevenueUSD_gt: Base_BigDecimal
  dailySupplySideRevenueUSD_lt: Base_BigDecimal
  dailySupplySideRevenueUSD_gte: Base_BigDecimal
  dailySupplySideRevenueUSD_lte: Base_BigDecimal
  dailySupplySideRevenueUSD_in: [Base_BigDecimal!]
  dailySupplySideRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Base_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Base_BigDecimal!]
  dailyProtocolSideRevenueUSD: Base_BigDecimal
  dailyProtocolSideRevenueUSD_not: Base_BigDecimal
  dailyProtocolSideRevenueUSD_gt: Base_BigDecimal
  dailyProtocolSideRevenueUSD_lt: Base_BigDecimal
  dailyProtocolSideRevenueUSD_gte: Base_BigDecimal
  dailyProtocolSideRevenueUSD_lte: Base_BigDecimal
  dailyProtocolSideRevenueUSD_in: [Base_BigDecimal!]
  dailyProtocolSideRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Base_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Base_BigDecimal!]
  dailyTotalRevenueUSD: Base_BigDecimal
  dailyTotalRevenueUSD_not: Base_BigDecimal
  dailyTotalRevenueUSD_gt: Base_BigDecimal
  dailyTotalRevenueUSD_lt: Base_BigDecimal
  dailyTotalRevenueUSD_gte: Base_BigDecimal
  dailyTotalRevenueUSD_lte: Base_BigDecimal
  dailyTotalRevenueUSD_in: [Base_BigDecimal!]
  dailyTotalRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeTotalRevenueUSD: Base_BigDecimal
  cumulativeTotalRevenueUSD_not: Base_BigDecimal
  cumulativeTotalRevenueUSD_gt: Base_BigDecimal
  cumulativeTotalRevenueUSD_lt: Base_BigDecimal
  cumulativeTotalRevenueUSD_gte: Base_BigDecimal
  cumulativeTotalRevenueUSD_lte: Base_BigDecimal
  cumulativeTotalRevenueUSD_in: [Base_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Base_BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_FinancialsDailySnapshot_filter]
  or: [Base_FinancialsDailySnapshot_filter]
}

enum Base_FinancialsDailySnapshot_orderBy {
  id
  day
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  totalValueLockedUSD
  totalLiquidityUSD
  activeLiquidityUSD
  uncollectedProtocolSideValueUSD
  uncollectedSupplySideValueUSD
  protocolControlledValueUSD
  dailyVolumeUSD
  cumulativeVolumeUSD
  dailySupplySideRevenueUSD
  cumulativeSupplySideRevenueUSD
  dailyProtocolSideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  dailyTotalRevenueUSD
  cumulativeTotalRevenueUSD
  timestamp
  blockNumber
}

"""
8 bytes signed integer

"""
scalar Base_Int8

type Base_LiquidityPool {
  """ Smart contract address of the pool """
  id: Base_Bytes!
  """ The protocol this pool belongs to """
  protocol: Base_DexAmmProtocol!
  """ Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT) """
  name: String
  """ Symbol of liquidity pool (e.g. 3CRV) """
  symbol: String
  """ Token that is to represent ownership of liquidity """
  liquidityToken: Base_Token
  """ Type of token used to track liquidity """
  liquidityTokenType: Base_TokenType
  """ Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer 
  """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Base_Token_orderBy, orderDirection: Base_OrderDirection, where: Base_Token_filter): [Base_Token!]!
  """ Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon 
  """
  rewardTokens(skip: Int = 0, first: Int = 100, orderBy: Base_RewardToken_orderBy, orderDirection: Base_OrderDirection, where: Base_RewardToken_filter): [Base_RewardToken!]
  """ Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee. ) 
  """
  fees(skip: Int = 0, first: Int = 100, orderBy: Base_LiquidityPoolFee_orderBy, orderDirection: Base_OrderDirection, where: Base_LiquidityPoolFee_filter): [Base_LiquidityPoolFee!]!
  """ Whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol. 
  """
  isSingleSided: Boolean!
  """ Creation timestamp """
  createdTimestamp: BigInt!
  """ Creation block number """
  createdBlockNumber: BigInt!
  """ Current tick representing the price of token0/token1 """
  tick: BigInt
  """ Current TVL (Total Value Locked) of this pool in USD """
  totalValueLockedUSD: Base_BigDecimal!
  """ The sum of all active and non-active liquidity for this pool. """
  totalLiquidity: BigInt!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Base_BigDecimal!
  """ All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidity: BigInt!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Base_BigDecimal!
  """ All protocol-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  """ All protocol-side value locking in USD that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideValuesUSD: [Base_BigDecimal!]!
  """ All supply-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  """ All supply-side value locked in USD that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideValuesUSD: [Base_BigDecimal!]!
  """ All revenue generated by the liquidity pool, accrued to the supply side. 
  """
  cumulativeSupplySideRevenueUSD: Base_BigDecimal!
  """ All revenue generated by the liquidity pool, accrued to the protocol. 
  """
  cumulativeProtocolSideRevenueUSD: Base_BigDecimal!
  """ All revenue generated by the liquidity pool. """
  cumulativeTotalRevenueUSD: Base_BigDecimal!
  """ All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenAmount: [BigInt!]!
  """ All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenUSD: [Base_BigDecimal!]!
  """ All historical trade volume occurred in this pool, in USD """
  cumulativeVolumeUSD: Base_BigDecimal!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalancesUSD: [Base_BigDecimal!]!
  """ Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool 
  """
  inputTokenWeights: [Base_BigDecimal!]!
  """ Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. 
  """
  stakedOutputTokenAmount: BigInt
  """ Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [Base_BigDecimal!]
  """ Total number of deposits (add liquidity) """
  cumulativeDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) """
  cumulativeWithdrawCount: Int!
  """ Total number of trades (swaps) """
  cumulativeSwapCount: Int!
  """ All positions in this market """
  positions(skip: Int = 0, first: Int = 100, orderBy: Base_Position_orderBy, orderDirection: Base_OrderDirection, where: Base_Position_filter): [Base_Position!]!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Day ID of the most recent daily snapshot """
  lastSnapshotDayID: Int!
  """ Hour ID of the most recent hourly snapshot """
  lastSnapshotHourID: Int!
  """ Timestamp of the last time this entity was updated """
  lastUpdateTimestamp: BigInt!
  """ Block number of the last time this entity was updated """
  lastUpdateBlockNumber: BigInt!
  """ Liquidity pool daily snapshots """
  dailySnapshots(skip: Int = 0, first: Int = 100, orderBy: Base_LiquidityPoolDailySnapshot_orderBy, orderDirection: Base_OrderDirection, where: Base_LiquidityPoolDailySnapshot_filter): [Base_LiquidityPoolDailySnapshot!]!
  """ Liquidity pool hourly snapshots """
  hourlySnapshots(skip: Int = 0, first: Int = 100, orderBy: Base_LiquidityPoolHourlySnapshot_orderBy, orderDirection: Base_OrderDirection, where: Base_LiquidityPoolHourlySnapshot_filter): [Base_LiquidityPoolHourlySnapshot!]!
  """ All deposit (add liquidity) events occurred in this pool """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Base_Deposit_orderBy, orderDirection: Base_OrderDirection, where: Base_Deposit_filter): [Base_Deposit!]!
  """ All withdraw (remove liquidity) events occurred in this pool """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Base_Withdraw_orderBy, orderDirection: Base_OrderDirection, where: Base_Withdraw_filter): [Base_Withdraw!]!
  """ All trade (swap) events occurred in this pool """
  swaps(skip: Int = 0, first: Int = 100, orderBy: Base_Swap_orderBy, orderDirection: Base_OrderDirection, where: Base_Swap_filter): [Base_Swap!]!
}

type Base_LiquidityPoolDailySnapshot {
  """ { Smart contract address of the pool }-{ # of days since Unix epoch time } 
  """
  id: Base_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ The protocol this snapshot belongs to """
  protocol: Base_DexAmmProtocol!
  """ The pool this snapshot belongs to """
  pool: Base_LiquidityPool!
  """ Current tick representing the price of token0/token1 """
  tick: BigInt
  """ Current TVL (Total Value Locked) of this pool """
  totalValueLockedUSD: Base_BigDecimal!
  """ The sum of all active and non-active liquidity for this pool. """
  totalLiquidity: BigInt!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Base_BigDecimal!
  """ All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidity: BigInt!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Base_BigDecimal!
  """ All protocol-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  """ All protocol-side value locking in USD that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideValuesUSD: [Base_BigDecimal!]!
  """ All supply-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  """ All supply-side value locked in USD that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideValuesUSD: [Base_BigDecimal!]!
  """ All revenue generated by the liquidity pool, accrued to the supply side. 
  """
  cumulativeSupplySideRevenueUSD: Base_BigDecimal!
  """ Daily revenue generated by the liquidity pool, accrued to the supply side. 
  """
  dailySupplySideRevenueUSD: Base_BigDecimal!
  """ All revenue generated by the liquidity pool, accrued to the protocol. 
  """
  cumulativeProtocolSideRevenueUSD: Base_BigDecimal!
  """ Daily revenue generated by the liquidity pool, accrued to the protocol. 
  """
  dailyProtocolSideRevenueUSD: Base_BigDecimal!
  """ All revenue generated by the liquidity pool. """
  cumulativeTotalRevenueUSD: Base_BigDecimal!
  """ Daily revenue generated by the liquidity pool. """
  dailyTotalRevenueUSD: Base_BigDecimal!
  """ All historical trade volume occurred in this pool, in USD """
  cumulativeVolumeUSD: Base_BigDecimal!
  """ All trade volume occurred in a given day, in USD """
  dailyVolumeUSD: Base_BigDecimal!
  """ All trade volume , in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenAmount: [BigInt!]!
  """ All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  dailyVolumeByTokenAmount: [BigInt!]!
  """ All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenUSD: [Base_BigDecimal!]!
  """ All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  dailyVolumeByTokenUSD: [Base_BigDecimal!]!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalancesUSD: [Base_BigDecimal!]!
  """ Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool 
  """
  inputTokenWeights: [Base_BigDecimal!]!
  """ Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. 
  """
  stakedOutputTokenAmount: BigInt
  """ Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [Base_BigDecimal!]
  """ Total number of deposits (add liquidity) """
  cumulativeDepositCount: Int!
  """ Total number of deposits (add liquidity) in a day """
  dailyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) """
  cumulativeWithdrawCount: Int!
  """ Total number of withdrawals (remove liquidity) in a day """
  dailyWithdrawCount: Int!
  """ Total number of trades (swaps) """
  cumulativeSwapCount: Int!
  """ Total number of trades (swaps) in a day """
  dailySwapCount: Int!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Base_LiquidityPoolDailySnapshot_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Base_DexAmmProtocol_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Base_LiquidityPool_filter
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  totalValueLockedUSD: Base_BigDecimal
  totalValueLockedUSD_not: Base_BigDecimal
  totalValueLockedUSD_gt: Base_BigDecimal
  totalValueLockedUSD_lt: Base_BigDecimal
  totalValueLockedUSD_gte: Base_BigDecimal
  totalValueLockedUSD_lte: Base_BigDecimal
  totalValueLockedUSD_in: [Base_BigDecimal!]
  totalValueLockedUSD_not_in: [Base_BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalLiquidityUSD: Base_BigDecimal
  totalLiquidityUSD_not: Base_BigDecimal
  totalLiquidityUSD_gt: Base_BigDecimal
  totalLiquidityUSD_lt: Base_BigDecimal
  totalLiquidityUSD_gte: Base_BigDecimal
  totalLiquidityUSD_lte: Base_BigDecimal
  totalLiquidityUSD_in: [Base_BigDecimal!]
  totalLiquidityUSD_not_in: [Base_BigDecimal!]
  activeLiquidity: BigInt
  activeLiquidity_not: BigInt
  activeLiquidity_gt: BigInt
  activeLiquidity_lt: BigInt
  activeLiquidity_gte: BigInt
  activeLiquidity_lte: BigInt
  activeLiquidity_in: [BigInt!]
  activeLiquidity_not_in: [BigInt!]
  activeLiquidityUSD: Base_BigDecimal
  activeLiquidityUSD_not: Base_BigDecimal
  activeLiquidityUSD_gt: Base_BigDecimal
  activeLiquidityUSD_lt: Base_BigDecimal
  activeLiquidityUSD_gte: Base_BigDecimal
  activeLiquidityUSD_lte: Base_BigDecimal
  activeLiquidityUSD_in: [Base_BigDecimal!]
  activeLiquidityUSD_not_in: [Base_BigDecimal!]
  uncollectedProtocolSideTokenAmounts: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedProtocolSideValuesUSD: [Base_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not: [Base_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains: [Base_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains_nocase: [Base_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains: [Base_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains_nocase: [Base_BigDecimal!]
  uncollectedSupplySideTokenAmounts: [BigInt!]
  uncollectedSupplySideTokenAmounts_not: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedSupplySideValuesUSD: [Base_BigDecimal!]
  uncollectedSupplySideValuesUSD_not: [Base_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains: [Base_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains_nocase: [Base_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains: [Base_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains_nocase: [Base_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Base_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Base_BigDecimal!]
  dailySupplySideRevenueUSD: Base_BigDecimal
  dailySupplySideRevenueUSD_not: Base_BigDecimal
  dailySupplySideRevenueUSD_gt: Base_BigDecimal
  dailySupplySideRevenueUSD_lt: Base_BigDecimal
  dailySupplySideRevenueUSD_gte: Base_BigDecimal
  dailySupplySideRevenueUSD_lte: Base_BigDecimal
  dailySupplySideRevenueUSD_in: [Base_BigDecimal!]
  dailySupplySideRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Base_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Base_BigDecimal!]
  dailyProtocolSideRevenueUSD: Base_BigDecimal
  dailyProtocolSideRevenueUSD_not: Base_BigDecimal
  dailyProtocolSideRevenueUSD_gt: Base_BigDecimal
  dailyProtocolSideRevenueUSD_lt: Base_BigDecimal
  dailyProtocolSideRevenueUSD_gte: Base_BigDecimal
  dailyProtocolSideRevenueUSD_lte: Base_BigDecimal
  dailyProtocolSideRevenueUSD_in: [Base_BigDecimal!]
  dailyProtocolSideRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeTotalRevenueUSD: Base_BigDecimal
  cumulativeTotalRevenueUSD_not: Base_BigDecimal
  cumulativeTotalRevenueUSD_gt: Base_BigDecimal
  cumulativeTotalRevenueUSD_lt: Base_BigDecimal
  cumulativeTotalRevenueUSD_gte: Base_BigDecimal
  cumulativeTotalRevenueUSD_lte: Base_BigDecimal
  cumulativeTotalRevenueUSD_in: [Base_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Base_BigDecimal!]
  dailyTotalRevenueUSD: Base_BigDecimal
  dailyTotalRevenueUSD_not: Base_BigDecimal
  dailyTotalRevenueUSD_gt: Base_BigDecimal
  dailyTotalRevenueUSD_lt: Base_BigDecimal
  dailyTotalRevenueUSD_gte: Base_BigDecimal
  dailyTotalRevenueUSD_lte: Base_BigDecimal
  dailyTotalRevenueUSD_in: [Base_BigDecimal!]
  dailyTotalRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeVolumeUSD: Base_BigDecimal
  cumulativeVolumeUSD_not: Base_BigDecimal
  cumulativeVolumeUSD_gt: Base_BigDecimal
  cumulativeVolumeUSD_lt: Base_BigDecimal
  cumulativeVolumeUSD_gte: Base_BigDecimal
  cumulativeVolumeUSD_lte: Base_BigDecimal
  cumulativeVolumeUSD_in: [Base_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Base_BigDecimal!]
  dailyVolumeUSD: Base_BigDecimal
  dailyVolumeUSD_not: Base_BigDecimal
  dailyVolumeUSD_gt: Base_BigDecimal
  dailyVolumeUSD_lt: Base_BigDecimal
  dailyVolumeUSD_gte: Base_BigDecimal
  dailyVolumeUSD_lte: Base_BigDecimal
  dailyVolumeUSD_in: [Base_BigDecimal!]
  dailyVolumeUSD_not_in: [Base_BigDecimal!]
  cumulativeVolumeByTokenAmount: [BigInt!]
  cumulativeVolumeByTokenAmount_not: [BigInt!]
  cumulativeVolumeByTokenAmount_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  dailyVolumeByTokenAmount: [BigInt!]
  dailyVolumeByTokenAmount_not: [BigInt!]
  dailyVolumeByTokenAmount_contains: [BigInt!]
  dailyVolumeByTokenAmount_contains_nocase: [BigInt!]
  dailyVolumeByTokenAmount_not_contains: [BigInt!]
  dailyVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenUSD: [Base_BigDecimal!]
  cumulativeVolumeByTokenUSD_not: [Base_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains: [Base_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains_nocase: [Base_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains: [Base_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains_nocase: [Base_BigDecimal!]
  dailyVolumeByTokenUSD: [Base_BigDecimal!]
  dailyVolumeByTokenUSD_not: [Base_BigDecimal!]
  dailyVolumeByTokenUSD_contains: [Base_BigDecimal!]
  dailyVolumeByTokenUSD_contains_nocase: [Base_BigDecimal!]
  dailyVolumeByTokenUSD_not_contains: [Base_BigDecimal!]
  dailyVolumeByTokenUSD_not_contains_nocase: [Base_BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenBalancesUSD: [Base_BigDecimal!]
  inputTokenBalancesUSD_not: [Base_BigDecimal!]
  inputTokenBalancesUSD_contains: [Base_BigDecimal!]
  inputTokenBalancesUSD_contains_nocase: [Base_BigDecimal!]
  inputTokenBalancesUSD_not_contains: [Base_BigDecimal!]
  inputTokenBalancesUSD_not_contains_nocase: [Base_BigDecimal!]
  inputTokenWeights: [Base_BigDecimal!]
  inputTokenWeights_not: [Base_BigDecimal!]
  inputTokenWeights_contains: [Base_BigDecimal!]
  inputTokenWeights_contains_nocase: [Base_BigDecimal!]
  inputTokenWeights_not_contains: [Base_BigDecimal!]
  inputTokenWeights_not_contains_nocase: [Base_BigDecimal!]
  stakedOutputTokenAmount: BigInt
  stakedOutputTokenAmount_not: BigInt
  stakedOutputTokenAmount_gt: BigInt
  stakedOutputTokenAmount_lt: BigInt
  stakedOutputTokenAmount_gte: BigInt
  stakedOutputTokenAmount_lte: BigInt
  stakedOutputTokenAmount_in: [BigInt!]
  stakedOutputTokenAmount_not_in: [BigInt!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [Base_BigDecimal!]
  rewardTokenEmissionsUSD_not: [Base_BigDecimal!]
  rewardTokenEmissionsUSD_contains: [Base_BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [Base_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [Base_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [Base_BigDecimal!]
  cumulativeDepositCount: Int
  cumulativeDepositCount_not: Int
  cumulativeDepositCount_gt: Int
  cumulativeDepositCount_lt: Int
  cumulativeDepositCount_gte: Int
  cumulativeDepositCount_lte: Int
  cumulativeDepositCount_in: [Int!]
  cumulativeDepositCount_not_in: [Int!]
  dailyDepositCount: Int
  dailyDepositCount_not: Int
  dailyDepositCount_gt: Int
  dailyDepositCount_lt: Int
  dailyDepositCount_gte: Int
  dailyDepositCount_lte: Int
  dailyDepositCount_in: [Int!]
  dailyDepositCount_not_in: [Int!]
  cumulativeWithdrawCount: Int
  cumulativeWithdrawCount_not: Int
  cumulativeWithdrawCount_gt: Int
  cumulativeWithdrawCount_lt: Int
  cumulativeWithdrawCount_gte: Int
  cumulativeWithdrawCount_lte: Int
  cumulativeWithdrawCount_in: [Int!]
  cumulativeWithdrawCount_not_in: [Int!]
  dailyWithdrawCount: Int
  dailyWithdrawCount_not: Int
  dailyWithdrawCount_gt: Int
  dailyWithdrawCount_lt: Int
  dailyWithdrawCount_gte: Int
  dailyWithdrawCount_lte: Int
  dailyWithdrawCount_in: [Int!]
  dailyWithdrawCount_not_in: [Int!]
  cumulativeSwapCount: Int
  cumulativeSwapCount_not: Int
  cumulativeSwapCount_gt: Int
  cumulativeSwapCount_lt: Int
  cumulativeSwapCount_gte: Int
  cumulativeSwapCount_lte: Int
  cumulativeSwapCount_in: [Int!]
  cumulativeSwapCount_not_in: [Int!]
  dailySwapCount: Int
  dailySwapCount_not: Int
  dailySwapCount_gt: Int
  dailySwapCount_lt: Int
  dailySwapCount_gte: Int
  dailySwapCount_lte: Int
  dailySwapCount_in: [Int!]
  dailySwapCount_not_in: [Int!]
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_LiquidityPoolDailySnapshot_filter]
  or: [Base_LiquidityPoolDailySnapshot_filter]
}

enum Base_LiquidityPoolDailySnapshot_orderBy {
  id
  day
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  tick
  totalValueLockedUSD
  totalLiquidity
  totalLiquidityUSD
  activeLiquidity
  activeLiquidityUSD
  uncollectedProtocolSideTokenAmounts
  uncollectedProtocolSideValuesUSD
  uncollectedSupplySideTokenAmounts
  uncollectedSupplySideValuesUSD
  cumulativeSupplySideRevenueUSD
  dailySupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  dailyProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  dailyTotalRevenueUSD
  cumulativeVolumeUSD
  dailyVolumeUSD
  cumulativeVolumeByTokenAmount
  dailyVolumeByTokenAmount
  cumulativeVolumeByTokenUSD
  dailyVolumeByTokenUSD
  inputTokenBalances
  inputTokenBalancesUSD
  inputTokenWeights
  stakedOutputTokenAmount
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  cumulativeDepositCount
  dailyDepositCount
  cumulativeWithdrawCount
  dailyWithdrawCount
  cumulativeSwapCount
  dailySwapCount
  positionCount
  openPositionCount
  closedPositionCount
  timestamp
  blockNumber
}

type Base_LiquidityPoolFee {
  """ { Fee type }-{ Pool address } """
  id: Base_Bytes!
  """ Fee as a percentage of the trade (swap) amount. Does not always apply 
  """
  feePercentage: Base_BigDecimal
  """ Type of fee this pool uses """
  feeType: Base_LiquidityPoolFeeType!
}

enum Base_LiquidityPoolFeeType {
  """ Total fixed fee paid by the user per trade, as a percentage of the traded amount. e.g. 0.3% for Uniswap v2, 0.3% for Sushiswap, 0.04% for Curve v1. 
  """
  FIXED_TRADING_FEE
  """ Some protocols use tiered fees instead of fixed fee (e.g. DYDX, DODO). Set `feePercentage` as 0 but handle the tiered fees in the mapping code. 
  """
  TIERED_TRADING_FEE
  """ Some protocols use dynamic fees instead of fixed fee (e.g. Balancer v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. 
  """
  DYNAMIC_TRADING_FEE
  """ Fixed fee that's paid to the LP, as a percentage of the traded amount. e.g. 0.25% for Sushiswap, 0.02% for Curve v1. 
  """
  FIXED_LP_FEE
  """ Some protocols use dynamic LP fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. 
  """
  DYNAMIC_LP_FEE
  """ Fixed fee that's paid to the protocol, as a percentage of the traded amount. e.g. 0.05% for Sushiswap, 0.02% for Curve v1. 
  """
  FIXED_PROTOCOL_FEE
  """ Some protocols use dynamic protocol fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. 
  """
  DYNAMIC_PROTOCOL_FEE
  """ One-time fee charged by the protocol during deposit, in percentages of the deposit token 
  """
  DEPOSIT_FEE
  """ One-time fee charged by the protocol (e.g. Bancor v3) during withdrawal, in percentages of the withdrawal token 
  """
  WITHDRAWAL_FEE
}

input Base_LiquidityPoolFee_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  feePercentage: Base_BigDecimal
  feePercentage_not: Base_BigDecimal
  feePercentage_gt: Base_BigDecimal
  feePercentage_lt: Base_BigDecimal
  feePercentage_gte: Base_BigDecimal
  feePercentage_lte: Base_BigDecimal
  feePercentage_in: [Base_BigDecimal!]
  feePercentage_not_in: [Base_BigDecimal!]
  feeType: Base_LiquidityPoolFeeType
  feeType_not: Base_LiquidityPoolFeeType
  feeType_in: [Base_LiquidityPoolFeeType!]
  feeType_not_in: [Base_LiquidityPoolFeeType!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_LiquidityPoolFee_filter]
  or: [Base_LiquidityPoolFee_filter]
}

enum Base_LiquidityPoolFee_orderBy {
  id
  feePercentage
  feeType
}

type Base_LiquidityPoolHourlySnapshot {
  """ { Smart contract address of the pool }-{ # of hours since Unix epoch time } 
  """
  id: Base_Bytes!
  """ Number of hours since Unix epoch time """
  hour: Int!
  """ The protocol this snapshot belongs to """
  protocol: Base_DexAmmProtocol!
  """ The pool this snapshot belongs to """
  pool: Base_LiquidityPool!
  """ Current tick representing the price of token0/token1 """
  tick: BigInt
  """ Current TVL (Total Value Locked) of this pool """
  totalValueLockedUSD: Base_BigDecimal!
  """ The sum of all active and non-active liquidity for this pool. """
  totalLiquidity: BigInt!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: Base_BigDecimal!
  """ All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidity: BigInt!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: Base_BigDecimal!
  """ All protocol-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  """ All protocol-side value locking in USD that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideValuesUSD: [Base_BigDecimal!]!
  """ All supply-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  """ All supply-side value locked in USD that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideValuesUSD: [Base_BigDecimal!]!
  """ All revenue generated by the liquidity pool, accrued to the supply side. 
  """
  cumulativeSupplySideRevenueUSD: Base_BigDecimal!
  """ Hourly revenue generated by the liquidity pool, accrued to the supply side. 
  """
  hourlySupplySideRevenueUSD: Base_BigDecimal!
  """ All revenue generated by the liquidity pool, accrued to the protocol. 
  """
  cumulativeProtocolSideRevenueUSD: Base_BigDecimal!
  """ Hourly revenue generated by the liquidity pool, accrued to the protocol. 
  """
  hourlyProtocolSideRevenueUSD: Base_BigDecimal!
  """ All revenue generated by the liquidity pool. """
  cumulativeTotalRevenueUSD: Base_BigDecimal!
  """ Hourly revenue generated by the liquidity pool. """
  hourlyTotalRevenueUSD: Base_BigDecimal!
  """ All historical trade volume occurred in this pool, in USD """
  cumulativeVolumeUSD: Base_BigDecimal!
  """ All trade volume occurred in a given hour, in USD """
  hourlyVolumeUSD: Base_BigDecimal!
  """ All trade volume, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenAmount: [BigInt!]!
  """ All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  hourlyVolumeByTokenAmount: [BigInt!]!
  """ All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenUSD: [Base_BigDecimal!]!
  """ All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  hourlyVolumeByTokenUSD: [Base_BigDecimal!]!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalancesUSD: [Base_BigDecimal!]!
  """ Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool 
  """
  inputTokenWeights: [Base_BigDecimal!]!
  """ Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. 
  """
  stakedOutputTokenAmount: BigInt
  """ Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [Base_BigDecimal!]
  """ Total number of deposits (add liquidity) """
  cumulativeDepositCount: Int!
  """ Total number of deposits (add liquidity) in an hour """
  hourlyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) """
  cumulativeWithdrawCount: Int!
  """ Total number of withdrawals (remove liquidity) in an hour """
  hourlyWithdrawCount: Int!
  """ Total number of trades (swaps) """
  cumulativeSwapCount: Int!
  """ Total number of trades (swaps) in an hour """
  hourlySwapCount: Int!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Base_LiquidityPoolHourlySnapshot_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  hour: Int
  hour_not: Int
  hour_gt: Int
  hour_lt: Int
  hour_gte: Int
  hour_lte: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Base_DexAmmProtocol_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Base_LiquidityPool_filter
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  totalValueLockedUSD: Base_BigDecimal
  totalValueLockedUSD_not: Base_BigDecimal
  totalValueLockedUSD_gt: Base_BigDecimal
  totalValueLockedUSD_lt: Base_BigDecimal
  totalValueLockedUSD_gte: Base_BigDecimal
  totalValueLockedUSD_lte: Base_BigDecimal
  totalValueLockedUSD_in: [Base_BigDecimal!]
  totalValueLockedUSD_not_in: [Base_BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalLiquidityUSD: Base_BigDecimal
  totalLiquidityUSD_not: Base_BigDecimal
  totalLiquidityUSD_gt: Base_BigDecimal
  totalLiquidityUSD_lt: Base_BigDecimal
  totalLiquidityUSD_gte: Base_BigDecimal
  totalLiquidityUSD_lte: Base_BigDecimal
  totalLiquidityUSD_in: [Base_BigDecimal!]
  totalLiquidityUSD_not_in: [Base_BigDecimal!]
  activeLiquidity: BigInt
  activeLiquidity_not: BigInt
  activeLiquidity_gt: BigInt
  activeLiquidity_lt: BigInt
  activeLiquidity_gte: BigInt
  activeLiquidity_lte: BigInt
  activeLiquidity_in: [BigInt!]
  activeLiquidity_not_in: [BigInt!]
  activeLiquidityUSD: Base_BigDecimal
  activeLiquidityUSD_not: Base_BigDecimal
  activeLiquidityUSD_gt: Base_BigDecimal
  activeLiquidityUSD_lt: Base_BigDecimal
  activeLiquidityUSD_gte: Base_BigDecimal
  activeLiquidityUSD_lte: Base_BigDecimal
  activeLiquidityUSD_in: [Base_BigDecimal!]
  activeLiquidityUSD_not_in: [Base_BigDecimal!]
  uncollectedProtocolSideTokenAmounts: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedProtocolSideValuesUSD: [Base_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not: [Base_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains: [Base_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains_nocase: [Base_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains: [Base_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains_nocase: [Base_BigDecimal!]
  uncollectedSupplySideTokenAmounts: [BigInt!]
  uncollectedSupplySideTokenAmounts_not: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedSupplySideValuesUSD: [Base_BigDecimal!]
  uncollectedSupplySideValuesUSD_not: [Base_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains: [Base_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains_nocase: [Base_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains: [Base_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains_nocase: [Base_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Base_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Base_BigDecimal!]
  hourlySupplySideRevenueUSD: Base_BigDecimal
  hourlySupplySideRevenueUSD_not: Base_BigDecimal
  hourlySupplySideRevenueUSD_gt: Base_BigDecimal
  hourlySupplySideRevenueUSD_lt: Base_BigDecimal
  hourlySupplySideRevenueUSD_gte: Base_BigDecimal
  hourlySupplySideRevenueUSD_lte: Base_BigDecimal
  hourlySupplySideRevenueUSD_in: [Base_BigDecimal!]
  hourlySupplySideRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Base_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Base_BigDecimal!]
  hourlyProtocolSideRevenueUSD: Base_BigDecimal
  hourlyProtocolSideRevenueUSD_not: Base_BigDecimal
  hourlyProtocolSideRevenueUSD_gt: Base_BigDecimal
  hourlyProtocolSideRevenueUSD_lt: Base_BigDecimal
  hourlyProtocolSideRevenueUSD_gte: Base_BigDecimal
  hourlyProtocolSideRevenueUSD_lte: Base_BigDecimal
  hourlyProtocolSideRevenueUSD_in: [Base_BigDecimal!]
  hourlyProtocolSideRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeTotalRevenueUSD: Base_BigDecimal
  cumulativeTotalRevenueUSD_not: Base_BigDecimal
  cumulativeTotalRevenueUSD_gt: Base_BigDecimal
  cumulativeTotalRevenueUSD_lt: Base_BigDecimal
  cumulativeTotalRevenueUSD_gte: Base_BigDecimal
  cumulativeTotalRevenueUSD_lte: Base_BigDecimal
  cumulativeTotalRevenueUSD_in: [Base_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Base_BigDecimal!]
  hourlyTotalRevenueUSD: Base_BigDecimal
  hourlyTotalRevenueUSD_not: Base_BigDecimal
  hourlyTotalRevenueUSD_gt: Base_BigDecimal
  hourlyTotalRevenueUSD_lt: Base_BigDecimal
  hourlyTotalRevenueUSD_gte: Base_BigDecimal
  hourlyTotalRevenueUSD_lte: Base_BigDecimal
  hourlyTotalRevenueUSD_in: [Base_BigDecimal!]
  hourlyTotalRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeVolumeUSD: Base_BigDecimal
  cumulativeVolumeUSD_not: Base_BigDecimal
  cumulativeVolumeUSD_gt: Base_BigDecimal
  cumulativeVolumeUSD_lt: Base_BigDecimal
  cumulativeVolumeUSD_gte: Base_BigDecimal
  cumulativeVolumeUSD_lte: Base_BigDecimal
  cumulativeVolumeUSD_in: [Base_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Base_BigDecimal!]
  hourlyVolumeUSD: Base_BigDecimal
  hourlyVolumeUSD_not: Base_BigDecimal
  hourlyVolumeUSD_gt: Base_BigDecimal
  hourlyVolumeUSD_lt: Base_BigDecimal
  hourlyVolumeUSD_gte: Base_BigDecimal
  hourlyVolumeUSD_lte: Base_BigDecimal
  hourlyVolumeUSD_in: [Base_BigDecimal!]
  hourlyVolumeUSD_not_in: [Base_BigDecimal!]
  cumulativeVolumeByTokenAmount: [BigInt!]
  cumulativeVolumeByTokenAmount_not: [BigInt!]
  cumulativeVolumeByTokenAmount_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  hourlyVolumeByTokenAmount: [BigInt!]
  hourlyVolumeByTokenAmount_not: [BigInt!]
  hourlyVolumeByTokenAmount_contains: [BigInt!]
  hourlyVolumeByTokenAmount_contains_nocase: [BigInt!]
  hourlyVolumeByTokenAmount_not_contains: [BigInt!]
  hourlyVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenUSD: [Base_BigDecimal!]
  cumulativeVolumeByTokenUSD_not: [Base_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains: [Base_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains_nocase: [Base_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains: [Base_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains_nocase: [Base_BigDecimal!]
  hourlyVolumeByTokenUSD: [Base_BigDecimal!]
  hourlyVolumeByTokenUSD_not: [Base_BigDecimal!]
  hourlyVolumeByTokenUSD_contains: [Base_BigDecimal!]
  hourlyVolumeByTokenUSD_contains_nocase: [Base_BigDecimal!]
  hourlyVolumeByTokenUSD_not_contains: [Base_BigDecimal!]
  hourlyVolumeByTokenUSD_not_contains_nocase: [Base_BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenBalancesUSD: [Base_BigDecimal!]
  inputTokenBalancesUSD_not: [Base_BigDecimal!]
  inputTokenBalancesUSD_contains: [Base_BigDecimal!]
  inputTokenBalancesUSD_contains_nocase: [Base_BigDecimal!]
  inputTokenBalancesUSD_not_contains: [Base_BigDecimal!]
  inputTokenBalancesUSD_not_contains_nocase: [Base_BigDecimal!]
  inputTokenWeights: [Base_BigDecimal!]
  inputTokenWeights_not: [Base_BigDecimal!]
  inputTokenWeights_contains: [Base_BigDecimal!]
  inputTokenWeights_contains_nocase: [Base_BigDecimal!]
  inputTokenWeights_not_contains: [Base_BigDecimal!]
  inputTokenWeights_not_contains_nocase: [Base_BigDecimal!]
  stakedOutputTokenAmount: BigInt
  stakedOutputTokenAmount_not: BigInt
  stakedOutputTokenAmount_gt: BigInt
  stakedOutputTokenAmount_lt: BigInt
  stakedOutputTokenAmount_gte: BigInt
  stakedOutputTokenAmount_lte: BigInt
  stakedOutputTokenAmount_in: [BigInt!]
  stakedOutputTokenAmount_not_in: [BigInt!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [Base_BigDecimal!]
  rewardTokenEmissionsUSD_not: [Base_BigDecimal!]
  rewardTokenEmissionsUSD_contains: [Base_BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [Base_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [Base_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [Base_BigDecimal!]
  cumulativeDepositCount: Int
  cumulativeDepositCount_not: Int
  cumulativeDepositCount_gt: Int
  cumulativeDepositCount_lt: Int
  cumulativeDepositCount_gte: Int
  cumulativeDepositCount_lte: Int
  cumulativeDepositCount_in: [Int!]
  cumulativeDepositCount_not_in: [Int!]
  hourlyDepositCount: Int
  hourlyDepositCount_not: Int
  hourlyDepositCount_gt: Int
  hourlyDepositCount_lt: Int
  hourlyDepositCount_gte: Int
  hourlyDepositCount_lte: Int
  hourlyDepositCount_in: [Int!]
  hourlyDepositCount_not_in: [Int!]
  cumulativeWithdrawCount: Int
  cumulativeWithdrawCount_not: Int
  cumulativeWithdrawCount_gt: Int
  cumulativeWithdrawCount_lt: Int
  cumulativeWithdrawCount_gte: Int
  cumulativeWithdrawCount_lte: Int
  cumulativeWithdrawCount_in: [Int!]
  cumulativeWithdrawCount_not_in: [Int!]
  hourlyWithdrawCount: Int
  hourlyWithdrawCount_not: Int
  hourlyWithdrawCount_gt: Int
  hourlyWithdrawCount_lt: Int
  hourlyWithdrawCount_gte: Int
  hourlyWithdrawCount_lte: Int
  hourlyWithdrawCount_in: [Int!]
  hourlyWithdrawCount_not_in: [Int!]
  cumulativeSwapCount: Int
  cumulativeSwapCount_not: Int
  cumulativeSwapCount_gt: Int
  cumulativeSwapCount_lt: Int
  cumulativeSwapCount_gte: Int
  cumulativeSwapCount_lte: Int
  cumulativeSwapCount_in: [Int!]
  cumulativeSwapCount_not_in: [Int!]
  hourlySwapCount: Int
  hourlySwapCount_not: Int
  hourlySwapCount_gt: Int
  hourlySwapCount_lt: Int
  hourlySwapCount_gte: Int
  hourlySwapCount_lte: Int
  hourlySwapCount_in: [Int!]
  hourlySwapCount_not_in: [Int!]
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_LiquidityPoolHourlySnapshot_filter]
  or: [Base_LiquidityPoolHourlySnapshot_filter]
}

enum Base_LiquidityPoolHourlySnapshot_orderBy {
  id
  hour
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  tick
  totalValueLockedUSD
  totalLiquidity
  totalLiquidityUSD
  activeLiquidity
  activeLiquidityUSD
  uncollectedProtocolSideTokenAmounts
  uncollectedProtocolSideValuesUSD
  uncollectedSupplySideTokenAmounts
  uncollectedSupplySideValuesUSD
  cumulativeSupplySideRevenueUSD
  hourlySupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  hourlyProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  hourlyTotalRevenueUSD
  cumulativeVolumeUSD
  hourlyVolumeUSD
  cumulativeVolumeByTokenAmount
  hourlyVolumeByTokenAmount
  cumulativeVolumeByTokenUSD
  hourlyVolumeByTokenUSD
  inputTokenBalances
  inputTokenBalancesUSD
  inputTokenWeights
  stakedOutputTokenAmount
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  cumulativeDepositCount
  hourlyDepositCount
  cumulativeWithdrawCount
  hourlyWithdrawCount
  cumulativeSwapCount
  hourlySwapCount
  positionCount
  openPositionCount
  closedPositionCount
  timestamp
  blockNumber
}

input Base_LiquidityPool_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Base_DexAmmProtocol_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  liquidityToken: String
  liquidityToken_not: String
  liquidityToken_gt: String
  liquidityToken_lt: String
  liquidityToken_gte: String
  liquidityToken_lte: String
  liquidityToken_in: [String!]
  liquidityToken_not_in: [String!]
  liquidityToken_contains: String
  liquidityToken_contains_nocase: String
  liquidityToken_not_contains: String
  liquidityToken_not_contains_nocase: String
  liquidityToken_starts_with: String
  liquidityToken_starts_with_nocase: String
  liquidityToken_not_starts_with: String
  liquidityToken_not_starts_with_nocase: String
  liquidityToken_ends_with: String
  liquidityToken_ends_with_nocase: String
  liquidityToken_not_ends_with: String
  liquidityToken_not_ends_with_nocase: String
  liquidityToken_: Base_Token_filter
  liquidityTokenType: Base_TokenType
  liquidityTokenType_not: Base_TokenType
  liquidityTokenType_in: [Base_TokenType!]
  liquidityTokenType_not_in: [Base_TokenType!]
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Base_Token_filter
  rewardTokens: [String!]
  rewardTokens_not: [String!]
  rewardTokens_contains: [String!]
  rewardTokens_contains_nocase: [String!]
  rewardTokens_not_contains: [String!]
  rewardTokens_not_contains_nocase: [String!]
  rewardTokens_: Base_RewardToken_filter
  fees: [String!]
  fees_not: [String!]
  fees_contains: [String!]
  fees_contains_nocase: [String!]
  fees_not_contains: [String!]
  fees_not_contains_nocase: [String!]
  fees_: Base_LiquidityPoolFee_filter
  isSingleSided: Boolean
  isSingleSided_not: Boolean
  isSingleSided_in: [Boolean!]
  isSingleSided_not_in: [Boolean!]
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  totalValueLockedUSD: Base_BigDecimal
  totalValueLockedUSD_not: Base_BigDecimal
  totalValueLockedUSD_gt: Base_BigDecimal
  totalValueLockedUSD_lt: Base_BigDecimal
  totalValueLockedUSD_gte: Base_BigDecimal
  totalValueLockedUSD_lte: Base_BigDecimal
  totalValueLockedUSD_in: [Base_BigDecimal!]
  totalValueLockedUSD_not_in: [Base_BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalLiquidityUSD: Base_BigDecimal
  totalLiquidityUSD_not: Base_BigDecimal
  totalLiquidityUSD_gt: Base_BigDecimal
  totalLiquidityUSD_lt: Base_BigDecimal
  totalLiquidityUSD_gte: Base_BigDecimal
  totalLiquidityUSD_lte: Base_BigDecimal
  totalLiquidityUSD_in: [Base_BigDecimal!]
  totalLiquidityUSD_not_in: [Base_BigDecimal!]
  activeLiquidity: BigInt
  activeLiquidity_not: BigInt
  activeLiquidity_gt: BigInt
  activeLiquidity_lt: BigInt
  activeLiquidity_gte: BigInt
  activeLiquidity_lte: BigInt
  activeLiquidity_in: [BigInt!]
  activeLiquidity_not_in: [BigInt!]
  activeLiquidityUSD: Base_BigDecimal
  activeLiquidityUSD_not: Base_BigDecimal
  activeLiquidityUSD_gt: Base_BigDecimal
  activeLiquidityUSD_lt: Base_BigDecimal
  activeLiquidityUSD_gte: Base_BigDecimal
  activeLiquidityUSD_lte: Base_BigDecimal
  activeLiquidityUSD_in: [Base_BigDecimal!]
  activeLiquidityUSD_not_in: [Base_BigDecimal!]
  uncollectedProtocolSideTokenAmounts: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedProtocolSideValuesUSD: [Base_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not: [Base_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains: [Base_BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains_nocase: [Base_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains: [Base_BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains_nocase: [Base_BigDecimal!]
  uncollectedSupplySideTokenAmounts: [BigInt!]
  uncollectedSupplySideTokenAmounts_not: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedSupplySideValuesUSD: [Base_BigDecimal!]
  uncollectedSupplySideValuesUSD_not: [Base_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains: [Base_BigDecimal!]
  uncollectedSupplySideValuesUSD_contains_nocase: [Base_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains: [Base_BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains_nocase: [Base_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Base_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Base_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeTotalRevenueUSD: Base_BigDecimal
  cumulativeTotalRevenueUSD_not: Base_BigDecimal
  cumulativeTotalRevenueUSD_gt: Base_BigDecimal
  cumulativeTotalRevenueUSD_lt: Base_BigDecimal
  cumulativeTotalRevenueUSD_gte: Base_BigDecimal
  cumulativeTotalRevenueUSD_lte: Base_BigDecimal
  cumulativeTotalRevenueUSD_in: [Base_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeVolumeByTokenAmount: [BigInt!]
  cumulativeVolumeByTokenAmount_not: [BigInt!]
  cumulativeVolumeByTokenAmount_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenUSD: [Base_BigDecimal!]
  cumulativeVolumeByTokenUSD_not: [Base_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains: [Base_BigDecimal!]
  cumulativeVolumeByTokenUSD_contains_nocase: [Base_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains: [Base_BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains_nocase: [Base_BigDecimal!]
  cumulativeVolumeUSD: Base_BigDecimal
  cumulativeVolumeUSD_not: Base_BigDecimal
  cumulativeVolumeUSD_gt: Base_BigDecimal
  cumulativeVolumeUSD_lt: Base_BigDecimal
  cumulativeVolumeUSD_gte: Base_BigDecimal
  cumulativeVolumeUSD_lte: Base_BigDecimal
  cumulativeVolumeUSD_in: [Base_BigDecimal!]
  cumulativeVolumeUSD_not_in: [Base_BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenBalancesUSD: [Base_BigDecimal!]
  inputTokenBalancesUSD_not: [Base_BigDecimal!]
  inputTokenBalancesUSD_contains: [Base_BigDecimal!]
  inputTokenBalancesUSD_contains_nocase: [Base_BigDecimal!]
  inputTokenBalancesUSD_not_contains: [Base_BigDecimal!]
  inputTokenBalancesUSD_not_contains_nocase: [Base_BigDecimal!]
  inputTokenWeights: [Base_BigDecimal!]
  inputTokenWeights_not: [Base_BigDecimal!]
  inputTokenWeights_contains: [Base_BigDecimal!]
  inputTokenWeights_contains_nocase: [Base_BigDecimal!]
  inputTokenWeights_not_contains: [Base_BigDecimal!]
  inputTokenWeights_not_contains_nocase: [Base_BigDecimal!]
  stakedOutputTokenAmount: BigInt
  stakedOutputTokenAmount_not: BigInt
  stakedOutputTokenAmount_gt: BigInt
  stakedOutputTokenAmount_lt: BigInt
  stakedOutputTokenAmount_gte: BigInt
  stakedOutputTokenAmount_lte: BigInt
  stakedOutputTokenAmount_in: [BigInt!]
  stakedOutputTokenAmount_not_in: [BigInt!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [Base_BigDecimal!]
  rewardTokenEmissionsUSD_not: [Base_BigDecimal!]
  rewardTokenEmissionsUSD_contains: [Base_BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [Base_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [Base_BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [Base_BigDecimal!]
  cumulativeDepositCount: Int
  cumulativeDepositCount_not: Int
  cumulativeDepositCount_gt: Int
  cumulativeDepositCount_lt: Int
  cumulativeDepositCount_gte: Int
  cumulativeDepositCount_lte: Int
  cumulativeDepositCount_in: [Int!]
  cumulativeDepositCount_not_in: [Int!]
  cumulativeWithdrawCount: Int
  cumulativeWithdrawCount_not: Int
  cumulativeWithdrawCount_gt: Int
  cumulativeWithdrawCount_lt: Int
  cumulativeWithdrawCount_gte: Int
  cumulativeWithdrawCount_lte: Int
  cumulativeWithdrawCount_in: [Int!]
  cumulativeWithdrawCount_not_in: [Int!]
  cumulativeSwapCount: Int
  cumulativeSwapCount_not: Int
  cumulativeSwapCount_gt: Int
  cumulativeSwapCount_lt: Int
  cumulativeSwapCount_gte: Int
  cumulativeSwapCount_lte: Int
  cumulativeSwapCount_in: [Int!]
  cumulativeSwapCount_not_in: [Int!]
  positions_: Base_Position_filter
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  lastSnapshotDayID: Int
  lastSnapshotDayID_not: Int
  lastSnapshotDayID_gt: Int
  lastSnapshotDayID_lt: Int
  lastSnapshotDayID_gte: Int
  lastSnapshotDayID_lte: Int
  lastSnapshotDayID_in: [Int!]
  lastSnapshotDayID_not_in: [Int!]
  lastSnapshotHourID: Int
  lastSnapshotHourID_not: Int
  lastSnapshotHourID_gt: Int
  lastSnapshotHourID_lt: Int
  lastSnapshotHourID_gte: Int
  lastSnapshotHourID_lte: Int
  lastSnapshotHourID_in: [Int!]
  lastSnapshotHourID_not_in: [Int!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  dailySnapshots_: Base_LiquidityPoolDailySnapshot_filter
  hourlySnapshots_: Base_LiquidityPoolHourlySnapshot_filter
  deposits_: Base_Deposit_filter
  withdraws_: Base_Withdraw_filter
  swaps_: Base_Swap_filter
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_LiquidityPool_filter]
  or: [Base_LiquidityPool_filter]
}

enum Base_LiquidityPool_orderBy {
  id
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  name
  symbol
  liquidityToken
  liquidityToken__id
  liquidityToken__name
  liquidityToken__symbol
  liquidityToken__decimals
  liquidityToken__lastPriceUSD
  liquidityToken__lastPriceBlockNumber
  liquidityToken___lastPricePool
  liquidityToken___totalSupply
  liquidityToken___totalValueLockedUSD
  liquidityToken___largePriceChangeBuffer
  liquidityToken___largeTVLImpactBuffer
  liquidityTokenType
  inputTokens
  rewardTokens
  fees
  isSingleSided
  createdTimestamp
  createdBlockNumber
  tick
  totalValueLockedUSD
  totalLiquidity
  totalLiquidityUSD
  activeLiquidity
  activeLiquidityUSD
  uncollectedProtocolSideTokenAmounts
  uncollectedProtocolSideValuesUSD
  uncollectedSupplySideTokenAmounts
  uncollectedSupplySideValuesUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  cumulativeVolumeByTokenAmount
  cumulativeVolumeByTokenUSD
  cumulativeVolumeUSD
  inputTokenBalances
  inputTokenBalancesUSD
  inputTokenWeights
  stakedOutputTokenAmount
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  cumulativeDepositCount
  cumulativeWithdrawCount
  cumulativeSwapCount
  positions
  positionCount
  openPositionCount
  closedPositionCount
  lastSnapshotDayID
  lastSnapshotHourID
  lastUpdateTimestamp
  lastUpdateBlockNumber
  dailySnapshots
  hourlySnapshots
  deposits
  withdraws
  swaps
}

enum Base_Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BASE
  BOBA
  BSC
  CELO
  COSMOS
  CRONOS
  MAINNET
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC
  XDAI
}

"""Defines the order direction, either ascending or descending"""
enum Base_OrderDirection {
  asc
  desc
}

type Base_Position {
  """ { Account address }-{ Market address }-{ Count } """
  id: Base_Bytes!
  """ Account that owns this position """
  account: Base_Account!
  """ The liquidity pool in which this position was opened """
  pool: Base_LiquidityPool!
  """ The hash of the transaction that opened this position """
  hashOpened: Base_Bytes!
  """ The hash of the transaction that closed this position """
  hashClosed: Base_Bytes
  """ Block number of when the position was opened """
  blockNumberOpened: BigInt!
  """ Timestamp when the position was opened """
  timestampOpened: BigInt!
  """ Block number of when the position was closed (0 if still open) """
  blockNumberClosed: BigInt
  """ Timestamp when the position was closed (0 if still open) """
  timestampClosed: BigInt
  """ lower tick of the position """
  tickLower: Base_Tick
  """ upper tick of the position """
  tickUpper: Base_Tick
  """ Token that is to represent ownership of liquidity """
  liquidityToken: Base_Token
  """ Type of token used to track liquidity """
  liquidityTokenType: Base_TokenType
  """ total position liquidity """
  liquidity: BigInt!
  """ total position liquidity in USD """
  liquidityUSD: Base_BigDecimal!
  """ amount of tokens ever deposited to position """
  cumulativeDepositTokenAmounts: [BigInt!]!
  """ amount of tokens in USD deposited to position """
  cumulativeDepositUSD: Base_BigDecimal!
  """ amount of tokens ever withdrawn from position (without fees) """
  cumulativeWithdrawTokenAmounts: [BigInt!]!
  """ amount of tokens in USD withdrawn from position (without fees) """
  cumulativeWithdrawUSD: Base_BigDecimal!
  """ Total reward token accumulated under this position, in USD """
  cumulativeRewardUSD: [BigInt!]
  """ Number of deposits related to this position """
  depositCount: Int!
  """ All deposit events of this position """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Base_Deposit_orderBy, orderDirection: Base_OrderDirection, where: Base_Deposit_filter): [Base_Deposit!]!
  """ Number of withdrawals related to this position """
  withdrawCount: Int!
  """ All withdraw events of this position """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Base_Withdraw_orderBy, orderDirection: Base_OrderDirection, where: Base_Withdraw_filter): [Base_Withdraw!]!
  """ Position daily snapshots for open positions """
  snapshots(skip: Int = 0, first: Int = 100, orderBy: Base_PositionSnapshot_orderBy, orderDirection: Base_OrderDirection, where: Base_PositionSnapshot_filter): [Base_PositionSnapshot!]!
}

type Base_PositionSnapshot {
  """ { Position ID }-{ Transaction hash }-{ Log index } """
  id: Base_Bytes!
  """ Transaction hash of the transaction that triggered this snapshot """
  hash: Base_Bytes!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Nonce of the transaction that triggered this snapshot """
  nonce: BigInt!
  """ Position of this snapshot """
  position: Base_Position!
  """ Type of token used to track liquidity """
  liquidityTokenType: Base_TokenType
  """ total position liquidity """
  liquidity: BigInt
  """ total position liquidity in USD """
  liquidityUSD: Base_BigDecimal
  """ amount of tokens ever deposited to position """
  cumulativeDepositTokenAmounts: [BigInt!]!
  """ amount of tokens in USD deposited to position """
  cumulativeDepositUSD: Base_BigDecimal!
  """ amount of tokens ever withdrawn from position (without fees) """
  cumulativeWithdrawTokenAmounts: [BigInt!]!
  """ amount of tokens in USD withdrawn from position (without fees) """
  cumulativeWithdrawUSD: Base_BigDecimal!
  """ Total reward token accumulated under this position, in native amounts 
  """
  cumulativeRewardTokenAmounts: [BigInt!]
  """ Total reward token accumulated under this position, in USD """
  cumulativeRewardUSD: [BigInt!]
  """ Number of deposits related to this position """
  depositCount: Int!
  """ Number of withdrawals related to this position """
  withdrawCount: Int!
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
}

input Base_PositionSnapshot_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  hash: Base_Bytes
  hash_not: Base_Bytes
  hash_gt: Base_Bytes
  hash_lt: Base_Bytes
  hash_gte: Base_Bytes
  hash_lte: Base_Bytes
  hash_in: [Base_Bytes!]
  hash_not_in: [Base_Bytes!]
  hash_contains: Base_Bytes
  hash_not_contains: Base_Bytes
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Base_Position_filter
  liquidityTokenType: Base_TokenType
  liquidityTokenType_not: Base_TokenType
  liquidityTokenType_in: [Base_TokenType!]
  liquidityTokenType_not_in: [Base_TokenType!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  liquidityUSD: Base_BigDecimal
  liquidityUSD_not: Base_BigDecimal
  liquidityUSD_gt: Base_BigDecimal
  liquidityUSD_lt: Base_BigDecimal
  liquidityUSD_gte: Base_BigDecimal
  liquidityUSD_lte: Base_BigDecimal
  liquidityUSD_in: [Base_BigDecimal!]
  liquidityUSD_not_in: [Base_BigDecimal!]
  cumulativeDepositTokenAmounts: [BigInt!]
  cumulativeDepositTokenAmounts_not: [BigInt!]
  cumulativeDepositTokenAmounts_contains: [BigInt!]
  cumulativeDepositTokenAmounts_contains_nocase: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeDepositUSD: Base_BigDecimal
  cumulativeDepositUSD_not: Base_BigDecimal
  cumulativeDepositUSD_gt: Base_BigDecimal
  cumulativeDepositUSD_lt: Base_BigDecimal
  cumulativeDepositUSD_gte: Base_BigDecimal
  cumulativeDepositUSD_lte: Base_BigDecimal
  cumulativeDepositUSD_in: [Base_BigDecimal!]
  cumulativeDepositUSD_not_in: [Base_BigDecimal!]
  cumulativeWithdrawTokenAmounts: [BigInt!]
  cumulativeWithdrawTokenAmounts_not: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains_nocase: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeWithdrawUSD: Base_BigDecimal
  cumulativeWithdrawUSD_not: Base_BigDecimal
  cumulativeWithdrawUSD_gt: Base_BigDecimal
  cumulativeWithdrawUSD_lt: Base_BigDecimal
  cumulativeWithdrawUSD_gte: Base_BigDecimal
  cumulativeWithdrawUSD_lte: Base_BigDecimal
  cumulativeWithdrawUSD_in: [Base_BigDecimal!]
  cumulativeWithdrawUSD_not_in: [Base_BigDecimal!]
  cumulativeRewardTokenAmounts: [BigInt!]
  cumulativeRewardTokenAmounts_not: [BigInt!]
  cumulativeRewardTokenAmounts_contains: [BigInt!]
  cumulativeRewardTokenAmounts_contains_nocase: [BigInt!]
  cumulativeRewardTokenAmounts_not_contains: [BigInt!]
  cumulativeRewardTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeRewardUSD: [BigInt!]
  cumulativeRewardUSD_not: [BigInt!]
  cumulativeRewardUSD_contains: [BigInt!]
  cumulativeRewardUSD_contains_nocase: [BigInt!]
  cumulativeRewardUSD_not_contains: [BigInt!]
  cumulativeRewardUSD_not_contains_nocase: [BigInt!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_PositionSnapshot_filter]
  or: [Base_PositionSnapshot_filter]
}

enum Base_PositionSnapshot_orderBy {
  id
  hash
  logIndex
  nonce
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__liquidityTokenType
  position__liquidity
  position__liquidityUSD
  position__cumulativeDepositUSD
  position__cumulativeWithdrawUSD
  position__depositCount
  position__withdrawCount
  liquidityTokenType
  liquidity
  liquidityUSD
  cumulativeDepositTokenAmounts
  cumulativeDepositUSD
  cumulativeWithdrawTokenAmounts
  cumulativeWithdrawUSD
  cumulativeRewardTokenAmounts
  cumulativeRewardUSD
  depositCount
  withdrawCount
  blockNumber
  timestamp
}

input Base_Position_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Base_Account_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Base_LiquidityPool_filter
  hashOpened: Base_Bytes
  hashOpened_not: Base_Bytes
  hashOpened_gt: Base_Bytes
  hashOpened_lt: Base_Bytes
  hashOpened_gte: Base_Bytes
  hashOpened_lte: Base_Bytes
  hashOpened_in: [Base_Bytes!]
  hashOpened_not_in: [Base_Bytes!]
  hashOpened_contains: Base_Bytes
  hashOpened_not_contains: Base_Bytes
  hashClosed: Base_Bytes
  hashClosed_not: Base_Bytes
  hashClosed_gt: Base_Bytes
  hashClosed_lt: Base_Bytes
  hashClosed_gte: Base_Bytes
  hashClosed_lte: Base_Bytes
  hashClosed_in: [Base_Bytes!]
  hashClosed_not_in: [Base_Bytes!]
  hashClosed_contains: Base_Bytes
  hashClosed_not_contains: Base_Bytes
  blockNumberOpened: BigInt
  blockNumberOpened_not: BigInt
  blockNumberOpened_gt: BigInt
  blockNumberOpened_lt: BigInt
  blockNumberOpened_gte: BigInt
  blockNumberOpened_lte: BigInt
  blockNumberOpened_in: [BigInt!]
  blockNumberOpened_not_in: [BigInt!]
  timestampOpened: BigInt
  timestampOpened_not: BigInt
  timestampOpened_gt: BigInt
  timestampOpened_lt: BigInt
  timestampOpened_gte: BigInt
  timestampOpened_lte: BigInt
  timestampOpened_in: [BigInt!]
  timestampOpened_not_in: [BigInt!]
  blockNumberClosed: BigInt
  blockNumberClosed_not: BigInt
  blockNumberClosed_gt: BigInt
  blockNumberClosed_lt: BigInt
  blockNumberClosed_gte: BigInt
  blockNumberClosed_lte: BigInt
  blockNumberClosed_in: [BigInt!]
  blockNumberClosed_not_in: [BigInt!]
  timestampClosed: BigInt
  timestampClosed_not: BigInt
  timestampClosed_gt: BigInt
  timestampClosed_lt: BigInt
  timestampClosed_gte: BigInt
  timestampClosed_lte: BigInt
  timestampClosed_in: [BigInt!]
  timestampClosed_not_in: [BigInt!]
  tickLower: String
  tickLower_not: String
  tickLower_gt: String
  tickLower_lt: String
  tickLower_gte: String
  tickLower_lte: String
  tickLower_in: [String!]
  tickLower_not_in: [String!]
  tickLower_contains: String
  tickLower_contains_nocase: String
  tickLower_not_contains: String
  tickLower_not_contains_nocase: String
  tickLower_starts_with: String
  tickLower_starts_with_nocase: String
  tickLower_not_starts_with: String
  tickLower_not_starts_with_nocase: String
  tickLower_ends_with: String
  tickLower_ends_with_nocase: String
  tickLower_not_ends_with: String
  tickLower_not_ends_with_nocase: String
  tickLower_: Base_Tick_filter
  tickUpper: String
  tickUpper_not: String
  tickUpper_gt: String
  tickUpper_lt: String
  tickUpper_gte: String
  tickUpper_lte: String
  tickUpper_in: [String!]
  tickUpper_not_in: [String!]
  tickUpper_contains: String
  tickUpper_contains_nocase: String
  tickUpper_not_contains: String
  tickUpper_not_contains_nocase: String
  tickUpper_starts_with: String
  tickUpper_starts_with_nocase: String
  tickUpper_not_starts_with: String
  tickUpper_not_starts_with_nocase: String
  tickUpper_ends_with: String
  tickUpper_ends_with_nocase: String
  tickUpper_not_ends_with: String
  tickUpper_not_ends_with_nocase: String
  tickUpper_: Base_Tick_filter
  liquidityToken: String
  liquidityToken_not: String
  liquidityToken_gt: String
  liquidityToken_lt: String
  liquidityToken_gte: String
  liquidityToken_lte: String
  liquidityToken_in: [String!]
  liquidityToken_not_in: [String!]
  liquidityToken_contains: String
  liquidityToken_contains_nocase: String
  liquidityToken_not_contains: String
  liquidityToken_not_contains_nocase: String
  liquidityToken_starts_with: String
  liquidityToken_starts_with_nocase: String
  liquidityToken_not_starts_with: String
  liquidityToken_not_starts_with_nocase: String
  liquidityToken_ends_with: String
  liquidityToken_ends_with_nocase: String
  liquidityToken_not_ends_with: String
  liquidityToken_not_ends_with_nocase: String
  liquidityToken_: Base_Token_filter
  liquidityTokenType: Base_TokenType
  liquidityTokenType_not: Base_TokenType
  liquidityTokenType_in: [Base_TokenType!]
  liquidityTokenType_not_in: [Base_TokenType!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  liquidityUSD: Base_BigDecimal
  liquidityUSD_not: Base_BigDecimal
  liquidityUSD_gt: Base_BigDecimal
  liquidityUSD_lt: Base_BigDecimal
  liquidityUSD_gte: Base_BigDecimal
  liquidityUSD_lte: Base_BigDecimal
  liquidityUSD_in: [Base_BigDecimal!]
  liquidityUSD_not_in: [Base_BigDecimal!]
  cumulativeDepositTokenAmounts: [BigInt!]
  cumulativeDepositTokenAmounts_not: [BigInt!]
  cumulativeDepositTokenAmounts_contains: [BigInt!]
  cumulativeDepositTokenAmounts_contains_nocase: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeDepositUSD: Base_BigDecimal
  cumulativeDepositUSD_not: Base_BigDecimal
  cumulativeDepositUSD_gt: Base_BigDecimal
  cumulativeDepositUSD_lt: Base_BigDecimal
  cumulativeDepositUSD_gte: Base_BigDecimal
  cumulativeDepositUSD_lte: Base_BigDecimal
  cumulativeDepositUSD_in: [Base_BigDecimal!]
  cumulativeDepositUSD_not_in: [Base_BigDecimal!]
  cumulativeWithdrawTokenAmounts: [BigInt!]
  cumulativeWithdrawTokenAmounts_not: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains_nocase: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeWithdrawUSD: Base_BigDecimal
  cumulativeWithdrawUSD_not: Base_BigDecimal
  cumulativeWithdrawUSD_gt: Base_BigDecimal
  cumulativeWithdrawUSD_lt: Base_BigDecimal
  cumulativeWithdrawUSD_gte: Base_BigDecimal
  cumulativeWithdrawUSD_lte: Base_BigDecimal
  cumulativeWithdrawUSD_in: [Base_BigDecimal!]
  cumulativeWithdrawUSD_not_in: [Base_BigDecimal!]
  cumulativeRewardUSD: [BigInt!]
  cumulativeRewardUSD_not: [BigInt!]
  cumulativeRewardUSD_contains: [BigInt!]
  cumulativeRewardUSD_contains_nocase: [BigInt!]
  cumulativeRewardUSD_not_contains: [BigInt!]
  cumulativeRewardUSD_not_contains_nocase: [BigInt!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  deposits_: Base_Deposit_filter
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  withdraws_: Base_Withdraw_filter
  snapshots_: Base_PositionSnapshot_filter
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_Position_filter]
  or: [Base_Position_filter]
}

enum Base_Position_orderBy {
  id
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  hashOpened
  hashClosed
  blockNumberOpened
  timestampOpened
  blockNumberClosed
  timestampClosed
  tickLower
  tickLower__id
  tickLower__index
  tickLower__createdTimestamp
  tickLower__createdBlockNumber
  tickLower__liquidityGross
  tickLower__liquidityGrossUSD
  tickLower__liquidityNet
  tickLower__liquidityNetUSD
  tickLower__lastSnapshotDayID
  tickLower__lastSnapshotHourID
  tickLower__lastUpdateTimestamp
  tickLower__lastUpdateBlockNumber
  tickUpper
  tickUpper__id
  tickUpper__index
  tickUpper__createdTimestamp
  tickUpper__createdBlockNumber
  tickUpper__liquidityGross
  tickUpper__liquidityGrossUSD
  tickUpper__liquidityNet
  tickUpper__liquidityNetUSD
  tickUpper__lastSnapshotDayID
  tickUpper__lastSnapshotHourID
  tickUpper__lastUpdateTimestamp
  tickUpper__lastUpdateBlockNumber
  liquidityToken
  liquidityToken__id
  liquidityToken__name
  liquidityToken__symbol
  liquidityToken__decimals
  liquidityToken__lastPriceUSD
  liquidityToken__lastPriceBlockNumber
  liquidityToken___lastPricePool
  liquidityToken___totalSupply
  liquidityToken___totalValueLockedUSD
  liquidityToken___largePriceChangeBuffer
  liquidityToken___largeTVLImpactBuffer
  liquidityTokenType
  liquidity
  liquidityUSD
  cumulativeDepositTokenAmounts
  cumulativeDepositUSD
  cumulativeWithdrawTokenAmounts
  cumulativeWithdrawUSD
  cumulativeRewardUSD
  depositCount
  deposits
  withdrawCount
  withdraws
  snapshots
}

interface Base_Protocol {
  """ Smart contract address of the protocol's main contract (Factory, Registry, etc) 
  """
  id: Base_Bytes!
  """ Name of the protocol, including version. e.g. Uniswap v3 """
  name: String!
  """ Slug of protocol, including version. e.g. uniswap-v3 """
  slug: String!
  """ Version of the subgraph schema, in SemVer format (e.g. 1.0.0) """
  schemaVersion: String!
  """ Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) 
  """
  subgraphVersion: String!
  """ Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) 
  """
  methodologyVersion: String!
  """ The blockchain network this subgraph is indexing on """
  network: Base_Network!
  """ The type of protocol (e.g. DEX, Lending, Yield, etc) """
  type: Base_ProtocolType!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: Base_BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: Base_BigDecimal
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: Base_BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: Base_BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: Base_BigDecimal!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Daily usage metrics for this protocol """
  dailyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Base_UsageMetricsDailySnapshot_orderBy, orderDirection: Base_OrderDirection, where: Base_UsageMetricsDailySnapshot_filter): [Base_UsageMetricsDailySnapshot!]!
  """ Hourly usage metrics for this protocol """
  hourlyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: Base_UsageMetricsHourlySnapshot_orderBy, orderDirection: Base_OrderDirection, where: Base_UsageMetricsHourlySnapshot_filter): [Base_UsageMetricsHourlySnapshot!]!
  """ Daily financial metrics for this protocol """
  financialMetrics(skip: Int = 0, first: Int = 100, orderBy: Base_FinancialsDailySnapshot_orderBy, orderDirection: Base_OrderDirection, where: Base_FinancialsDailySnapshot_filter): [Base_FinancialsDailySnapshot!]!
}

enum Base_ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
}

input Base_Protocol_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  schemaVersion: String
  schemaVersion_not: String
  schemaVersion_gt: String
  schemaVersion_lt: String
  schemaVersion_gte: String
  schemaVersion_lte: String
  schemaVersion_in: [String!]
  schemaVersion_not_in: [String!]
  schemaVersion_contains: String
  schemaVersion_contains_nocase: String
  schemaVersion_not_contains: String
  schemaVersion_not_contains_nocase: String
  schemaVersion_starts_with: String
  schemaVersion_starts_with_nocase: String
  schemaVersion_not_starts_with: String
  schemaVersion_not_starts_with_nocase: String
  schemaVersion_ends_with: String
  schemaVersion_ends_with_nocase: String
  schemaVersion_not_ends_with: String
  schemaVersion_not_ends_with_nocase: String
  subgraphVersion: String
  subgraphVersion_not: String
  subgraphVersion_gt: String
  subgraphVersion_lt: String
  subgraphVersion_gte: String
  subgraphVersion_lte: String
  subgraphVersion_in: [String!]
  subgraphVersion_not_in: [String!]
  subgraphVersion_contains: String
  subgraphVersion_contains_nocase: String
  subgraphVersion_not_contains: String
  subgraphVersion_not_contains_nocase: String
  subgraphVersion_starts_with: String
  subgraphVersion_starts_with_nocase: String
  subgraphVersion_not_starts_with: String
  subgraphVersion_not_starts_with_nocase: String
  subgraphVersion_ends_with: String
  subgraphVersion_ends_with_nocase: String
  subgraphVersion_not_ends_with: String
  subgraphVersion_not_ends_with_nocase: String
  methodologyVersion: String
  methodologyVersion_not: String
  methodologyVersion_gt: String
  methodologyVersion_lt: String
  methodologyVersion_gte: String
  methodologyVersion_lte: String
  methodologyVersion_in: [String!]
  methodologyVersion_not_in: [String!]
  methodologyVersion_contains: String
  methodologyVersion_contains_nocase: String
  methodologyVersion_not_contains: String
  methodologyVersion_not_contains_nocase: String
  methodologyVersion_starts_with: String
  methodologyVersion_starts_with_nocase: String
  methodologyVersion_not_starts_with: String
  methodologyVersion_not_starts_with_nocase: String
  methodologyVersion_ends_with: String
  methodologyVersion_ends_with_nocase: String
  methodologyVersion_not_ends_with: String
  methodologyVersion_not_ends_with_nocase: String
  network: Base_Network
  network_not: Base_Network
  network_in: [Base_Network!]
  network_not_in: [Base_Network!]
  type: Base_ProtocolType
  type_not: Base_ProtocolType
  type_in: [Base_ProtocolType!]
  type_not_in: [Base_ProtocolType!]
  totalValueLockedUSD: Base_BigDecimal
  totalValueLockedUSD_not: Base_BigDecimal
  totalValueLockedUSD_gt: Base_BigDecimal
  totalValueLockedUSD_lt: Base_BigDecimal
  totalValueLockedUSD_gte: Base_BigDecimal
  totalValueLockedUSD_lte: Base_BigDecimal
  totalValueLockedUSD_in: [Base_BigDecimal!]
  totalValueLockedUSD_not_in: [Base_BigDecimal!]
  protocolControlledValueUSD: Base_BigDecimal
  protocolControlledValueUSD_not: Base_BigDecimal
  protocolControlledValueUSD_gt: Base_BigDecimal
  protocolControlledValueUSD_lt: Base_BigDecimal
  protocolControlledValueUSD_gte: Base_BigDecimal
  protocolControlledValueUSD_lte: Base_BigDecimal
  protocolControlledValueUSD_in: [Base_BigDecimal!]
  protocolControlledValueUSD_not_in: [Base_BigDecimal!]
  cumulativeSupplySideRevenueUSD: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_not: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_gt: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_lt: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_gte: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_lte: Base_BigDecimal
  cumulativeSupplySideRevenueUSD_in: [Base_BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeProtocolSideRevenueUSD: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_not: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: Base_BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [Base_BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeTotalRevenueUSD: Base_BigDecimal
  cumulativeTotalRevenueUSD_not: Base_BigDecimal
  cumulativeTotalRevenueUSD_gt: Base_BigDecimal
  cumulativeTotalRevenueUSD_lt: Base_BigDecimal
  cumulativeTotalRevenueUSD_gte: Base_BigDecimal
  cumulativeTotalRevenueUSD_lte: Base_BigDecimal
  cumulativeTotalRevenueUSD_in: [Base_BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [Base_BigDecimal!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  dailyUsageMetrics_: Base_UsageMetricsDailySnapshot_filter
  hourlyUsageMetrics_: Base_UsageMetricsHourlySnapshot_filter
  financialMetrics_: Base_FinancialsDailySnapshot_filter
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_Protocol_filter]
  or: [Base_Protocol_filter]
}

enum Base_Protocol_orderBy {
  id
  name
  slug
  schemaVersion
  subgraphVersion
  methodologyVersion
  network
  type
  totalValueLockedUSD
  protocolControlledValueUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  cumulativeUniqueUsers
  totalPoolCount
  dailyUsageMetrics
  hourlyUsageMetrics
  financialMetrics
}

type Base_RewardToken {
  """ { Reward token type }-{ Smart contract address of the reward token } """
  id: Base_Bytes!
  """ Reference to the actual token """
  token: Base_Token!
  """ The type of the reward token """
  type: Base_RewardTokenType!
}

enum Base_RewardTokenType {
  """ For reward tokens awarded to LPs/lenders """
  DEPOSIT
  """ For reward tokens awarded to borrowers """
  BORROW
}

input Base_RewardToken_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Base_Token_filter
  type: Base_RewardTokenType
  type_not: Base_RewardTokenType
  type_in: [Base_RewardTokenType!]
  type_not_in: [Base_RewardTokenType!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_RewardToken_filter]
  or: [Base_RewardToken_filter]
}

enum Base_RewardToken_orderBy {
  id
  token
  token__id
  token__name
  token__symbol
  token__decimals
  token__lastPriceUSD
  token__lastPriceBlockNumber
  token___lastPricePool
  token___totalSupply
  token___totalValueLockedUSD
  token___largePriceChangeBuffer
  token___largeTVLImpactBuffer
  type
}

type Base_Swap {
  """ { Transaction hash }-{ Log index } """
  id: Base_Bytes!
  """ Transaction hash of the transaction that emitted this event """
  hash: Base_Bytes!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Gas limit of the transaction that emitted this event """
  gasLimit: BigInt
  """ Gas used in this transaction. (Optional because not every chain will support this) 
  """
  gasUsed: BigInt
  """ Gas price of the transaction that emitted this event """
  gasPrice: BigInt
  """ The protocol this transaction belongs to """
  protocol: Base_DexAmmProtocol!
  """ Account that emitted this event """
  account: Base_Account!
  """ The pool involving this event """
  pool: Base_LiquidityPool!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ the tick after the swap """
  tick: BigInt
  """ Token deposited into pool """
  tokenIn: Base_Token!
  """ Amount of token deposited into pool in native units """
  amountIn: BigInt!
  """ Amount of token deposited into pool in USD """
  amountInUSD: Base_BigDecimal!
  """ Token withdrawn from pool """
  tokenOut: Base_Token!
  """ Amount of token withdrawn from pool in native units """
  amountOut: BigInt!
  """ Amount of token withdrawn from pool in USD """
  amountOutUSD: Base_BigDecimal!
  """ Amount of input tokens in the liquidity pool """
  reserveAmounts: [BigInt!]
}

input Base_Swap_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  hash: Base_Bytes
  hash_not: Base_Bytes
  hash_gt: Base_Bytes
  hash_lt: Base_Bytes
  hash_gte: Base_Bytes
  hash_lte: Base_Bytes
  hash_in: [Base_Bytes!]
  hash_not_in: [Base_Bytes!]
  hash_contains: Base_Bytes
  hash_not_contains: Base_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Base_DexAmmProtocol_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Base_Account_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Base_LiquidityPool_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  tokenIn: String
  tokenIn_not: String
  tokenIn_gt: String
  tokenIn_lt: String
  tokenIn_gte: String
  tokenIn_lte: String
  tokenIn_in: [String!]
  tokenIn_not_in: [String!]
  tokenIn_contains: String
  tokenIn_contains_nocase: String
  tokenIn_not_contains: String
  tokenIn_not_contains_nocase: String
  tokenIn_starts_with: String
  tokenIn_starts_with_nocase: String
  tokenIn_not_starts_with: String
  tokenIn_not_starts_with_nocase: String
  tokenIn_ends_with: String
  tokenIn_ends_with_nocase: String
  tokenIn_not_ends_with: String
  tokenIn_not_ends_with_nocase: String
  tokenIn_: Base_Token_filter
  amountIn: BigInt
  amountIn_not: BigInt
  amountIn_gt: BigInt
  amountIn_lt: BigInt
  amountIn_gte: BigInt
  amountIn_lte: BigInt
  amountIn_in: [BigInt!]
  amountIn_not_in: [BigInt!]
  amountInUSD: Base_BigDecimal
  amountInUSD_not: Base_BigDecimal
  amountInUSD_gt: Base_BigDecimal
  amountInUSD_lt: Base_BigDecimal
  amountInUSD_gte: Base_BigDecimal
  amountInUSD_lte: Base_BigDecimal
  amountInUSD_in: [Base_BigDecimal!]
  amountInUSD_not_in: [Base_BigDecimal!]
  tokenOut: String
  tokenOut_not: String
  tokenOut_gt: String
  tokenOut_lt: String
  tokenOut_gte: String
  tokenOut_lte: String
  tokenOut_in: [String!]
  tokenOut_not_in: [String!]
  tokenOut_contains: String
  tokenOut_contains_nocase: String
  tokenOut_not_contains: String
  tokenOut_not_contains_nocase: String
  tokenOut_starts_with: String
  tokenOut_starts_with_nocase: String
  tokenOut_not_starts_with: String
  tokenOut_not_starts_with_nocase: String
  tokenOut_ends_with: String
  tokenOut_ends_with_nocase: String
  tokenOut_not_ends_with: String
  tokenOut_not_ends_with_nocase: String
  tokenOut_: Base_Token_filter
  amountOut: BigInt
  amountOut_not: BigInt
  amountOut_gt: BigInt
  amountOut_lt: BigInt
  amountOut_gte: BigInt
  amountOut_lte: BigInt
  amountOut_in: [BigInt!]
  amountOut_not_in: [BigInt!]
  amountOutUSD: Base_BigDecimal
  amountOutUSD_not: Base_BigDecimal
  amountOutUSD_gt: Base_BigDecimal
  amountOutUSD_lt: Base_BigDecimal
  amountOutUSD_gte: Base_BigDecimal
  amountOutUSD_lte: Base_BigDecimal
  amountOutUSD_in: [Base_BigDecimal!]
  amountOutUSD_not_in: [Base_BigDecimal!]
  reserveAmounts: [BigInt!]
  reserveAmounts_not: [BigInt!]
  reserveAmounts_contains: [BigInt!]
  reserveAmounts_contains_nocase: [BigInt!]
  reserveAmounts_not_contains: [BigInt!]
  reserveAmounts_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_Swap_filter]
  or: [Base_Swap_filter]
}

enum Base_Swap_orderBy {
  id
  hash
  nonce
  logIndex
  gasLimit
  gasUsed
  gasPrice
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  blockNumber
  timestamp
  tick
  tokenIn
  tokenIn__id
  tokenIn__name
  tokenIn__symbol
  tokenIn__decimals
  tokenIn__lastPriceUSD
  tokenIn__lastPriceBlockNumber
  tokenIn___lastPricePool
  tokenIn___totalSupply
  tokenIn___totalValueLockedUSD
  tokenIn___largePriceChangeBuffer
  tokenIn___largeTVLImpactBuffer
  amountIn
  amountInUSD
  tokenOut
  tokenOut__id
  tokenOut__name
  tokenOut__symbol
  tokenOut__decimals
  tokenOut__lastPriceUSD
  tokenOut__lastPriceBlockNumber
  tokenOut___lastPricePool
  tokenOut___totalSupply
  tokenOut___totalValueLockedUSD
  tokenOut___largePriceChangeBuffer
  tokenOut___largeTVLImpactBuffer
  amountOut
  amountOutUSD
  reserveAmounts
}

type Base_Tick {
  """ { pool address }-{ tick index } """
  id: Base_Bytes!
  """ tick index """
  index: BigInt!
  """ Liquidity pool this tick belongs to """
  pool: Base_LiquidityPool!
  """ Creation timestamp """
  createdTimestamp: BigInt!
  """ Creation block number """
  createdBlockNumber: BigInt!
  """ calculated price of token0 of tick within this pool - constant """
  prices: [Base_BigDecimal!]!
  """ total liquidity pool has as tick lower or upper """
  liquidityGross: BigInt!
  """ total liquidity in USD pool has as tick lower or upper """
  liquidityGrossUSD: Base_BigDecimal!
  """ how much liquidity changes when tick crossed """
  liquidityNet: BigInt!
  """ how much liquidity in USD changes when tick crossed """
  liquidityNetUSD: Base_BigDecimal!
  """ Day ID of the most recent daily snapshot """
  lastSnapshotDayID: Int!
  """ Hour ID of the most recent hourly snapshot """
  lastSnapshotHourID: Int!
  """ Timestamp of the last time this entity was updated """
  lastUpdateTimestamp: BigInt!
  """ Block number of the last time this entity was updated """
  lastUpdateBlockNumber: BigInt!
}

type Base_TickDailySnapshot {
  """ { pool address }-{ tick index }-{ day ID } """
  id: Base_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ tick index """
  tick: Base_Tick!
  """ liquidity pool this tick belongs to """
  pool: Base_LiquidityPool!
  """ total liquidity pool has as tick lower or upper """
  liquidityGross: BigInt!
  """ total liquidity in USD pool has as tick lower or upper """
  liquidityGrossUSD: Base_BigDecimal!
  """ how much liquidity changes when tick crossed """
  liquidityNet: BigInt!
  """ how much liquidity in USD changes when tick crossed """
  liquidityNetUSD: Base_BigDecimal!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Base_TickDailySnapshot_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Base_Tick_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Base_LiquidityPool_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityGrossUSD: Base_BigDecimal
  liquidityGrossUSD_not: Base_BigDecimal
  liquidityGrossUSD_gt: Base_BigDecimal
  liquidityGrossUSD_lt: Base_BigDecimal
  liquidityGrossUSD_gte: Base_BigDecimal
  liquidityGrossUSD_lte: Base_BigDecimal
  liquidityGrossUSD_in: [Base_BigDecimal!]
  liquidityGrossUSD_not_in: [Base_BigDecimal!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  liquidityNetUSD: Base_BigDecimal
  liquidityNetUSD_not: Base_BigDecimal
  liquidityNetUSD_gt: Base_BigDecimal
  liquidityNetUSD_lt: Base_BigDecimal
  liquidityNetUSD_gte: Base_BigDecimal
  liquidityNetUSD_lte: Base_BigDecimal
  liquidityNetUSD_in: [Base_BigDecimal!]
  liquidityNetUSD_not_in: [Base_BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_TickDailySnapshot_filter]
  or: [Base_TickDailySnapshot_filter]
}

enum Base_TickDailySnapshot_orderBy {
  id
  day
  tick
  tick__id
  tick__index
  tick__createdTimestamp
  tick__createdBlockNumber
  tick__liquidityGross
  tick__liquidityGrossUSD
  tick__liquidityNet
  tick__liquidityNetUSD
  tick__lastSnapshotDayID
  tick__lastSnapshotHourID
  tick__lastUpdateTimestamp
  tick__lastUpdateBlockNumber
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  liquidityGross
  liquidityGrossUSD
  liquidityNet
  liquidityNetUSD
  timestamp
  blockNumber
}

type Base_TickHourlySnapshot {
  """ { pool address }-{ tick index }-{ hour ID } """
  id: Base_Bytes!
  """ Number of hours since Unix epoch time """
  hour: Int!
  """ tick index """
  tick: Base_Tick!
  """ liquidity pool this tick belongs to """
  pool: Base_LiquidityPool!
  """ total liquidity pool has as tick lower or upper """
  liquidityGross: BigInt!
  """ total liquidity in USD pool has as tick lower or upper """
  liquidityGrossUSD: Base_BigDecimal!
  """ how much liquidity changes when tick crossed """
  liquidityNet: BigInt!
  """ how much liquidity in USD changes when tick crossed """
  liquidityNetUSD: Base_BigDecimal!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Base_TickHourlySnapshot_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  hour: Int
  hour_not: Int
  hour_gt: Int
  hour_lt: Int
  hour_gte: Int
  hour_lte: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Base_Tick_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Base_LiquidityPool_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityGrossUSD: Base_BigDecimal
  liquidityGrossUSD_not: Base_BigDecimal
  liquidityGrossUSD_gt: Base_BigDecimal
  liquidityGrossUSD_lt: Base_BigDecimal
  liquidityGrossUSD_gte: Base_BigDecimal
  liquidityGrossUSD_lte: Base_BigDecimal
  liquidityGrossUSD_in: [Base_BigDecimal!]
  liquidityGrossUSD_not_in: [Base_BigDecimal!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  liquidityNetUSD: Base_BigDecimal
  liquidityNetUSD_not: Base_BigDecimal
  liquidityNetUSD_gt: Base_BigDecimal
  liquidityNetUSD_lt: Base_BigDecimal
  liquidityNetUSD_gte: Base_BigDecimal
  liquidityNetUSD_lte: Base_BigDecimal
  liquidityNetUSD_in: [Base_BigDecimal!]
  liquidityNetUSD_not_in: [Base_BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_TickHourlySnapshot_filter]
  or: [Base_TickHourlySnapshot_filter]
}

enum Base_TickHourlySnapshot_orderBy {
  id
  hour
  tick
  tick__id
  tick__index
  tick__createdTimestamp
  tick__createdBlockNumber
  tick__liquidityGross
  tick__liquidityGrossUSD
  tick__liquidityNet
  tick__liquidityNetUSD
  tick__lastSnapshotDayID
  tick__lastSnapshotHourID
  tick__lastUpdateTimestamp
  tick__lastUpdateBlockNumber
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  liquidityGross
  liquidityGrossUSD
  liquidityNet
  liquidityNetUSD
  timestamp
  blockNumber
}

input Base_Tick_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Base_LiquidityPool_filter
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  prices: [Base_BigDecimal!]
  prices_not: [Base_BigDecimal!]
  prices_contains: [Base_BigDecimal!]
  prices_contains_nocase: [Base_BigDecimal!]
  prices_not_contains: [Base_BigDecimal!]
  prices_not_contains_nocase: [Base_BigDecimal!]
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityGrossUSD: Base_BigDecimal
  liquidityGrossUSD_not: Base_BigDecimal
  liquidityGrossUSD_gt: Base_BigDecimal
  liquidityGrossUSD_lt: Base_BigDecimal
  liquidityGrossUSD_gte: Base_BigDecimal
  liquidityGrossUSD_lte: Base_BigDecimal
  liquidityGrossUSD_in: [Base_BigDecimal!]
  liquidityGrossUSD_not_in: [Base_BigDecimal!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  liquidityNetUSD: Base_BigDecimal
  liquidityNetUSD_not: Base_BigDecimal
  liquidityNetUSD_gt: Base_BigDecimal
  liquidityNetUSD_lt: Base_BigDecimal
  liquidityNetUSD_gte: Base_BigDecimal
  liquidityNetUSD_lte: Base_BigDecimal
  liquidityNetUSD_in: [Base_BigDecimal!]
  liquidityNetUSD_not_in: [Base_BigDecimal!]
  lastSnapshotDayID: Int
  lastSnapshotDayID_not: Int
  lastSnapshotDayID_gt: Int
  lastSnapshotDayID_lt: Int
  lastSnapshotDayID_gte: Int
  lastSnapshotDayID_lte: Int
  lastSnapshotDayID_in: [Int!]
  lastSnapshotDayID_not_in: [Int!]
  lastSnapshotHourID: Int
  lastSnapshotHourID_not: Int
  lastSnapshotHourID_gt: Int
  lastSnapshotHourID_lt: Int
  lastSnapshotHourID_gte: Int
  lastSnapshotHourID_lte: Int
  lastSnapshotHourID_in: [Int!]
  lastSnapshotHourID_not_in: [Int!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_Tick_filter]
  or: [Base_Tick_filter]
}

enum Base_Tick_orderBy {
  id
  index
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  createdTimestamp
  createdBlockNumber
  prices
  liquidityGross
  liquidityGrossUSD
  liquidityNet
  liquidityNetUSD
  lastSnapshotDayID
  lastSnapshotHourID
  lastUpdateTimestamp
  lastUpdateBlockNumber
}

type Base_Token {
  """ Smart contract address of the token """
  id: Base_Bytes!
  """ Name of the token, mirrored from the smart contract """
  name: String!
  """ Symbol of the token, mirrored from the smart contract """
  symbol: String!
  """ The number of decimal places this token uses, default to 18 """
  decimals: Int!
  """ Optional field to track the price of a token, mostly for caching purposes 
  """
  lastPriceUSD: Base_BigDecimal
  """ Optional field to track the block number of the last token price """
  lastPriceBlockNumber: BigInt
  """ last pool that gave this token a price """
  _lastPricePool: Base_Bytes
  """ amount of tokens in the protocol """
  _totalSupply: BigInt!
  """ Total value locked in the protocol """
  _totalValueLockedUSD: Base_BigDecimal!
  _largePriceChangeBuffer: Int!
  _largeTVLImpactBuffer: Int!
}

enum Base_TokenType {
  MULTIPLE
  UNKNOWN
  ERC20
  ERC721
  ERC1155
  BEP20
  BEP721
  BEP1155
}

input Base_Token_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  lastPriceUSD: Base_BigDecimal
  lastPriceUSD_not: Base_BigDecimal
  lastPriceUSD_gt: Base_BigDecimal
  lastPriceUSD_lt: Base_BigDecimal
  lastPriceUSD_gte: Base_BigDecimal
  lastPriceUSD_lte: Base_BigDecimal
  lastPriceUSD_in: [Base_BigDecimal!]
  lastPriceUSD_not_in: [Base_BigDecimal!]
  lastPriceBlockNumber: BigInt
  lastPriceBlockNumber_not: BigInt
  lastPriceBlockNumber_gt: BigInt
  lastPriceBlockNumber_lt: BigInt
  lastPriceBlockNumber_gte: BigInt
  lastPriceBlockNumber_lte: BigInt
  lastPriceBlockNumber_in: [BigInt!]
  lastPriceBlockNumber_not_in: [BigInt!]
  _lastPricePool: Base_Bytes
  _lastPricePool_not: Base_Bytes
  _lastPricePool_gt: Base_Bytes
  _lastPricePool_lt: Base_Bytes
  _lastPricePool_gte: Base_Bytes
  _lastPricePool_lte: Base_Bytes
  _lastPricePool_in: [Base_Bytes!]
  _lastPricePool_not_in: [Base_Bytes!]
  _lastPricePool_contains: Base_Bytes
  _lastPricePool_not_contains: Base_Bytes
  _totalSupply: BigInt
  _totalSupply_not: BigInt
  _totalSupply_gt: BigInt
  _totalSupply_lt: BigInt
  _totalSupply_gte: BigInt
  _totalSupply_lte: BigInt
  _totalSupply_in: [BigInt!]
  _totalSupply_not_in: [BigInt!]
  _totalValueLockedUSD: Base_BigDecimal
  _totalValueLockedUSD_not: Base_BigDecimal
  _totalValueLockedUSD_gt: Base_BigDecimal
  _totalValueLockedUSD_lt: Base_BigDecimal
  _totalValueLockedUSD_gte: Base_BigDecimal
  _totalValueLockedUSD_lte: Base_BigDecimal
  _totalValueLockedUSD_in: [Base_BigDecimal!]
  _totalValueLockedUSD_not_in: [Base_BigDecimal!]
  _largePriceChangeBuffer: Int
  _largePriceChangeBuffer_not: Int
  _largePriceChangeBuffer_gt: Int
  _largePriceChangeBuffer_lt: Int
  _largePriceChangeBuffer_gte: Int
  _largePriceChangeBuffer_lte: Int
  _largePriceChangeBuffer_in: [Int!]
  _largePriceChangeBuffer_not_in: [Int!]
  _largeTVLImpactBuffer: Int
  _largeTVLImpactBuffer_not: Int
  _largeTVLImpactBuffer_gt: Int
  _largeTVLImpactBuffer_lt: Int
  _largeTVLImpactBuffer_gte: Int
  _largeTVLImpactBuffer_lte: Int
  _largeTVLImpactBuffer_in: [Int!]
  _largeTVLImpactBuffer_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_Token_filter]
  or: [Base_Token_filter]
}

enum Base_Token_orderBy {
  id
  name
  symbol
  decimals
  lastPriceUSD
  lastPriceBlockNumber
  _lastPricePool
  _totalSupply
  _totalValueLockedUSD
  _largePriceChangeBuffer
  _largeTVLImpactBuffer
}

type Base_UsageMetricsDailySnapshot {
  """ ID is # of days since Unix epoch time """
  id: Base_Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ Protocol this snapshot is associated with """
  protocol: Base_DexAmmProtocol!
  """ Number of unique daily active users """
  dailyActiveUsers: Int!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. 
  """
  dailyTransactionCount: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Total number of deposits (add liquidity) in an day """
  dailyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) in an day """
  dailyWithdrawCount: Int!
  """ Total number of trades (swaps) in an day """
  dailySwapCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Base_UsageMetricsDailySnapshot_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Base_DexAmmProtocol_filter
  dailyActiveUsers: Int
  dailyActiveUsers_not: Int
  dailyActiveUsers_gt: Int
  dailyActiveUsers_lt: Int
  dailyActiveUsers_gte: Int
  dailyActiveUsers_lte: Int
  dailyActiveUsers_in: [Int!]
  dailyActiveUsers_not_in: [Int!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  dailyTransactionCount: Int
  dailyTransactionCount_not: Int
  dailyTransactionCount_gt: Int
  dailyTransactionCount_lt: Int
  dailyTransactionCount_gte: Int
  dailyTransactionCount_lte: Int
  dailyTransactionCount_in: [Int!]
  dailyTransactionCount_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  dailyDepositCount: Int
  dailyDepositCount_not: Int
  dailyDepositCount_gt: Int
  dailyDepositCount_lt: Int
  dailyDepositCount_gte: Int
  dailyDepositCount_lte: Int
  dailyDepositCount_in: [Int!]
  dailyDepositCount_not_in: [Int!]
  dailyWithdrawCount: Int
  dailyWithdrawCount_not: Int
  dailyWithdrawCount_gt: Int
  dailyWithdrawCount_lt: Int
  dailyWithdrawCount_gte: Int
  dailyWithdrawCount_lte: Int
  dailyWithdrawCount_in: [Int!]
  dailyWithdrawCount_not_in: [Int!]
  dailySwapCount: Int
  dailySwapCount_not: Int
  dailySwapCount_gt: Int
  dailySwapCount_lt: Int
  dailySwapCount_gte: Int
  dailySwapCount_lte: Int
  dailySwapCount_in: [Int!]
  dailySwapCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_UsageMetricsDailySnapshot_filter]
  or: [Base_UsageMetricsDailySnapshot_filter]
}

enum Base_UsageMetricsDailySnapshot_orderBy {
  id
  day
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  dailyActiveUsers
  cumulativeUniqueUsers
  dailyTransactionCount
  totalPoolCount
  dailyDepositCount
  dailyWithdrawCount
  dailySwapCount
  timestamp
  blockNumber
}

type Base_UsageMetricsHourlySnapshot {
  """ { # of hours since Unix epoch time } """
  id: Base_Bytes!
  """ Number of hours since Unix epoch time """
  hour: Int!
  """ Protocol this snapshot is associated with """
  protocol: Base_DexAmmProtocol!
  """ Number of unique hourly active users """
  hourlyActiveUsers: Int!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. 
  """
  hourlyTransactionCount: Int!
  """ Total number of deposits (add liquidity) in an hour """
  hourlyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) in an hour """
  hourlyWithdrawCount: Int!
  """ Total number of trades (swaps) in an hour """
  hourlySwapCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input Base_UsageMetricsHourlySnapshot_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  hour: Int
  hour_not: Int
  hour_gt: Int
  hour_lt: Int
  hour_gte: Int
  hour_lte: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Base_DexAmmProtocol_filter
  hourlyActiveUsers: Int
  hourlyActiveUsers_not: Int
  hourlyActiveUsers_gt: Int
  hourlyActiveUsers_lt: Int
  hourlyActiveUsers_gte: Int
  hourlyActiveUsers_lte: Int
  hourlyActiveUsers_in: [Int!]
  hourlyActiveUsers_not_in: [Int!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  hourlyTransactionCount: Int
  hourlyTransactionCount_not: Int
  hourlyTransactionCount_gt: Int
  hourlyTransactionCount_lt: Int
  hourlyTransactionCount_gte: Int
  hourlyTransactionCount_lte: Int
  hourlyTransactionCount_in: [Int!]
  hourlyTransactionCount_not_in: [Int!]
  hourlyDepositCount: Int
  hourlyDepositCount_not: Int
  hourlyDepositCount_gt: Int
  hourlyDepositCount_lt: Int
  hourlyDepositCount_gte: Int
  hourlyDepositCount_lte: Int
  hourlyDepositCount_in: [Int!]
  hourlyDepositCount_not_in: [Int!]
  hourlyWithdrawCount: Int
  hourlyWithdrawCount_not: Int
  hourlyWithdrawCount_gt: Int
  hourlyWithdrawCount_lt: Int
  hourlyWithdrawCount_gte: Int
  hourlyWithdrawCount_lte: Int
  hourlyWithdrawCount_in: [Int!]
  hourlyWithdrawCount_not_in: [Int!]
  hourlySwapCount: Int
  hourlySwapCount_not: Int
  hourlySwapCount_gt: Int
  hourlySwapCount_lt: Int
  hourlySwapCount_gte: Int
  hourlySwapCount_lte: Int
  hourlySwapCount_in: [Int!]
  hourlySwapCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_UsageMetricsHourlySnapshot_filter]
  or: [Base_UsageMetricsHourlySnapshot_filter]
}

enum Base_UsageMetricsHourlySnapshot_orderBy {
  id
  hour
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  hourlyActiveUsers
  cumulativeUniqueUsers
  hourlyTransactionCount
  hourlyDepositCount
  hourlyWithdrawCount
  hourlySwapCount
  timestamp
  blockNumber
}

type Base_Withdraw {
  """ { Transaction hash }-{ Log index }"""
  id: Base_Bytes!
  """ Transaction hash of the transaction that emitted this event """
  hash: Base_Bytes!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Gas limit of the transaction that emitted this event """
  gasLimit: BigInt
  """ Gas used in this transaction. (Optional because not every chain will support this) 
  """
  gasUsed: BigInt
  """ Gas price of the transaction that emitted this event """
  gasPrice: BigInt
  """ The protocol this transaction belongs to """
  protocol: Base_DexAmmProtocol!
  """ Account that emitted this event """
  account: Base_Account!
  """ The user position changed by this event """
  position: Base_Position
  """ lower tick of position """
  tickLower: BigInt
  """ upper tick of position """
  tickUpper: BigInt
  """ The pool involving this event """
  pool: Base_LiquidityPool!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ Amount of liquidity burned """
  liquidity: BigInt!
  """ Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool 
  """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Base_Token_orderBy, orderDirection: Base_OrderDirection, where: Base_Token_filter): [Base_Token!]!
  """ Amount of input tokens in the token's native unit """
  inputTokenAmounts: [BigInt!]!
  """ Amount of input tokens in the liquidity pool """
  reserveAmounts: [BigInt!]
  """ USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool) 
  """
  amountUSD: Base_BigDecimal!
}

input Base_Withdraw_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  hash: Base_Bytes
  hash_not: Base_Bytes
  hash_gt: Base_Bytes
  hash_lt: Base_Bytes
  hash_gte: Base_Bytes
  hash_lte: Base_Bytes
  hash_in: [Base_Bytes!]
  hash_not_in: [Base_Bytes!]
  hash_contains: Base_Bytes
  hash_not_contains: Base_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Base_DexAmmProtocol_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Base_Account_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Base_Position_filter
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Base_LiquidityPool_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Base_Token_filter
  inputTokenAmounts: [BigInt!]
  inputTokenAmounts_not: [BigInt!]
  inputTokenAmounts_contains: [BigInt!]
  inputTokenAmounts_contains_nocase: [BigInt!]
  inputTokenAmounts_not_contains: [BigInt!]
  inputTokenAmounts_not_contains_nocase: [BigInt!]
  reserveAmounts: [BigInt!]
  reserveAmounts_not: [BigInt!]
  reserveAmounts_contains: [BigInt!]
  reserveAmounts_contains_nocase: [BigInt!]
  reserveAmounts_not_contains: [BigInt!]
  reserveAmounts_not_contains_nocase: [BigInt!]
  amountUSD: Base_BigDecimal
  amountUSD_not: Base_BigDecimal
  amountUSD_gt: Base_BigDecimal
  amountUSD_lt: Base_BigDecimal
  amountUSD_gte: Base_BigDecimal
  amountUSD_lte: Base_BigDecimal
  amountUSD_in: [Base_BigDecimal!]
  amountUSD_not_in: [Base_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base_Withdraw_filter]
  or: [Base_Withdraw_filter]
}

enum Base_Withdraw_orderBy {
  id
  hash
  nonce
  logIndex
  gasLimit
  gasUsed
  gasPrice
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__liquidityTokenType
  position__liquidity
  position__liquidityUSD
  position__cumulativeDepositUSD
  position__cumulativeWithdrawUSD
  position__depositCount
  position__withdrawCount
  tickLower
  tickUpper
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedOutputTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  blockNumber
  timestamp
  liquidity
  inputTokens
  inputTokenAmounts
  reserveAmounts
  amountUSD
}

type Base__Block_ {
  """The hash of the block"""
  hash: Base_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Base_Bytes
}

"""  Used to keep track of the price of Ether/TVL in USD, pool deposit count, and total unique users 
"""
type Base__HelperStore {
  id: Base_Bytes!
  """ Token Prices """
  valueDecimalList: [Base_BigDecimal!]
  """ price of ETH/TVL in USD """
  valueDecimal: Base_BigDecimal
  """ # of deposits, # of unique users """
  valueInt: Int
}

input Base__HelperStore_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  valueDecimalList: [Base_BigDecimal!]
  valueDecimalList_not: [Base_BigDecimal!]
  valueDecimalList_contains: [Base_BigDecimal!]
  valueDecimalList_contains_nocase: [Base_BigDecimal!]
  valueDecimalList_not_contains: [Base_BigDecimal!]
  valueDecimalList_not_contains_nocase: [Base_BigDecimal!]
  valueDecimal: Base_BigDecimal
  valueDecimal_not: Base_BigDecimal
  valueDecimal_gt: Base_BigDecimal
  valueDecimal_lt: Base_BigDecimal
  valueDecimal_gte: Base_BigDecimal
  valueDecimal_lte: Base_BigDecimal
  valueDecimal_in: [Base_BigDecimal!]
  valueDecimal_not_in: [Base_BigDecimal!]
  valueInt: Int
  valueInt_not: Int
  valueInt_gt: Int
  valueInt_lt: Int
  valueInt_gte: Int
  valueInt_lte: Int
  valueInt_in: [Int!]
  valueInt_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base__HelperStore_filter]
  or: [Base__HelperStore_filter]
}

enum Base__HelperStore_orderBy {
  id
  valueDecimalList
  valueDecimal
  valueInt
}

type Base__LiquidityPoolAmount {
  """ Smart contract address of the pool """
  id: Base_Bytes!
  """ Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool 
  """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Base_Token_orderBy, orderDirection: Base_OrderDirection, where: Base_Token_filter): [Base_Token!]!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [Base_BigDecimal!]!
  tokenPrices: [Base_BigDecimal!]!
}

input Base__LiquidityPoolAmount_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Base_Token_filter
  inputTokenBalances: [Base_BigDecimal!]
  inputTokenBalances_not: [Base_BigDecimal!]
  inputTokenBalances_contains: [Base_BigDecimal!]
  inputTokenBalances_contains_nocase: [Base_BigDecimal!]
  inputTokenBalances_not_contains: [Base_BigDecimal!]
  inputTokenBalances_not_contains_nocase: [Base_BigDecimal!]
  tokenPrices: [Base_BigDecimal!]
  tokenPrices_not: [Base_BigDecimal!]
  tokenPrices_contains: [Base_BigDecimal!]
  tokenPrices_contains_nocase: [Base_BigDecimal!]
  tokenPrices_not_contains: [Base_BigDecimal!]
  tokenPrices_not_contains_nocase: [Base_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base__LiquidityPoolAmount_filter]
  or: [Base__LiquidityPoolAmount_filter]
}

enum Base__LiquidityPoolAmount_orderBy {
  id
  inputTokens
  inputTokenBalances
  tokenPrices
}

"""The type for the top-level _meta field"""
type Base__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: Base__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum Base__SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

""" This is used to keep tract of the derived price of tokens in ethereum and the whitelisted pools to which it belongs
"""
type Base__TokenWhitelist {
  """ Token Address """
  id: Base_Bytes!
  """ pools token is in that are white listed for USD pricing """
  whitelistPools(skip: Int = 0, first: Int = 100, orderBy: Base_LiquidityPool_orderBy, orderDirection: Base_OrderDirection, where: Base_LiquidityPool_filter): [Base_LiquidityPool!]!
}

type Base__TokenWhitelistSymbol {
  """ Whitelist Token Symbol """
  id: ID!
  """ Whitelist Token Address"""
  address: Base_Bytes!
}

input Base__TokenWhitelistSymbol_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Base_Bytes
  address_not: Base_Bytes
  address_gt: Base_Bytes
  address_lt: Base_Bytes
  address_gte: Base_Bytes
  address_lte: Base_Bytes
  address_in: [Base_Bytes!]
  address_not_in: [Base_Bytes!]
  address_contains: Base_Bytes
  address_not_contains: Base_Bytes
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base__TokenWhitelistSymbol_filter]
  or: [Base__TokenWhitelistSymbol_filter]
}

enum Base__TokenWhitelistSymbol_orderBy {
  id
  address
}

input Base__TokenWhitelist_filter {
  id: Base_Bytes
  id_not: Base_Bytes
  id_gt: Base_Bytes
  id_lt: Base_Bytes
  id_gte: Base_Bytes
  id_lte: Base_Bytes
  id_in: [Base_Bytes!]
  id_not_in: [Base_Bytes!]
  id_contains: Base_Bytes
  id_not_contains: Base_Bytes
  whitelistPools: [String!]
  whitelistPools_not: [String!]
  whitelistPools_contains: [String!]
  whitelistPools_contains_nocase: [String!]
  whitelistPools_not_contains: [String!]
  whitelistPools_not_contains_nocase: [String!]
  whitelistPools_: Base_LiquidityPool_filter
  """Filter for the block changed event."""
  _change_block: Base_BlockChangedFilter
  and: [Base__TokenWhitelist_filter]
  or: [Base__TokenWhitelist_filter]
}

enum Base__TokenWhitelist_orderBy {
  id
  whitelistPools
}