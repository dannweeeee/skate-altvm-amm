// @ts-nocheck
import { GraphQLResolveInfo, SelectionSetNode, FieldNode, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
import { gql } from '@graphql-mesh/utils';

import { findAndParseConfig } from '@graphql-mesh/cli';
import { createMeshHTTPHandler, MeshHTTPHandler } from '@graphql-mesh/http';
import { getMesh, ExecuteMeshFn, SubscribeMeshFn, MeshContext as BaseMeshContext, MeshInstance } from '@graphql-mesh/runtime';
import { MeshStore, FsStoreStorageAdapter } from '@graphql-mesh/store';
import { path as pathModule } from '@graphql-mesh/cross-helpers';
import { ImportFn } from '@graphql-mesh/types';
import type { Uniswapv3EthereumTypes } from './sources/uniswapv3-ethereum/types';
import type { Uniswapv3OptimismTypes } from './sources/uniswapv3-optimism/types';
import type { Uniswapv3ArbitrumTypes } from './sources/uniswapv3-arbitrum/types';
import type { Uniswapv3BaseTypes } from './sources/uniswapv3-base/types';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };



/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Ethereum_BigDecimal: { input: any; output: any; }
  BigInt: { input: any; output: any; }
  Ethereum_Bytes: { input: any; output: any; }
  Ethereum_Int8: { input: any; output: any; }
  Timestamp: { input: any; output: any; }
  Optimism_BigDecimal: { input: any; output: any; }
  Optimism_Bytes: { input: any; output: any; }
  Optimism_Int8: { input: any; output: any; }
  Arbitrum_BigDecimal: { input: any; output: any; }
  Arbitrum_Bytes: { input: any; output: any; }
  Arbitrum_Int8: { input: any; output: any; }
  Base_BigDecimal: { input: any; output: any; }
  Base_Bytes: { input: any; output: any; }
  Base_Int8: { input: any; output: any; }
};

export type Query = {
  Ethereum_token?: Maybe<Ethereum_Token>;
  Ethereum_tokens: Array<Ethereum_Token>;
  Ethereum_rewardToken?: Maybe<Ethereum_RewardToken>;
  Ethereum_rewardTokens: Array<Ethereum_RewardToken>;
  Ethereum_liquidityPoolFee?: Maybe<Ethereum_LiquidityPoolFee>;
  Ethereum_liquidityPoolFees: Array<Ethereum_LiquidityPoolFee>;
  Ethereum_dexAmmProtocol?: Maybe<Ethereum_DexAmmProtocol>;
  Ethereum_dexAmmProtocols: Array<Ethereum_DexAmmProtocol>;
  Ethereum_usageMetricsDailySnapshot?: Maybe<Ethereum_UsageMetricsDailySnapshot>;
  Ethereum_usageMetricsDailySnapshots: Array<Ethereum_UsageMetricsDailySnapshot>;
  Ethereum_usageMetricsHourlySnapshot?: Maybe<Ethereum_UsageMetricsHourlySnapshot>;
  Ethereum_usageMetricsHourlySnapshots: Array<Ethereum_UsageMetricsHourlySnapshot>;
  Ethereum_financialsDailySnapshot?: Maybe<Ethereum_FinancialsDailySnapshot>;
  Ethereum_financialsDailySnapshots: Array<Ethereum_FinancialsDailySnapshot>;
  Ethereum_liquidityPool?: Maybe<Ethereum_LiquidityPool>;
  Ethereum_liquidityPools: Array<Ethereum_LiquidityPool>;
  Ethereum_liquidityPoolDailySnapshot?: Maybe<Ethereum_LiquidityPoolDailySnapshot>;
  Ethereum_liquidityPoolDailySnapshots: Array<Ethereum_LiquidityPoolDailySnapshot>;
  Ethereum_liquidityPoolHourlySnapshot?: Maybe<Ethereum_LiquidityPoolHourlySnapshot>;
  Ethereum_liquidityPoolHourlySnapshots: Array<Ethereum_LiquidityPoolHourlySnapshot>;
  Ethereum_tick?: Maybe<Ethereum_Tick>;
  Ethereum_ticks: Array<Ethereum_Tick>;
  Ethereum_tickDailySnapshot?: Maybe<Ethereum_TickDailySnapshot>;
  Ethereum_tickDailySnapshots: Array<Ethereum_TickDailySnapshot>;
  Ethereum_tickHourlySnapshot?: Maybe<Ethereum_TickHourlySnapshot>;
  Ethereum_tickHourlySnapshots: Array<Ethereum_TickHourlySnapshot>;
  Ethereum_account?: Maybe<Ethereum_Account>;
  Ethereum_accounts: Array<Ethereum_Account>;
  Ethereum_position?: Maybe<Ethereum_Position>;
  Ethereum_positions: Array<Ethereum_Position>;
  Ethereum_positionSnapshot?: Maybe<Ethereum_PositionSnapshot>;
  Ethereum_positionSnapshots: Array<Ethereum_PositionSnapshot>;
  Ethereum_deposit?: Maybe<Ethereum_Deposit>;
  Ethereum_deposits: Array<Ethereum_Deposit>;
  Ethereum_withdraw?: Maybe<Ethereum_Withdraw>;
  Ethereum_withdraws: Array<Ethereum_Withdraw>;
  Ethereum_swap?: Maybe<Ethereum_Swap>;
  Ethereum_swaps: Array<Ethereum_Swap>;
  Ethereum_activeAccount?: Maybe<Ethereum_ActiveAccount>;
  Ethereum_activeAccounts: Array<Ethereum_ActiveAccount>;
  Ethereum_liquidityPoolAmount?: Maybe<Ethereum__LiquidityPoolAmount>;
  Ethereum_liquidityPoolAmounts: Array<Ethereum__LiquidityPoolAmount>;
  Ethereum_helperStore?: Maybe<Ethereum__HelperStore>;
  Ethereum_helperStores: Array<Ethereum__HelperStore>;
  Ethereum_tokenWhitelist?: Maybe<Ethereum__TokenWhitelist>;
  Ethereum_tokenWhitelists: Array<Ethereum__TokenWhitelist>;
  Ethereum_tokenWhitelistSymbol?: Maybe<Ethereum__TokenWhitelistSymbol>;
  Ethereum_tokenWhitelistSymbols: Array<Ethereum__TokenWhitelistSymbol>;
  Ethereum_protocol?: Maybe<Ethereum_Protocol>;
  Ethereum_protocols: Array<Ethereum_Protocol>;
  /** Access to subgraph metadata */
  Ethereum__meta?: Maybe<Ethereum__Meta_>;
  Optimism_token?: Maybe<Optimism_Token>;
  Optimism_tokens: Array<Optimism_Token>;
  Optimism_rewardToken?: Maybe<Optimism_RewardToken>;
  Optimism_rewardTokens: Array<Optimism_RewardToken>;
  Optimism_liquidityPoolFee?: Maybe<Optimism_LiquidityPoolFee>;
  Optimism_liquidityPoolFees: Array<Optimism_LiquidityPoolFee>;
  Optimism_dexAmmProtocol?: Maybe<Optimism_DexAmmProtocol>;
  Optimism_dexAmmProtocols: Array<Optimism_DexAmmProtocol>;
  Optimism_usageMetricsDailySnapshot?: Maybe<Optimism_UsageMetricsDailySnapshot>;
  Optimism_usageMetricsDailySnapshots: Array<Optimism_UsageMetricsDailySnapshot>;
  Optimism_usageMetricsHourlySnapshot?: Maybe<Optimism_UsageMetricsHourlySnapshot>;
  Optimism_usageMetricsHourlySnapshots: Array<Optimism_UsageMetricsHourlySnapshot>;
  Optimism_financialsDailySnapshot?: Maybe<Optimism_FinancialsDailySnapshot>;
  Optimism_financialsDailySnapshots: Array<Optimism_FinancialsDailySnapshot>;
  Optimism_liquidityPool?: Maybe<Optimism_LiquidityPool>;
  Optimism_liquidityPools: Array<Optimism_LiquidityPool>;
  Optimism_liquidityPoolDailySnapshot?: Maybe<Optimism_LiquidityPoolDailySnapshot>;
  Optimism_liquidityPoolDailySnapshots: Array<Optimism_LiquidityPoolDailySnapshot>;
  Optimism_liquidityPoolHourlySnapshot?: Maybe<Optimism_LiquidityPoolHourlySnapshot>;
  Optimism_liquidityPoolHourlySnapshots: Array<Optimism_LiquidityPoolHourlySnapshot>;
  Optimism_tick?: Maybe<Optimism_Tick>;
  Optimism_ticks: Array<Optimism_Tick>;
  Optimism_tickDailySnapshot?: Maybe<Optimism_TickDailySnapshot>;
  Optimism_tickDailySnapshots: Array<Optimism_TickDailySnapshot>;
  Optimism_tickHourlySnapshot?: Maybe<Optimism_TickHourlySnapshot>;
  Optimism_tickHourlySnapshots: Array<Optimism_TickHourlySnapshot>;
  Optimism_account?: Maybe<Optimism_Account>;
  Optimism_accounts: Array<Optimism_Account>;
  Optimism_position?: Maybe<Optimism_Position>;
  Optimism_positions: Array<Optimism_Position>;
  Optimism_positionSnapshot?: Maybe<Optimism_PositionSnapshot>;
  Optimism_positionSnapshots: Array<Optimism_PositionSnapshot>;
  Optimism_deposit?: Maybe<Optimism_Deposit>;
  Optimism_deposits: Array<Optimism_Deposit>;
  Optimism_withdraw?: Maybe<Optimism_Withdraw>;
  Optimism_withdraws: Array<Optimism_Withdraw>;
  Optimism_swap?: Maybe<Optimism_Swap>;
  Optimism_swaps: Array<Optimism_Swap>;
  Optimism_activeAccount?: Maybe<Optimism_ActiveAccount>;
  Optimism_activeAccounts: Array<Optimism_ActiveAccount>;
  Optimism_liquidityPoolAmount?: Maybe<Optimism__LiquidityPoolAmount>;
  Optimism_liquidityPoolAmounts: Array<Optimism__LiquidityPoolAmount>;
  Optimism_helperStore?: Maybe<Optimism__HelperStore>;
  Optimism_helperStores: Array<Optimism__HelperStore>;
  Optimism_tokenWhitelist?: Maybe<Optimism__TokenWhitelist>;
  Optimism_tokenWhitelists: Array<Optimism__TokenWhitelist>;
  Optimism_tokenWhitelistSymbol?: Maybe<Optimism__TokenWhitelistSymbol>;
  Optimism_tokenWhitelistSymbols: Array<Optimism__TokenWhitelistSymbol>;
  Optimism_protocol?: Maybe<Optimism_Protocol>;
  Optimism_protocols: Array<Optimism_Protocol>;
  /** Access to subgraph metadata */
  Optimism__meta?: Maybe<Optimism__Meta_>;
  Arbitrum_token?: Maybe<Arbitrum_Token>;
  Arbitrum_tokens: Array<Arbitrum_Token>;
  Arbitrum_rewardToken?: Maybe<Arbitrum_RewardToken>;
  Arbitrum_rewardTokens: Array<Arbitrum_RewardToken>;
  Arbitrum_liquidityPoolFee?: Maybe<Arbitrum_LiquidityPoolFee>;
  Arbitrum_liquidityPoolFees: Array<Arbitrum_LiquidityPoolFee>;
  Arbitrum_dexAmmProtocol?: Maybe<Arbitrum_DexAmmProtocol>;
  Arbitrum_dexAmmProtocols: Array<Arbitrum_DexAmmProtocol>;
  Arbitrum_usageMetricsDailySnapshot?: Maybe<Arbitrum_UsageMetricsDailySnapshot>;
  Arbitrum_usageMetricsDailySnapshots: Array<Arbitrum_UsageMetricsDailySnapshot>;
  Arbitrum_usageMetricsHourlySnapshot?: Maybe<Arbitrum_UsageMetricsHourlySnapshot>;
  Arbitrum_usageMetricsHourlySnapshots: Array<Arbitrum_UsageMetricsHourlySnapshot>;
  Arbitrum_financialsDailySnapshot?: Maybe<Arbitrum_FinancialsDailySnapshot>;
  Arbitrum_financialsDailySnapshots: Array<Arbitrum_FinancialsDailySnapshot>;
  Arbitrum_liquidityPool?: Maybe<Arbitrum_LiquidityPool>;
  Arbitrum_liquidityPools: Array<Arbitrum_LiquidityPool>;
  Arbitrum_liquidityPoolDailySnapshot?: Maybe<Arbitrum_LiquidityPoolDailySnapshot>;
  Arbitrum_liquidityPoolDailySnapshots: Array<Arbitrum_LiquidityPoolDailySnapshot>;
  Arbitrum_liquidityPoolHourlySnapshot?: Maybe<Arbitrum_LiquidityPoolHourlySnapshot>;
  Arbitrum_liquidityPoolHourlySnapshots: Array<Arbitrum_LiquidityPoolHourlySnapshot>;
  Arbitrum_tick?: Maybe<Arbitrum_Tick>;
  Arbitrum_ticks: Array<Arbitrum_Tick>;
  Arbitrum_tickDailySnapshot?: Maybe<Arbitrum_TickDailySnapshot>;
  Arbitrum_tickDailySnapshots: Array<Arbitrum_TickDailySnapshot>;
  Arbitrum_tickHourlySnapshot?: Maybe<Arbitrum_TickHourlySnapshot>;
  Arbitrum_tickHourlySnapshots: Array<Arbitrum_TickHourlySnapshot>;
  Arbitrum_account?: Maybe<Arbitrum_Account>;
  Arbitrum_accounts: Array<Arbitrum_Account>;
  Arbitrum_position?: Maybe<Arbitrum_Position>;
  Arbitrum_positions: Array<Arbitrum_Position>;
  Arbitrum_positionSnapshot?: Maybe<Arbitrum_PositionSnapshot>;
  Arbitrum_positionSnapshots: Array<Arbitrum_PositionSnapshot>;
  Arbitrum_deposit?: Maybe<Arbitrum_Deposit>;
  Arbitrum_deposits: Array<Arbitrum_Deposit>;
  Arbitrum_withdraw?: Maybe<Arbitrum_Withdraw>;
  Arbitrum_withdraws: Array<Arbitrum_Withdraw>;
  Arbitrum_swap?: Maybe<Arbitrum_Swap>;
  Arbitrum_swaps: Array<Arbitrum_Swap>;
  Arbitrum_activeAccount?: Maybe<Arbitrum_ActiveAccount>;
  Arbitrum_activeAccounts: Array<Arbitrum_ActiveAccount>;
  Arbitrum_liquidityPoolAmount?: Maybe<Arbitrum__LiquidityPoolAmount>;
  Arbitrum_liquidityPoolAmounts: Array<Arbitrum__LiquidityPoolAmount>;
  Arbitrum_helperStore?: Maybe<Arbitrum__HelperStore>;
  Arbitrum_helperStores: Array<Arbitrum__HelperStore>;
  Arbitrum_tokenWhitelist?: Maybe<Arbitrum__TokenWhitelist>;
  Arbitrum_tokenWhitelists: Array<Arbitrum__TokenWhitelist>;
  Arbitrum_tokenWhitelistSymbol?: Maybe<Arbitrum__TokenWhitelistSymbol>;
  Arbitrum_tokenWhitelistSymbols: Array<Arbitrum__TokenWhitelistSymbol>;
  Arbitrum_protocol?: Maybe<Arbitrum_Protocol>;
  Arbitrum_protocols: Array<Arbitrum_Protocol>;
  /** Access to subgraph metadata */
  Arbitrum__meta?: Maybe<Arbitrum__Meta_>;
  Base_token?: Maybe<Base_Token>;
  Base_tokens: Array<Base_Token>;
  Base_rewardToken?: Maybe<Base_RewardToken>;
  Base_rewardTokens: Array<Base_RewardToken>;
  Base_liquidityPoolFee?: Maybe<Base_LiquidityPoolFee>;
  Base_liquidityPoolFees: Array<Base_LiquidityPoolFee>;
  Base_dexAmmProtocol?: Maybe<Base_DexAmmProtocol>;
  Base_dexAmmProtocols: Array<Base_DexAmmProtocol>;
  Base_usageMetricsDailySnapshot?: Maybe<Base_UsageMetricsDailySnapshot>;
  Base_usageMetricsDailySnapshots: Array<Base_UsageMetricsDailySnapshot>;
  Base_usageMetricsHourlySnapshot?: Maybe<Base_UsageMetricsHourlySnapshot>;
  Base_usageMetricsHourlySnapshots: Array<Base_UsageMetricsHourlySnapshot>;
  Base_financialsDailySnapshot?: Maybe<Base_FinancialsDailySnapshot>;
  Base_financialsDailySnapshots: Array<Base_FinancialsDailySnapshot>;
  Base_liquidityPool?: Maybe<Base_LiquidityPool>;
  Base_liquidityPools: Array<Base_LiquidityPool>;
  Base_liquidityPoolDailySnapshot?: Maybe<Base_LiquidityPoolDailySnapshot>;
  Base_liquidityPoolDailySnapshots: Array<Base_LiquidityPoolDailySnapshot>;
  Base_liquidityPoolHourlySnapshot?: Maybe<Base_LiquidityPoolHourlySnapshot>;
  Base_liquidityPoolHourlySnapshots: Array<Base_LiquidityPoolHourlySnapshot>;
  Base_tick?: Maybe<Base_Tick>;
  Base_ticks: Array<Base_Tick>;
  Base_tickDailySnapshot?: Maybe<Base_TickDailySnapshot>;
  Base_tickDailySnapshots: Array<Base_TickDailySnapshot>;
  Base_tickHourlySnapshot?: Maybe<Base_TickHourlySnapshot>;
  Base_tickHourlySnapshots: Array<Base_TickHourlySnapshot>;
  Base_account?: Maybe<Base_Account>;
  Base_accounts: Array<Base_Account>;
  Base_position?: Maybe<Base_Position>;
  Base_positions: Array<Base_Position>;
  Base_positionSnapshot?: Maybe<Base_PositionSnapshot>;
  Base_positionSnapshots: Array<Base_PositionSnapshot>;
  Base_deposit?: Maybe<Base_Deposit>;
  Base_deposits: Array<Base_Deposit>;
  Base_withdraw?: Maybe<Base_Withdraw>;
  Base_withdraws: Array<Base_Withdraw>;
  Base_swap?: Maybe<Base_Swap>;
  Base_swaps: Array<Base_Swap>;
  Base_activeAccount?: Maybe<Base_ActiveAccount>;
  Base_activeAccounts: Array<Base_ActiveAccount>;
  Base_liquidityPoolAmount?: Maybe<Base__LiquidityPoolAmount>;
  Base_liquidityPoolAmounts: Array<Base__LiquidityPoolAmount>;
  Base_helperStore?: Maybe<Base__HelperStore>;
  Base_helperStores: Array<Base__HelperStore>;
  Base_tokenWhitelist?: Maybe<Base__TokenWhitelist>;
  Base_tokenWhitelists: Array<Base__TokenWhitelist>;
  Base_tokenWhitelistSymbol?: Maybe<Base__TokenWhitelistSymbol>;
  Base_tokenWhitelistSymbols: Array<Base__TokenWhitelistSymbol>;
  Base_protocol?: Maybe<Base_Protocol>;
  Base_protocols: Array<Base_Protocol>;
  /** Access to subgraph metadata */
  Base__meta?: Maybe<Base__Meta_>;
  uniswapV3Ethereum?: Maybe<Query>;
  uniswapV3Optimism?: Maybe<Query>;
  uniswapV3Arbitrum?: Maybe<Query>;
  uniswapV3Base?: Maybe<Query>;
};


export type QueryEthereum_tokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Token_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Token_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_rewardTokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_rewardTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_RewardToken_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_RewardToken_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_liquidityPoolFeeArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_liquidityPoolFeesArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_LiquidityPoolFee_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_LiquidityPoolFee_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_dexAmmProtocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_dexAmmProtocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_DexAmmProtocol_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_DexAmmProtocol_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_usageMetricsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_usageMetricsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_UsageMetricsDailySnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_usageMetricsHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_usageMetricsHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_UsageMetricsHourlySnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_financialsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_financialsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_FinancialsDailySnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_liquidityPoolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_liquidityPoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_LiquidityPool_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_liquidityPoolDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_liquidityPoolDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_LiquidityPoolDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_LiquidityPoolDailySnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_liquidityPoolHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_liquidityPoolHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_LiquidityPoolHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_LiquidityPoolHourlySnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_tickArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_ticksArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Tick_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Tick_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_tickDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_tickDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_TickDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_TickDailySnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_tickHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_tickHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_TickHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_TickHourlySnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_accountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_accountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Account_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Account_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_positionArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_positionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Position_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Position_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_positionSnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_positionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_PositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_PositionSnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_depositArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_depositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Deposit_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Deposit_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_withdrawArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_withdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Withdraw_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_swapArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Swap_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Swap_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_activeAccountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_activeAccountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_ActiveAccount_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_ActiveAccount_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_liquidityPoolAmountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_liquidityPoolAmountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum__LiquidityPoolAmount_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum__LiquidityPoolAmount_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_helperStoreArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_helperStoresArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum__HelperStore_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum__HelperStore_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_tokenWhitelistArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_tokenWhitelistsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum__TokenWhitelist_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum__TokenWhitelist_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_tokenWhitelistSymbolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_tokenWhitelistSymbolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum__TokenWhitelistSymbol_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum__TokenWhitelistSymbol_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_protocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum_protocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Protocol_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Protocol_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type QueryEthereum__metaArgs = {
  block?: InputMaybe<Ethereum_Block_height>;
};


export type QueryOptimism_tokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Token_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Token_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_rewardTokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_rewardTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_RewardToken_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_RewardToken_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_liquidityPoolFeeArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_liquidityPoolFeesArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_LiquidityPoolFee_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_LiquidityPoolFee_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_dexAmmProtocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_dexAmmProtocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_DexAmmProtocol_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_DexAmmProtocol_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_usageMetricsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_usageMetricsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_UsageMetricsDailySnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_usageMetricsHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_usageMetricsHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_UsageMetricsHourlySnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_financialsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_financialsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_FinancialsDailySnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_liquidityPoolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_liquidityPoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_LiquidityPool_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_liquidityPoolDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_liquidityPoolDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_LiquidityPoolDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_LiquidityPoolDailySnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_liquidityPoolHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_liquidityPoolHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_LiquidityPoolHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_LiquidityPoolHourlySnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_tickArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_ticksArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Tick_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Tick_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_tickDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_tickDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_TickDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_TickDailySnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_tickHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_tickHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_TickHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_TickHourlySnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_accountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_accountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Account_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Account_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_positionArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_positionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Position_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Position_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_positionSnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_positionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_PositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_PositionSnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_depositArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_depositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Deposit_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Deposit_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_withdrawArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_withdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Withdraw_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_swapArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Swap_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Swap_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_activeAccountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_activeAccountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_ActiveAccount_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_ActiveAccount_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_liquidityPoolAmountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_liquidityPoolAmountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism__LiquidityPoolAmount_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism__LiquidityPoolAmount_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_helperStoreArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_helperStoresArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism__HelperStore_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism__HelperStore_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_tokenWhitelistArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_tokenWhitelistsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism__TokenWhitelist_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism__TokenWhitelist_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_tokenWhitelistSymbolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_tokenWhitelistSymbolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism__TokenWhitelistSymbol_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism__TokenWhitelistSymbol_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_protocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism_protocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Protocol_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Protocol_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type QueryOptimism__metaArgs = {
  block?: InputMaybe<Optimism_Block_height>;
};


export type QueryArbitrum_tokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Token_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Token_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_rewardTokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_rewardTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_RewardToken_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_RewardToken_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_liquidityPoolFeeArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_liquidityPoolFeesArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_LiquidityPoolFee_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_LiquidityPoolFee_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_dexAmmProtocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_dexAmmProtocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_DexAmmProtocol_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_DexAmmProtocol_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_usageMetricsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_usageMetricsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_UsageMetricsDailySnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_usageMetricsHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_usageMetricsHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_UsageMetricsHourlySnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_financialsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_financialsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_FinancialsDailySnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_liquidityPoolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_liquidityPoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_LiquidityPool_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_liquidityPoolDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_liquidityPoolDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_LiquidityPoolDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_LiquidityPoolDailySnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_liquidityPoolHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_liquidityPoolHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_LiquidityPoolHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_LiquidityPoolHourlySnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_tickArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_ticksArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Tick_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Tick_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_tickDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_tickDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_TickDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_TickDailySnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_tickHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_tickHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_TickHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_TickHourlySnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_accountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_accountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Account_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Account_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_positionArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_positionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Position_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Position_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_positionSnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_positionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_PositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_PositionSnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_depositArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_depositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Deposit_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Deposit_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_withdrawArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_withdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Withdraw_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_swapArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Swap_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Swap_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_activeAccountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_activeAccountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_ActiveAccount_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_ActiveAccount_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_liquidityPoolAmountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_liquidityPoolAmountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum__LiquidityPoolAmount_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum__LiquidityPoolAmount_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_helperStoreArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_helperStoresArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum__HelperStore_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum__HelperStore_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_tokenWhitelistArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_tokenWhitelistsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum__TokenWhitelist_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum__TokenWhitelist_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_tokenWhitelistSymbolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_tokenWhitelistSymbolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum__TokenWhitelistSymbol_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum__TokenWhitelistSymbol_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_protocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum_protocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Protocol_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Protocol_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type QueryArbitrum__metaArgs = {
  block?: InputMaybe<Arbitrum_Block_height>;
};


export type QueryBase_tokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Token_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Token_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_rewardTokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_rewardTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_RewardToken_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_RewardToken_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_liquidityPoolFeeArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_liquidityPoolFeesArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_LiquidityPoolFee_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_LiquidityPoolFee_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_dexAmmProtocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_dexAmmProtocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_DexAmmProtocol_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_DexAmmProtocol_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_usageMetricsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_usageMetricsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_UsageMetricsDailySnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_usageMetricsHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_usageMetricsHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_UsageMetricsHourlySnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_financialsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_financialsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_FinancialsDailySnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_liquidityPoolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_liquidityPoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_LiquidityPool_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_liquidityPoolDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_liquidityPoolDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_LiquidityPoolDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_LiquidityPoolDailySnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_liquidityPoolHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_liquidityPoolHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_LiquidityPoolHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_LiquidityPoolHourlySnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_tickArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_ticksArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Tick_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Tick_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_tickDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_tickDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_TickDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_TickDailySnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_tickHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_tickHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_TickHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_TickHourlySnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_accountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_accountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Account_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Account_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_positionArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_positionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Position_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Position_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_positionSnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_positionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_PositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_PositionSnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_depositArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_depositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Deposit_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Deposit_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_withdrawArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_withdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Withdraw_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_swapArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Swap_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Swap_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_activeAccountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_activeAccountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_ActiveAccount_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_ActiveAccount_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_liquidityPoolAmountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_liquidityPoolAmountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base__LiquidityPoolAmount_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base__LiquidityPoolAmount_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_helperStoreArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_helperStoresArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base__HelperStore_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base__HelperStore_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_tokenWhitelistArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_tokenWhitelistsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base__TokenWhitelist_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base__TokenWhitelist_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_tokenWhitelistSymbolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_tokenWhitelistSymbolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base__TokenWhitelistSymbol_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base__TokenWhitelistSymbol_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_protocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase_protocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Protocol_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Protocol_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type QueryBase__metaArgs = {
  block?: InputMaybe<Base_Block_height>;
};

export type Subscription = {
  Ethereum_token?: Maybe<Ethereum_Token>;
  Ethereum_tokens: Array<Ethereum_Token>;
  Ethereum_rewardToken?: Maybe<Ethereum_RewardToken>;
  Ethereum_rewardTokens: Array<Ethereum_RewardToken>;
  Ethereum_liquidityPoolFee?: Maybe<Ethereum_LiquidityPoolFee>;
  Ethereum_liquidityPoolFees: Array<Ethereum_LiquidityPoolFee>;
  Ethereum_dexAmmProtocol?: Maybe<Ethereum_DexAmmProtocol>;
  Ethereum_dexAmmProtocols: Array<Ethereum_DexAmmProtocol>;
  Ethereum_usageMetricsDailySnapshot?: Maybe<Ethereum_UsageMetricsDailySnapshot>;
  Ethereum_usageMetricsDailySnapshots: Array<Ethereum_UsageMetricsDailySnapshot>;
  Ethereum_usageMetricsHourlySnapshot?: Maybe<Ethereum_UsageMetricsHourlySnapshot>;
  Ethereum_usageMetricsHourlySnapshots: Array<Ethereum_UsageMetricsHourlySnapshot>;
  Ethereum_financialsDailySnapshot?: Maybe<Ethereum_FinancialsDailySnapshot>;
  Ethereum_financialsDailySnapshots: Array<Ethereum_FinancialsDailySnapshot>;
  Ethereum_liquidityPool?: Maybe<Ethereum_LiquidityPool>;
  Ethereum_liquidityPools: Array<Ethereum_LiquidityPool>;
  Ethereum_liquidityPoolDailySnapshot?: Maybe<Ethereum_LiquidityPoolDailySnapshot>;
  Ethereum_liquidityPoolDailySnapshots: Array<Ethereum_LiquidityPoolDailySnapshot>;
  Ethereum_liquidityPoolHourlySnapshot?: Maybe<Ethereum_LiquidityPoolHourlySnapshot>;
  Ethereum_liquidityPoolHourlySnapshots: Array<Ethereum_LiquidityPoolHourlySnapshot>;
  Ethereum_tick?: Maybe<Ethereum_Tick>;
  Ethereum_ticks: Array<Ethereum_Tick>;
  Ethereum_tickDailySnapshot?: Maybe<Ethereum_TickDailySnapshot>;
  Ethereum_tickDailySnapshots: Array<Ethereum_TickDailySnapshot>;
  Ethereum_tickHourlySnapshot?: Maybe<Ethereum_TickHourlySnapshot>;
  Ethereum_tickHourlySnapshots: Array<Ethereum_TickHourlySnapshot>;
  Ethereum_account?: Maybe<Ethereum_Account>;
  Ethereum_accounts: Array<Ethereum_Account>;
  Ethereum_position?: Maybe<Ethereum_Position>;
  Ethereum_positions: Array<Ethereum_Position>;
  Ethereum_positionSnapshot?: Maybe<Ethereum_PositionSnapshot>;
  Ethereum_positionSnapshots: Array<Ethereum_PositionSnapshot>;
  Ethereum_deposit?: Maybe<Ethereum_Deposit>;
  Ethereum_deposits: Array<Ethereum_Deposit>;
  Ethereum_withdraw?: Maybe<Ethereum_Withdraw>;
  Ethereum_withdraws: Array<Ethereum_Withdraw>;
  Ethereum_swap?: Maybe<Ethereum_Swap>;
  Ethereum_swaps: Array<Ethereum_Swap>;
  Ethereum_activeAccount?: Maybe<Ethereum_ActiveAccount>;
  Ethereum_activeAccounts: Array<Ethereum_ActiveAccount>;
  Ethereum_liquidityPoolAmount?: Maybe<Ethereum__LiquidityPoolAmount>;
  Ethereum_liquidityPoolAmounts: Array<Ethereum__LiquidityPoolAmount>;
  Ethereum_helperStore?: Maybe<Ethereum__HelperStore>;
  Ethereum_helperStores: Array<Ethereum__HelperStore>;
  Ethereum_tokenWhitelist?: Maybe<Ethereum__TokenWhitelist>;
  Ethereum_tokenWhitelists: Array<Ethereum__TokenWhitelist>;
  Ethereum_tokenWhitelistSymbol?: Maybe<Ethereum__TokenWhitelistSymbol>;
  Ethereum_tokenWhitelistSymbols: Array<Ethereum__TokenWhitelistSymbol>;
  Ethereum_protocol?: Maybe<Ethereum_Protocol>;
  Ethereum_protocols: Array<Ethereum_Protocol>;
  /** Access to subgraph metadata */
  Ethereum__meta?: Maybe<Ethereum__Meta_>;
  Optimism_token?: Maybe<Optimism_Token>;
  Optimism_tokens: Array<Optimism_Token>;
  Optimism_rewardToken?: Maybe<Optimism_RewardToken>;
  Optimism_rewardTokens: Array<Optimism_RewardToken>;
  Optimism_liquidityPoolFee?: Maybe<Optimism_LiquidityPoolFee>;
  Optimism_liquidityPoolFees: Array<Optimism_LiquidityPoolFee>;
  Optimism_dexAmmProtocol?: Maybe<Optimism_DexAmmProtocol>;
  Optimism_dexAmmProtocols: Array<Optimism_DexAmmProtocol>;
  Optimism_usageMetricsDailySnapshot?: Maybe<Optimism_UsageMetricsDailySnapshot>;
  Optimism_usageMetricsDailySnapshots: Array<Optimism_UsageMetricsDailySnapshot>;
  Optimism_usageMetricsHourlySnapshot?: Maybe<Optimism_UsageMetricsHourlySnapshot>;
  Optimism_usageMetricsHourlySnapshots: Array<Optimism_UsageMetricsHourlySnapshot>;
  Optimism_financialsDailySnapshot?: Maybe<Optimism_FinancialsDailySnapshot>;
  Optimism_financialsDailySnapshots: Array<Optimism_FinancialsDailySnapshot>;
  Optimism_liquidityPool?: Maybe<Optimism_LiquidityPool>;
  Optimism_liquidityPools: Array<Optimism_LiquidityPool>;
  Optimism_liquidityPoolDailySnapshot?: Maybe<Optimism_LiquidityPoolDailySnapshot>;
  Optimism_liquidityPoolDailySnapshots: Array<Optimism_LiquidityPoolDailySnapshot>;
  Optimism_liquidityPoolHourlySnapshot?: Maybe<Optimism_LiquidityPoolHourlySnapshot>;
  Optimism_liquidityPoolHourlySnapshots: Array<Optimism_LiquidityPoolHourlySnapshot>;
  Optimism_tick?: Maybe<Optimism_Tick>;
  Optimism_ticks: Array<Optimism_Tick>;
  Optimism_tickDailySnapshot?: Maybe<Optimism_TickDailySnapshot>;
  Optimism_tickDailySnapshots: Array<Optimism_TickDailySnapshot>;
  Optimism_tickHourlySnapshot?: Maybe<Optimism_TickHourlySnapshot>;
  Optimism_tickHourlySnapshots: Array<Optimism_TickHourlySnapshot>;
  Optimism_account?: Maybe<Optimism_Account>;
  Optimism_accounts: Array<Optimism_Account>;
  Optimism_position?: Maybe<Optimism_Position>;
  Optimism_positions: Array<Optimism_Position>;
  Optimism_positionSnapshot?: Maybe<Optimism_PositionSnapshot>;
  Optimism_positionSnapshots: Array<Optimism_PositionSnapshot>;
  Optimism_deposit?: Maybe<Optimism_Deposit>;
  Optimism_deposits: Array<Optimism_Deposit>;
  Optimism_withdraw?: Maybe<Optimism_Withdraw>;
  Optimism_withdraws: Array<Optimism_Withdraw>;
  Optimism_swap?: Maybe<Optimism_Swap>;
  Optimism_swaps: Array<Optimism_Swap>;
  Optimism_activeAccount?: Maybe<Optimism_ActiveAccount>;
  Optimism_activeAccounts: Array<Optimism_ActiveAccount>;
  Optimism_liquidityPoolAmount?: Maybe<Optimism__LiquidityPoolAmount>;
  Optimism_liquidityPoolAmounts: Array<Optimism__LiquidityPoolAmount>;
  Optimism_helperStore?: Maybe<Optimism__HelperStore>;
  Optimism_helperStores: Array<Optimism__HelperStore>;
  Optimism_tokenWhitelist?: Maybe<Optimism__TokenWhitelist>;
  Optimism_tokenWhitelists: Array<Optimism__TokenWhitelist>;
  Optimism_tokenWhitelistSymbol?: Maybe<Optimism__TokenWhitelistSymbol>;
  Optimism_tokenWhitelistSymbols: Array<Optimism__TokenWhitelistSymbol>;
  Optimism_protocol?: Maybe<Optimism_Protocol>;
  Optimism_protocols: Array<Optimism_Protocol>;
  /** Access to subgraph metadata */
  Optimism__meta?: Maybe<Optimism__Meta_>;
  Arbitrum_token?: Maybe<Arbitrum_Token>;
  Arbitrum_tokens: Array<Arbitrum_Token>;
  Arbitrum_rewardToken?: Maybe<Arbitrum_RewardToken>;
  Arbitrum_rewardTokens: Array<Arbitrum_RewardToken>;
  Arbitrum_liquidityPoolFee?: Maybe<Arbitrum_LiquidityPoolFee>;
  Arbitrum_liquidityPoolFees: Array<Arbitrum_LiquidityPoolFee>;
  Arbitrum_dexAmmProtocol?: Maybe<Arbitrum_DexAmmProtocol>;
  Arbitrum_dexAmmProtocols: Array<Arbitrum_DexAmmProtocol>;
  Arbitrum_usageMetricsDailySnapshot?: Maybe<Arbitrum_UsageMetricsDailySnapshot>;
  Arbitrum_usageMetricsDailySnapshots: Array<Arbitrum_UsageMetricsDailySnapshot>;
  Arbitrum_usageMetricsHourlySnapshot?: Maybe<Arbitrum_UsageMetricsHourlySnapshot>;
  Arbitrum_usageMetricsHourlySnapshots: Array<Arbitrum_UsageMetricsHourlySnapshot>;
  Arbitrum_financialsDailySnapshot?: Maybe<Arbitrum_FinancialsDailySnapshot>;
  Arbitrum_financialsDailySnapshots: Array<Arbitrum_FinancialsDailySnapshot>;
  Arbitrum_liquidityPool?: Maybe<Arbitrum_LiquidityPool>;
  Arbitrum_liquidityPools: Array<Arbitrum_LiquidityPool>;
  Arbitrum_liquidityPoolDailySnapshot?: Maybe<Arbitrum_LiquidityPoolDailySnapshot>;
  Arbitrum_liquidityPoolDailySnapshots: Array<Arbitrum_LiquidityPoolDailySnapshot>;
  Arbitrum_liquidityPoolHourlySnapshot?: Maybe<Arbitrum_LiquidityPoolHourlySnapshot>;
  Arbitrum_liquidityPoolHourlySnapshots: Array<Arbitrum_LiquidityPoolHourlySnapshot>;
  Arbitrum_tick?: Maybe<Arbitrum_Tick>;
  Arbitrum_ticks: Array<Arbitrum_Tick>;
  Arbitrum_tickDailySnapshot?: Maybe<Arbitrum_TickDailySnapshot>;
  Arbitrum_tickDailySnapshots: Array<Arbitrum_TickDailySnapshot>;
  Arbitrum_tickHourlySnapshot?: Maybe<Arbitrum_TickHourlySnapshot>;
  Arbitrum_tickHourlySnapshots: Array<Arbitrum_TickHourlySnapshot>;
  Arbitrum_account?: Maybe<Arbitrum_Account>;
  Arbitrum_accounts: Array<Arbitrum_Account>;
  Arbitrum_position?: Maybe<Arbitrum_Position>;
  Arbitrum_positions: Array<Arbitrum_Position>;
  Arbitrum_positionSnapshot?: Maybe<Arbitrum_PositionSnapshot>;
  Arbitrum_positionSnapshots: Array<Arbitrum_PositionSnapshot>;
  Arbitrum_deposit?: Maybe<Arbitrum_Deposit>;
  Arbitrum_deposits: Array<Arbitrum_Deposit>;
  Arbitrum_withdraw?: Maybe<Arbitrum_Withdraw>;
  Arbitrum_withdraws: Array<Arbitrum_Withdraw>;
  Arbitrum_swap?: Maybe<Arbitrum_Swap>;
  Arbitrum_swaps: Array<Arbitrum_Swap>;
  Arbitrum_activeAccount?: Maybe<Arbitrum_ActiveAccount>;
  Arbitrum_activeAccounts: Array<Arbitrum_ActiveAccount>;
  Arbitrum_liquidityPoolAmount?: Maybe<Arbitrum__LiquidityPoolAmount>;
  Arbitrum_liquidityPoolAmounts: Array<Arbitrum__LiquidityPoolAmount>;
  Arbitrum_helperStore?: Maybe<Arbitrum__HelperStore>;
  Arbitrum_helperStores: Array<Arbitrum__HelperStore>;
  Arbitrum_tokenWhitelist?: Maybe<Arbitrum__TokenWhitelist>;
  Arbitrum_tokenWhitelists: Array<Arbitrum__TokenWhitelist>;
  Arbitrum_tokenWhitelistSymbol?: Maybe<Arbitrum__TokenWhitelistSymbol>;
  Arbitrum_tokenWhitelistSymbols: Array<Arbitrum__TokenWhitelistSymbol>;
  Arbitrum_protocol?: Maybe<Arbitrum_Protocol>;
  Arbitrum_protocols: Array<Arbitrum_Protocol>;
  /** Access to subgraph metadata */
  Arbitrum__meta?: Maybe<Arbitrum__Meta_>;
  Base_token?: Maybe<Base_Token>;
  Base_tokens: Array<Base_Token>;
  Base_rewardToken?: Maybe<Base_RewardToken>;
  Base_rewardTokens: Array<Base_RewardToken>;
  Base_liquidityPoolFee?: Maybe<Base_LiquidityPoolFee>;
  Base_liquidityPoolFees: Array<Base_LiquidityPoolFee>;
  Base_dexAmmProtocol?: Maybe<Base_DexAmmProtocol>;
  Base_dexAmmProtocols: Array<Base_DexAmmProtocol>;
  Base_usageMetricsDailySnapshot?: Maybe<Base_UsageMetricsDailySnapshot>;
  Base_usageMetricsDailySnapshots: Array<Base_UsageMetricsDailySnapshot>;
  Base_usageMetricsHourlySnapshot?: Maybe<Base_UsageMetricsHourlySnapshot>;
  Base_usageMetricsHourlySnapshots: Array<Base_UsageMetricsHourlySnapshot>;
  Base_financialsDailySnapshot?: Maybe<Base_FinancialsDailySnapshot>;
  Base_financialsDailySnapshots: Array<Base_FinancialsDailySnapshot>;
  Base_liquidityPool?: Maybe<Base_LiquidityPool>;
  Base_liquidityPools: Array<Base_LiquidityPool>;
  Base_liquidityPoolDailySnapshot?: Maybe<Base_LiquidityPoolDailySnapshot>;
  Base_liquidityPoolDailySnapshots: Array<Base_LiquidityPoolDailySnapshot>;
  Base_liquidityPoolHourlySnapshot?: Maybe<Base_LiquidityPoolHourlySnapshot>;
  Base_liquidityPoolHourlySnapshots: Array<Base_LiquidityPoolHourlySnapshot>;
  Base_tick?: Maybe<Base_Tick>;
  Base_ticks: Array<Base_Tick>;
  Base_tickDailySnapshot?: Maybe<Base_TickDailySnapshot>;
  Base_tickDailySnapshots: Array<Base_TickDailySnapshot>;
  Base_tickHourlySnapshot?: Maybe<Base_TickHourlySnapshot>;
  Base_tickHourlySnapshots: Array<Base_TickHourlySnapshot>;
  Base_account?: Maybe<Base_Account>;
  Base_accounts: Array<Base_Account>;
  Base_position?: Maybe<Base_Position>;
  Base_positions: Array<Base_Position>;
  Base_positionSnapshot?: Maybe<Base_PositionSnapshot>;
  Base_positionSnapshots: Array<Base_PositionSnapshot>;
  Base_deposit?: Maybe<Base_Deposit>;
  Base_deposits: Array<Base_Deposit>;
  Base_withdraw?: Maybe<Base_Withdraw>;
  Base_withdraws: Array<Base_Withdraw>;
  Base_swap?: Maybe<Base_Swap>;
  Base_swaps: Array<Base_Swap>;
  Base_activeAccount?: Maybe<Base_ActiveAccount>;
  Base_activeAccounts: Array<Base_ActiveAccount>;
  Base_liquidityPoolAmount?: Maybe<Base__LiquidityPoolAmount>;
  Base_liquidityPoolAmounts: Array<Base__LiquidityPoolAmount>;
  Base_helperStore?: Maybe<Base__HelperStore>;
  Base_helperStores: Array<Base__HelperStore>;
  Base_tokenWhitelist?: Maybe<Base__TokenWhitelist>;
  Base_tokenWhitelists: Array<Base__TokenWhitelist>;
  Base_tokenWhitelistSymbol?: Maybe<Base__TokenWhitelistSymbol>;
  Base_tokenWhitelistSymbols: Array<Base__TokenWhitelistSymbol>;
  Base_protocol?: Maybe<Base_Protocol>;
  Base_protocols: Array<Base_Protocol>;
  /** Access to subgraph metadata */
  Base__meta?: Maybe<Base__Meta_>;
};


export type SubscriptionEthereum_tokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Token_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Token_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_rewardTokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_rewardTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_RewardToken_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_RewardToken_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_liquidityPoolFeeArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_liquidityPoolFeesArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_LiquidityPoolFee_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_LiquidityPoolFee_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_dexAmmProtocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_dexAmmProtocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_DexAmmProtocol_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_DexAmmProtocol_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_usageMetricsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_usageMetricsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_UsageMetricsDailySnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_usageMetricsHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_usageMetricsHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_UsageMetricsHourlySnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_financialsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_financialsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_FinancialsDailySnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_liquidityPoolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_liquidityPoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_LiquidityPool_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_liquidityPoolDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_liquidityPoolDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_LiquidityPoolDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_LiquidityPoolDailySnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_liquidityPoolHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_liquidityPoolHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_LiquidityPoolHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_LiquidityPoolHourlySnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_tickArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_ticksArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Tick_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Tick_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_tickDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_tickDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_TickDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_TickDailySnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_tickHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_tickHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_TickHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_TickHourlySnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_accountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_accountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Account_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Account_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_positionArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_positionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Position_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Position_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_positionSnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_positionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_PositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_PositionSnapshot_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_depositArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_depositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Deposit_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Deposit_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_withdrawArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_withdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Withdraw_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_swapArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Swap_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Swap_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_activeAccountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_activeAccountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_ActiveAccount_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_ActiveAccount_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_liquidityPoolAmountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_liquidityPoolAmountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum__LiquidityPoolAmount_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum__LiquidityPoolAmount_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_helperStoreArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_helperStoresArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum__HelperStore_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum__HelperStore_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_tokenWhitelistArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_tokenWhitelistsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum__TokenWhitelist_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum__TokenWhitelist_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_tokenWhitelistSymbolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_tokenWhitelistSymbolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum__TokenWhitelistSymbol_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum__TokenWhitelistSymbol_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_protocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum_protocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Protocol_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Protocol_filter>;
  block?: InputMaybe<Ethereum_Block_height>;
  subgraphError?: Ethereum__SubgraphErrorPolicy_;
};


export type SubscriptionEthereum__metaArgs = {
  block?: InputMaybe<Ethereum_Block_height>;
};


export type SubscriptionOptimism_tokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Token_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Token_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_rewardTokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_rewardTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_RewardToken_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_RewardToken_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_liquidityPoolFeeArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_liquidityPoolFeesArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_LiquidityPoolFee_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_LiquidityPoolFee_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_dexAmmProtocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_dexAmmProtocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_DexAmmProtocol_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_DexAmmProtocol_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_usageMetricsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_usageMetricsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_UsageMetricsDailySnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_usageMetricsHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_usageMetricsHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_UsageMetricsHourlySnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_financialsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_financialsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_FinancialsDailySnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_liquidityPoolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_liquidityPoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_LiquidityPool_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_liquidityPoolDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_liquidityPoolDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_LiquidityPoolDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_LiquidityPoolDailySnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_liquidityPoolHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_liquidityPoolHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_LiquidityPoolHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_LiquidityPoolHourlySnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_tickArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_ticksArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Tick_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Tick_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_tickDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_tickDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_TickDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_TickDailySnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_tickHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_tickHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_TickHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_TickHourlySnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_accountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_accountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Account_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Account_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_positionArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_positionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Position_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Position_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_positionSnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_positionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_PositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_PositionSnapshot_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_depositArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_depositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Deposit_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Deposit_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_withdrawArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_withdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Withdraw_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_swapArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Swap_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Swap_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_activeAccountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_activeAccountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_ActiveAccount_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_ActiveAccount_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_liquidityPoolAmountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_liquidityPoolAmountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism__LiquidityPoolAmount_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism__LiquidityPoolAmount_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_helperStoreArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_helperStoresArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism__HelperStore_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism__HelperStore_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_tokenWhitelistArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_tokenWhitelistsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism__TokenWhitelist_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism__TokenWhitelist_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_tokenWhitelistSymbolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_tokenWhitelistSymbolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism__TokenWhitelistSymbol_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism__TokenWhitelistSymbol_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_protocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism_protocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Protocol_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Protocol_filter>;
  block?: InputMaybe<Optimism_Block_height>;
  subgraphError?: Optimism__SubgraphErrorPolicy_;
};


export type SubscriptionOptimism__metaArgs = {
  block?: InputMaybe<Optimism_Block_height>;
};


export type SubscriptionArbitrum_tokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Token_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Token_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_rewardTokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_rewardTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_RewardToken_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_RewardToken_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_liquidityPoolFeeArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_liquidityPoolFeesArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_LiquidityPoolFee_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_LiquidityPoolFee_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_dexAmmProtocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_dexAmmProtocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_DexAmmProtocol_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_DexAmmProtocol_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_usageMetricsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_usageMetricsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_UsageMetricsDailySnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_usageMetricsHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_usageMetricsHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_UsageMetricsHourlySnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_financialsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_financialsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_FinancialsDailySnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_liquidityPoolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_liquidityPoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_LiquidityPool_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_liquidityPoolDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_liquidityPoolDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_LiquidityPoolDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_LiquidityPoolDailySnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_liquidityPoolHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_liquidityPoolHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_LiquidityPoolHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_LiquidityPoolHourlySnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_tickArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_ticksArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Tick_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Tick_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_tickDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_tickDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_TickDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_TickDailySnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_tickHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_tickHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_TickHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_TickHourlySnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_accountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_accountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Account_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Account_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_positionArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_positionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Position_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Position_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_positionSnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_positionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_PositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_PositionSnapshot_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_depositArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_depositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Deposit_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Deposit_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_withdrawArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_withdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Withdraw_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_swapArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Swap_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Swap_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_activeAccountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_activeAccountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_ActiveAccount_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_ActiveAccount_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_liquidityPoolAmountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_liquidityPoolAmountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum__LiquidityPoolAmount_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum__LiquidityPoolAmount_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_helperStoreArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_helperStoresArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum__HelperStore_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum__HelperStore_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_tokenWhitelistArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_tokenWhitelistsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum__TokenWhitelist_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum__TokenWhitelist_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_tokenWhitelistSymbolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_tokenWhitelistSymbolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum__TokenWhitelistSymbol_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum__TokenWhitelistSymbol_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_protocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum_protocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Protocol_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Protocol_filter>;
  block?: InputMaybe<Arbitrum_Block_height>;
  subgraphError?: Arbitrum__SubgraphErrorPolicy_;
};


export type SubscriptionArbitrum__metaArgs = {
  block?: InputMaybe<Arbitrum_Block_height>;
};


export type SubscriptionBase_tokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Token_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Token_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_rewardTokenArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_rewardTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_RewardToken_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_RewardToken_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_liquidityPoolFeeArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_liquidityPoolFeesArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_LiquidityPoolFee_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_LiquidityPoolFee_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_dexAmmProtocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_dexAmmProtocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_DexAmmProtocol_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_DexAmmProtocol_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_usageMetricsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_usageMetricsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_UsageMetricsDailySnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_usageMetricsHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_usageMetricsHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_UsageMetricsHourlySnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_financialsDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_financialsDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_FinancialsDailySnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_liquidityPoolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_liquidityPoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_LiquidityPool_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_liquidityPoolDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_liquidityPoolDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_LiquidityPoolDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_LiquidityPoolDailySnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_liquidityPoolHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_liquidityPoolHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_LiquidityPoolHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_LiquidityPoolHourlySnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_tickArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_ticksArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Tick_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Tick_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_tickDailySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_tickDailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_TickDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_TickDailySnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_tickHourlySnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_tickHourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_TickHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_TickHourlySnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_accountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_accountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Account_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Account_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_positionArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_positionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Position_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Position_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_positionSnapshotArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_positionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_PositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_PositionSnapshot_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_depositArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_depositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Deposit_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Deposit_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_withdrawArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_withdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Withdraw_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_swapArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Swap_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Swap_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_activeAccountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_activeAccountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_ActiveAccount_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_ActiveAccount_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_liquidityPoolAmountArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_liquidityPoolAmountsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base__LiquidityPoolAmount_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base__LiquidityPoolAmount_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_helperStoreArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_helperStoresArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base__HelperStore_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base__HelperStore_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_tokenWhitelistArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_tokenWhitelistsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base__TokenWhitelist_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base__TokenWhitelist_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_tokenWhitelistSymbolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_tokenWhitelistSymbolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base__TokenWhitelistSymbol_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base__TokenWhitelistSymbol_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_protocolArgs = {
  id: Scalars['ID']['input'];
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase_protocolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Protocol_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Protocol_filter>;
  block?: InputMaybe<Base_Block_height>;
  subgraphError?: Base__SubgraphErrorPolicy_;
};


export type SubscriptionBase__metaArgs = {
  block?: InputMaybe<Base_Block_height>;
};

export type Ethereum_Account = {
  /**  { Account address }  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Number of positions this account has  */
  positionCount: Scalars['Int']['output'];
  /**  All positions that belong to this account  */
  positions: Array<Ethereum_Position>;
  /**  Number of open positions this account has  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions this account has  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Number of deposits this account made  */
  depositCount: Scalars['Int']['output'];
  /**  All deposit events of this account  */
  deposits: Array<Ethereum_Deposit>;
  /**  Number of withdrawals this account made  */
  withdrawCount: Scalars['Int']['output'];
  /**  All withdraw events of this account  */
  withdraws: Array<Ethereum_Withdraw>;
  /**  Number of times this account has traded/swapped */
  swapCount: Scalars['Int']['output'];
  /**  All swap events of this account  */
  swaps: Array<Ethereum_Swap>;
};


export type Ethereum_AccountpositionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Position_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Position_filter>;
};


export type Ethereum_AccountdepositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Deposit_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Deposit_filter>;
};


export type Ethereum_AccountwithdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Withdraw_filter>;
};


export type Ethereum_AccountswapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Swap_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Swap_filter>;
};

export type Ethereum_Account_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positions_?: InputMaybe<Ethereum_Position_filter>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount?: InputMaybe<Scalars['Int']['input']>;
  depositCount_not?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  deposits_?: InputMaybe<Ethereum_Deposit_filter>;
  withdrawCount?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdraws_?: InputMaybe<Ethereum_Withdraw_filter>;
  swapCount?: InputMaybe<Scalars['Int']['input']>;
  swapCount_not?: InputMaybe<Scalars['Int']['input']>;
  swapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  swapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  swapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  swapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  swapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  swaps_?: InputMaybe<Ethereum_Swap_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_Account_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_Account_filter>>>;
};

export type Ethereum_Account_orderBy =
  | 'id'
  | 'positionCount'
  | 'positions'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'depositCount'
  | 'deposits'
  | 'withdrawCount'
  | 'withdraws'
  | 'swapCount'
  | 'swaps';

export type Ethereum_ActiveAccount = {
  /**  { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch }  */
  id: Scalars['Ethereum_Bytes']['output'];
};

export type Ethereum_ActiveAccount_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_ActiveAccount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_ActiveAccount_filter>>>;
};

export type Ethereum_ActiveAccount_orderBy =
  | 'id';

export type Ethereum_Aggregation_interval =
  | 'hour'
  | 'day';

export type Ethereum_BlockChangedFilter = {
  number_gte: Scalars['Int']['input'];
};

export type Ethereum_Block_height = {
  hash?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  number_gte?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * An event is any user action that occurs in a protocol. Generally, they are Ethereum events
 * emitted by a function in the smart contracts, stored in transaction receipts as event logs.
 * However, some user actions of interest are function calls that don't emit events. For example,
 * the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
 * store them as events, although they are not technically Ethereum events emitted by smart
 * contracts.
 *
 */
export type Ethereum_Deposit = {
  /**  { Transaction hash }-{ Log index }  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Transaction hash of the transaction that emitted this event  */
  hash: Scalars['Ethereum_Bytes']['output'];
  /**  Nonce of the transaction that emitted this event  */
  nonce: Scalars['BigInt']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Gas limit of the transaction that emitted this event  */
  gasLimit?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas used in this transaction. (Optional because not every chain will support this)  */
  gasUsed?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas price of the transaction that emitted this event  */
  gasPrice?: Maybe<Scalars['BigInt']['output']>;
  /**  The protocol this transaction belongs to  */
  protocol: Ethereum_DexAmmProtocol;
  /**  Account that emitted this event  */
  account: Ethereum_Account;
  /**  The user position changed by this event  */
  position?: Maybe<Ethereum_Position>;
  /**  The pool involving this event  */
  pool: Ethereum_LiquidityPool;
  /**  lower tick of position  */
  tickLower?: Maybe<Scalars['BigInt']['output']>;
  /**  upper tick of position  */
  tickUpper?: Maybe<Scalars['BigInt']['output']>;
  /**  Block number of this event  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this event  */
  timestamp: Scalars['BigInt']['output'];
  /**  Amount of liquidity minted  */
  liquidity: Scalars['BigInt']['output'];
  /**  Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool  */
  inputTokens: Array<Ethereum_Token>;
  /**  Amount of input tokens in the token's native unit  */
  inputTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in the liquidity pool  */
  reserveAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool)  */
  amountUSD: Scalars['Ethereum_BigDecimal']['output'];
};


/**
 * An event is any user action that occurs in a protocol. Generally, they are Ethereum events
 * emitted by a function in the smart contracts, stored in transaction receipts as event logs.
 * However, some user actions of interest are function calls that don't emit events. For example,
 * the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
 * store them as events, although they are not technically Ethereum events emitted by smart
 * contracts.
 *
 */
export type Ethereum_DepositinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Token_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Token_filter>;
};

export type Ethereum_Deposit_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Ethereum_DexAmmProtocol_filter>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Ethereum_Account_filter>;
  position?: InputMaybe<Scalars['String']['input']>;
  position_not?: InputMaybe<Scalars['String']['input']>;
  position_gt?: InputMaybe<Scalars['String']['input']>;
  position_lt?: InputMaybe<Scalars['String']['input']>;
  position_gte?: InputMaybe<Scalars['String']['input']>;
  position_lte?: InputMaybe<Scalars['String']['input']>;
  position_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_contains?: InputMaybe<Scalars['String']['input']>;
  position_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_contains?: InputMaybe<Scalars['String']['input']>;
  position_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_?: InputMaybe<Ethereum_Position_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Ethereum_LiquidityPool_filter>;
  tickLower?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickLower_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Ethereum_Token_filter>;
  inputTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_Deposit_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_Deposit_filter>>>;
};

export type Ethereum_Deposit_orderBy =
  | 'id'
  | 'hash'
  | 'nonce'
  | 'logIndex'
  | 'gasLimit'
  | 'gasUsed'
  | 'gasPrice'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'position'
  | 'position__id'
  | 'position__hashOpened'
  | 'position__hashClosed'
  | 'position__blockNumberOpened'
  | 'position__timestampOpened'
  | 'position__blockNumberClosed'
  | 'position__timestampClosed'
  | 'position__liquidityTokenType'
  | 'position__liquidity'
  | 'position__liquidityUSD'
  | 'position__cumulativeDepositUSD'
  | 'position__cumulativeWithdrawUSD'
  | 'position__depositCount'
  | 'position__withdrawCount'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'tickLower'
  | 'tickUpper'
  | 'blockNumber'
  | 'timestamp'
  | 'liquidity'
  | 'inputTokens'
  | 'inputTokenAmounts'
  | 'reserveAmounts'
  | 'amountUSD';

export type Ethereum_DexAmmProtocol = Ethereum_Protocol & {
  /**  Smart contract address of the protocol's main contract (Factory, Registry, etc)  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Name of the protocol, including version. e.g. Uniswap v3  */
  name: Scalars['String']['output'];
  /**  Slug of protocol, including version. e.g. uniswap-v3  */
  slug: Scalars['String']['output'];
  /**  Version of the subgraph schema, in SemVer format (e.g. 1.0.0)  */
  schemaVersion: Scalars['String']['output'];
  /**  Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)  */
  subgraphVersion: Scalars['String']['output'];
  /**  Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)  */
  methodologyVersion: Scalars['String']['output'];
  /**  The blockchain network this subgraph is indexing on  */
  network: Ethereum_Network;
  /**  The type of protocol (e.g. DEX, Lending, Yield, etc)  */
  type: Ethereum_ProtocolType;
  /**  Current TVL (Total Value Locked) of the entire protocol  */
  totalValueLockedUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All protocol-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedProtocolSideValueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All supply-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedSupplySideValueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
  protocolControlledValueUSD?: Maybe<Scalars['Ethereum_BigDecimal']['output']>;
  /**  All historical volume in USD  */
  cumulativeVolumeUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  cumulativeSupplySideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  cumulativeTotalRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Number of cumulative liquidity providers  */
  cumulativeUniqueLPs: Scalars['Int']['output'];
  /**  Number of cumulative traders  */
  cumulativeUniqueTraders: Scalars['Int']['output'];
  /**  Total number of pools  */
  totalPoolCount: Scalars['Int']['output'];
  /**  Total number of open positions  */
  openPositionCount: Scalars['Int']['output'];
  /**  Total number of positions (open and closed)  */
  cumulativePositionCount: Scalars['Int']['output'];
  /**  Day ID of the most recent daily snapshot  */
  lastSnapshotDayID: Scalars['Int']['output'];
  /**  Timestamp of the last time this entity was updated  */
  lastUpdateTimestamp: Scalars['BigInt']['output'];
  /**  Block number of the last time this entity was updated  */
  lastUpdateBlockNumber: Scalars['BigInt']['output'];
  /**  Daily usage metrics for this protocol  */
  dailyUsageMetrics: Array<Ethereum_UsageMetricsDailySnapshot>;
  /**  Hourly usage metrics for this protocol  */
  hourlyUsageMetrics: Array<Ethereum_UsageMetricsHourlySnapshot>;
  /**  Daily financial metrics for this protocol  */
  financialMetrics: Array<Ethereum_FinancialsDailySnapshot>;
  /**  All pools that belong to this protocol  */
  pools: Array<Ethereum_LiquidityPool>;
  /**  This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis  */
  _regenesis: Scalars['Boolean']['output'];
};


export type Ethereum_DexAmmProtocoldailyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_UsageMetricsDailySnapshot_filter>;
};


export type Ethereum_DexAmmProtocolhourlyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_UsageMetricsHourlySnapshot_filter>;
};


export type Ethereum_DexAmmProtocolfinancialMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_FinancialsDailySnapshot_filter>;
};


export type Ethereum_DexAmmProtocolpoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_LiquidityPool_filter>;
};

export type Ethereum_DexAmmProtocol_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  slug_not?: InputMaybe<Scalars['String']['input']>;
  slug_gt?: InputMaybe<Scalars['String']['input']>;
  slug_lt?: InputMaybe<Scalars['String']['input']>;
  slug_gte?: InputMaybe<Scalars['String']['input']>;
  slug_lte?: InputMaybe<Scalars['String']['input']>;
  slug_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  slug_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  network?: InputMaybe<Ethereum_Network>;
  network_not?: InputMaybe<Ethereum_Network>;
  network_in?: InputMaybe<Array<Ethereum_Network>>;
  network_not_in?: InputMaybe<Array<Ethereum_Network>>;
  type?: InputMaybe<Ethereum_ProtocolType>;
  type_not?: InputMaybe<Ethereum_ProtocolType>;
  type_in?: InputMaybe<Array<Ethereum_ProtocolType>>;
  type_not_in?: InputMaybe<Array<Ethereum_ProtocolType>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  protocolControlledValueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueLPs?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueLPs_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueTraders?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueTraders_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_not?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativePositionCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativePositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastUpdateTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyUsageMetrics_?: InputMaybe<Ethereum_UsageMetricsDailySnapshot_filter>;
  hourlyUsageMetrics_?: InputMaybe<Ethereum_UsageMetricsHourlySnapshot_filter>;
  financialMetrics_?: InputMaybe<Ethereum_FinancialsDailySnapshot_filter>;
  pools_?: InputMaybe<Ethereum_LiquidityPool_filter>;
  _regenesis?: InputMaybe<Scalars['Boolean']['input']>;
  _regenesis_not?: InputMaybe<Scalars['Boolean']['input']>;
  _regenesis_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  _regenesis_not_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_DexAmmProtocol_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_DexAmmProtocol_filter>>>;
};

export type Ethereum_DexAmmProtocol_orderBy =
  | 'id'
  | 'name'
  | 'slug'
  | 'schemaVersion'
  | 'subgraphVersion'
  | 'methodologyVersion'
  | 'network'
  | 'type'
  | 'totalValueLockedUSD'
  | 'totalLiquidityUSD'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideValueUSD'
  | 'uncollectedSupplySideValueUSD'
  | 'protocolControlledValueUSD'
  | 'cumulativeVolumeUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'cumulativeUniqueUsers'
  | 'cumulativeUniqueLPs'
  | 'cumulativeUniqueTraders'
  | 'totalPoolCount'
  | 'openPositionCount'
  | 'cumulativePositionCount'
  | 'lastSnapshotDayID'
  | 'lastUpdateTimestamp'
  | 'lastUpdateBlockNumber'
  | 'dailyUsageMetrics'
  | 'hourlyUsageMetrics'
  | 'financialMetrics'
  | 'pools'
  | '_regenesis';

export type Ethereum_FinancialsDailySnapshot = {
  /**  ID is # of days since Unix epoch time  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  Protocol this snapshot is associated with  */
  protocol: Ethereum_DexAmmProtocol;
  /**  Current TVL (Total Value Locked) of the entire protocol  */
  totalValueLockedUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All protocol-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedProtocolSideValueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All supply-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedSupplySideValueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
  protocolControlledValueUSD?: Maybe<Scalars['Ethereum_BigDecimal']['output']>;
  /**  All trade volume occurred in a given day, in USD  */
  dailyVolumeUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All historical trade volume in USD  */
  cumulativeVolumeUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  dailySupplySideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  cumulativeSupplySideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  dailyProtocolSideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  dailyTotalRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  cumulativeTotalRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Ethereum_FinancialsDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Ethereum_DexAmmProtocol_filter>;
  totalValueLockedUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  protocolControlledValueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyVolumeUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyVolumeUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyVolumeUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyVolumeUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyVolumeUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyVolumeUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyVolumeUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyVolumeUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyTotalRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_FinancialsDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_FinancialsDailySnapshot_filter>>>;
};

export type Ethereum_FinancialsDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'totalValueLockedUSD'
  | 'totalLiquidityUSD'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideValueUSD'
  | 'uncollectedSupplySideValueUSD'
  | 'protocolControlledValueUSD'
  | 'dailyVolumeUSD'
  | 'cumulativeVolumeUSD'
  | 'dailySupplySideRevenueUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'dailyProtocolSideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'dailyTotalRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'timestamp'
  | 'blockNumber';

export type Ethereum_LiquidityPool = {
  /**  Smart contract address of the pool  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  The protocol this pool belongs to  */
  protocol: Ethereum_DexAmmProtocol;
  /**  Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)  */
  name?: Maybe<Scalars['String']['output']>;
  /**  Symbol of liquidity pool (e.g. 3CRV)  */
  symbol?: Maybe<Scalars['String']['output']>;
  /**  Token that is to represent ownership of liquidity  */
  liquidityToken?: Maybe<Ethereum_Token>;
  /**  Type of token used to track liquidity  */
  liquidityTokenType?: Maybe<Ethereum_TokenType>;
  /**  Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer  */
  inputTokens: Array<Ethereum_Token>;
  /**  Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon  */
  rewardTokens?: Maybe<Array<Ethereum_RewardToken>>;
  /**  Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee. )  */
  fees: Array<Ethereum_LiquidityPoolFee>;
  /**  Whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol.  */
  isSingleSided: Scalars['Boolean']['output'];
  /**  Creation timestamp  */
  createdTimestamp: Scalars['BigInt']['output'];
  /**  Creation block number  */
  createdBlockNumber: Scalars['BigInt']['output'];
  /**  Current tick representing the price of token0/token1  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Current TVL (Total Value Locked) of this pool in USD  */
  totalValueLockedUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity for this pool.  */
  totalLiquidity: Scalars['BigInt']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidity: Scalars['BigInt']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All protocol-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All protocol-side value locking in USD that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideValuesUSD: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  All supply-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedSupplySideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All supply-side value locked in USD that remains uncollected and unused in the pool.  */
  uncollectedSupplySideValuesUSD: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  All revenue generated by the liquidity pool, accrued to the supply side.  */
  cumulativeSupplySideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool, accrued to the protocol.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool.  */
  cumulativeTotalRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenUSD: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  All historical trade volume occurred in this pool, in USD  */
  cumulativeVolumeUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalancesUSD: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool  */
  inputTokenWeights: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.  */
  stakedOutputTokenAmount?: Maybe<Scalars['BigInt']['output']>;
  /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsUSD?: Maybe<Array<Scalars['Ethereum_BigDecimal']['output']>>;
  /**  Total number of deposits (add liquidity)  */
  cumulativeDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity)  */
  cumulativeWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps)  */
  cumulativeSwapCount: Scalars['Int']['output'];
  /**  All positions in this market  */
  positions: Array<Ethereum_Position>;
  /**  Number of positions in this market  */
  positionCount: Scalars['Int']['output'];
  /**  Number of open positions in this market  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions in this market  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Day ID of the most recent daily snapshot  */
  lastSnapshotDayID: Scalars['Int']['output'];
  /**  Hour ID of the most recent hourly snapshot  */
  lastSnapshotHourID: Scalars['Int']['output'];
  /**  Timestamp of the last time this entity was updated  */
  lastUpdateTimestamp: Scalars['BigInt']['output'];
  /**  Block number of the last time this entity was updated  */
  lastUpdateBlockNumber: Scalars['BigInt']['output'];
  /**  Liquidity pool daily snapshots  */
  dailySnapshots: Array<Ethereum_LiquidityPoolDailySnapshot>;
  /**  Liquidity pool hourly snapshots  */
  hourlySnapshots: Array<Ethereum_LiquidityPoolHourlySnapshot>;
  /**  All deposit (add liquidity) events occurred in this pool  */
  deposits: Array<Ethereum_Deposit>;
  /**  All withdraw (remove liquidity) events occurred in this pool  */
  withdraws: Array<Ethereum_Withdraw>;
  /**  All trade (swap) events occurred in this pool  */
  swaps: Array<Ethereum_Swap>;
};


export type Ethereum_LiquidityPoolinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Token_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Token_filter>;
};


export type Ethereum_LiquidityPoolrewardTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_RewardToken_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_RewardToken_filter>;
};


export type Ethereum_LiquidityPoolfeesArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_LiquidityPoolFee_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_LiquidityPoolFee_filter>;
};


export type Ethereum_LiquidityPoolpositionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Position_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Position_filter>;
};


export type Ethereum_LiquidityPooldailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_LiquidityPoolDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_LiquidityPoolDailySnapshot_filter>;
};


export type Ethereum_LiquidityPoolhourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_LiquidityPoolHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_LiquidityPoolHourlySnapshot_filter>;
};


export type Ethereum_LiquidityPooldepositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Deposit_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Deposit_filter>;
};


export type Ethereum_LiquidityPoolwithdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Withdraw_filter>;
};


export type Ethereum_LiquidityPoolswapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Swap_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Swap_filter>;
};

export type Ethereum_LiquidityPoolDailySnapshot = {
  /**  { Smart contract address of the pool }-{ # of days since Unix epoch time }  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  The protocol this snapshot belongs to  */
  protocol: Ethereum_DexAmmProtocol;
  /**  The pool this snapshot belongs to  */
  pool: Ethereum_LiquidityPool;
  /**  Current tick representing the price of token0/token1  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Current TVL (Total Value Locked) of this pool  */
  totalValueLockedUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity for this pool.  */
  totalLiquidity: Scalars['BigInt']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidity: Scalars['BigInt']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All protocol-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All protocol-side value locking in USD that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideValuesUSD: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  All supply-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedSupplySideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All supply-side value locked in USD that remains uncollected and unused in the pool.  */
  uncollectedSupplySideValuesUSD: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  All revenue generated by the liquidity pool, accrued to the supply side.  */
  cumulativeSupplySideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Daily revenue generated by the liquidity pool, accrued to the supply side.  */
  dailySupplySideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool, accrued to the protocol.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Daily revenue generated by the liquidity pool, accrued to the protocol.  */
  dailyProtocolSideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool.  */
  cumulativeTotalRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Daily revenue generated by the liquidity pool.  */
  dailyTotalRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All historical trade volume occurred in this pool, in USD  */
  cumulativeVolumeUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All trade volume occurred in a given day, in USD  */
  dailyVolumeUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All trade volume , in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  dailyVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenUSD: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  dailyVolumeByTokenUSD: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalancesUSD: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool  */
  inputTokenWeights: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.  */
  stakedOutputTokenAmount?: Maybe<Scalars['BigInt']['output']>;
  /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsUSD?: Maybe<Array<Scalars['Ethereum_BigDecimal']['output']>>;
  /**  Total number of deposits (add liquidity)  */
  cumulativeDepositCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in a day  */
  dailyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity)  */
  cumulativeWithdrawCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in a day  */
  dailyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps)  */
  cumulativeSwapCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in a day  */
  dailySwapCount: Scalars['Int']['output'];
  /**  Number of positions in this market  */
  positionCount: Scalars['Int']['output'];
  /**  Number of open positions in this market  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions in this market  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Ethereum_LiquidityPoolDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Ethereum_DexAmmProtocol_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Ethereum_LiquidityPool_filter>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  activeLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideValuesUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideValuesUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyTotalRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyVolumeUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyVolumeUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyVolumeUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyVolumeUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyVolumeUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyVolumeUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  dailyVolumeUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyVolumeUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalances?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalancesUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeDepositCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_LiquidityPoolDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_LiquidityPoolDailySnapshot_filter>>>;
};

export type Ethereum_LiquidityPoolDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'tick'
  | 'totalValueLockedUSD'
  | 'totalLiquidity'
  | 'totalLiquidityUSD'
  | 'activeLiquidity'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideTokenAmounts'
  | 'uncollectedProtocolSideValuesUSD'
  | 'uncollectedSupplySideTokenAmounts'
  | 'uncollectedSupplySideValuesUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'dailySupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'dailyProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'dailyTotalRevenueUSD'
  | 'cumulativeVolumeUSD'
  | 'dailyVolumeUSD'
  | 'cumulativeVolumeByTokenAmount'
  | 'dailyVolumeByTokenAmount'
  | 'cumulativeVolumeByTokenUSD'
  | 'dailyVolumeByTokenUSD'
  | 'inputTokenBalances'
  | 'inputTokenBalancesUSD'
  | 'inputTokenWeights'
  | 'stakedOutputTokenAmount'
  | 'rewardTokenEmissionsAmount'
  | 'rewardTokenEmissionsUSD'
  | 'cumulativeDepositCount'
  | 'dailyDepositCount'
  | 'cumulativeWithdrawCount'
  | 'dailyWithdrawCount'
  | 'cumulativeSwapCount'
  | 'dailySwapCount'
  | 'positionCount'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'timestamp'
  | 'blockNumber';

export type Ethereum_LiquidityPoolFee = {
  /**  { Fee type }-{ Pool address }  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Fee as a percentage of the trade (swap) amount. Does not always apply  */
  feePercentage?: Maybe<Scalars['Ethereum_BigDecimal']['output']>;
  /**  Type of fee this pool uses  */
  feeType: Ethereum_LiquidityPoolFeeType;
};

export type Ethereum_LiquidityPoolFeeType =
  /**  Total fixed fee paid by the user per trade, as a percentage of the traded amount. e.g. 0.3% for Uniswap v2, 0.3% for Sushiswap, 0.04% for Curve v1.  */
  | 'FIXED_TRADING_FEE'
  /**  Some protocols use tiered fees instead of fixed fee (e.g. DYDX, DODO). Set `feePercentage` as 0 but handle the tiered fees in the mapping code.  */
  | 'TIERED_TRADING_FEE'
  /**  Some protocols use dynamic fees instead of fixed fee (e.g. Balancer v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.  */
  | 'DYNAMIC_TRADING_FEE'
  /**  Fixed fee that's paid to the LP, as a percentage of the traded amount. e.g. 0.25% for Sushiswap, 0.02% for Curve v1.  */
  | 'FIXED_LP_FEE'
  /**  Some protocols use dynamic LP fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.  */
  | 'DYNAMIC_LP_FEE'
  /**  Fixed fee that's paid to the protocol, as a percentage of the traded amount. e.g. 0.05% for Sushiswap, 0.02% for Curve v1.  */
  | 'FIXED_PROTOCOL_FEE'
  /**  Some protocols use dynamic protocol fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.  */
  | 'DYNAMIC_PROTOCOL_FEE'
  /**  One-time fee charged by the protocol during deposit, in percentages of the deposit token  */
  | 'DEPOSIT_FEE'
  /**  One-time fee charged by the protocol (e.g. Bancor v3) during withdrawal, in percentages of the withdrawal token  */
  | 'WITHDRAWAL_FEE';

export type Ethereum_LiquidityPoolFee_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  feePercentage?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  feePercentage_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  feePercentage_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  feePercentage_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  feePercentage_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  feePercentage_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  feePercentage_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  feePercentage_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  feeType?: InputMaybe<Ethereum_LiquidityPoolFeeType>;
  feeType_not?: InputMaybe<Ethereum_LiquidityPoolFeeType>;
  feeType_in?: InputMaybe<Array<Ethereum_LiquidityPoolFeeType>>;
  feeType_not_in?: InputMaybe<Array<Ethereum_LiquidityPoolFeeType>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_LiquidityPoolFee_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_LiquidityPoolFee_filter>>>;
};

export type Ethereum_LiquidityPoolFee_orderBy =
  | 'id'
  | 'feePercentage'
  | 'feeType';

export type Ethereum_LiquidityPoolHourlySnapshot = {
  /**  { Smart contract address of the pool }-{ # of hours since Unix epoch time }  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Number of hours since Unix epoch time  */
  hour: Scalars['Int']['output'];
  /**  The protocol this snapshot belongs to  */
  protocol: Ethereum_DexAmmProtocol;
  /**  The pool this snapshot belongs to  */
  pool: Ethereum_LiquidityPool;
  /**  Current tick representing the price of token0/token1  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Current TVL (Total Value Locked) of this pool  */
  totalValueLockedUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity for this pool.  */
  totalLiquidity: Scalars['BigInt']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidity: Scalars['BigInt']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All protocol-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All protocol-side value locking in USD that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideValuesUSD: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  All supply-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedSupplySideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All supply-side value locked in USD that remains uncollected and unused in the pool.  */
  uncollectedSupplySideValuesUSD: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  All revenue generated by the liquidity pool, accrued to the supply side.  */
  cumulativeSupplySideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Hourly revenue generated by the liquidity pool, accrued to the supply side.  */
  hourlySupplySideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool, accrued to the protocol.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Hourly revenue generated by the liquidity pool, accrued to the protocol.  */
  hourlyProtocolSideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool.  */
  cumulativeTotalRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Hourly revenue generated by the liquidity pool.  */
  hourlyTotalRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All historical trade volume occurred in this pool, in USD  */
  cumulativeVolumeUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All trade volume occurred in a given hour, in USD  */
  hourlyVolumeUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All trade volume, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  hourlyVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenUSD: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  hourlyVolumeByTokenUSD: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalancesUSD: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool  */
  inputTokenWeights: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.  */
  stakedOutputTokenAmount?: Maybe<Scalars['BigInt']['output']>;
  /**  Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsUSD?: Maybe<Array<Scalars['Ethereum_BigDecimal']['output']>>;
  /**  Total number of deposits (add liquidity)  */
  cumulativeDepositCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in an hour  */
  hourlyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity)  */
  cumulativeWithdrawCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in an hour  */
  hourlyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps)  */
  cumulativeSwapCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in an hour  */
  hourlySwapCount: Scalars['Int']['output'];
  /**  Number of positions in this market  */
  positionCount: Scalars['Int']['output'];
  /**  Number of open positions in this market  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions in this market  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Ethereum_LiquidityPoolHourlySnapshot_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hour?: InputMaybe<Scalars['Int']['input']>;
  hour_not?: InputMaybe<Scalars['Int']['input']>;
  hour_gt?: InputMaybe<Scalars['Int']['input']>;
  hour_lt?: InputMaybe<Scalars['Int']['input']>;
  hour_gte?: InputMaybe<Scalars['Int']['input']>;
  hour_lte?: InputMaybe<Scalars['Int']['input']>;
  hour_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hour_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Ethereum_DexAmmProtocol_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Ethereum_LiquidityPool_filter>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  activeLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideValuesUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideValuesUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  hourlySupplySideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  hourlySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  hourlyProtocolSideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  hourlyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  hourlyTotalRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  hourlyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  hourlyVolumeUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyVolumeUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyVolumeUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyVolumeUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyVolumeUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyVolumeUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  hourlyVolumeUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  hourlyVolumeUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalances?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalancesUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeDepositCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_LiquidityPoolHourlySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_LiquidityPoolHourlySnapshot_filter>>>;
};

export type Ethereum_LiquidityPoolHourlySnapshot_orderBy =
  | 'id'
  | 'hour'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'tick'
  | 'totalValueLockedUSD'
  | 'totalLiquidity'
  | 'totalLiquidityUSD'
  | 'activeLiquidity'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideTokenAmounts'
  | 'uncollectedProtocolSideValuesUSD'
  | 'uncollectedSupplySideTokenAmounts'
  | 'uncollectedSupplySideValuesUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'hourlySupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'hourlyProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'hourlyTotalRevenueUSD'
  | 'cumulativeVolumeUSD'
  | 'hourlyVolumeUSD'
  | 'cumulativeVolumeByTokenAmount'
  | 'hourlyVolumeByTokenAmount'
  | 'cumulativeVolumeByTokenUSD'
  | 'hourlyVolumeByTokenUSD'
  | 'inputTokenBalances'
  | 'inputTokenBalancesUSD'
  | 'inputTokenWeights'
  | 'stakedOutputTokenAmount'
  | 'rewardTokenEmissionsAmount'
  | 'rewardTokenEmissionsUSD'
  | 'cumulativeDepositCount'
  | 'hourlyDepositCount'
  | 'cumulativeWithdrawCount'
  | 'hourlyWithdrawCount'
  | 'cumulativeSwapCount'
  | 'hourlySwapCount'
  | 'positionCount'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'timestamp'
  | 'blockNumber';

export type Ethereum_LiquidityPool_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Ethereum_DexAmmProtocol_filter>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol?: InputMaybe<Scalars['String']['input']>;
  symbol_not?: InputMaybe<Scalars['String']['input']>;
  symbol_gt?: InputMaybe<Scalars['String']['input']>;
  symbol_lt?: InputMaybe<Scalars['String']['input']>;
  symbol_gte?: InputMaybe<Scalars['String']['input']>;
  symbol_lte?: InputMaybe<Scalars['String']['input']>;
  symbol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_?: InputMaybe<Ethereum_Token_filter>;
  liquidityTokenType?: InputMaybe<Ethereum_TokenType>;
  liquidityTokenType_not?: InputMaybe<Ethereum_TokenType>;
  liquidityTokenType_in?: InputMaybe<Array<Ethereum_TokenType>>;
  liquidityTokenType_not_in?: InputMaybe<Array<Ethereum_TokenType>>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Ethereum_Token_filter>;
  rewardTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_?: InputMaybe<Ethereum_RewardToken_filter>;
  fees?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_not?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_?: InputMaybe<Ethereum_LiquidityPoolFee_filter>;
  isSingleSided?: InputMaybe<Scalars['Boolean']['input']>;
  isSingleSided_not?: InputMaybe<Scalars['Boolean']['input']>;
  isSingleSided_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  isSingleSided_not_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  createdTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  activeLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideValuesUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideValuesUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalances?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalancesUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenWeights_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeDepositCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positions_?: InputMaybe<Ethereum_Position_filter>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastUpdateTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailySnapshots_?: InputMaybe<Ethereum_LiquidityPoolDailySnapshot_filter>;
  hourlySnapshots_?: InputMaybe<Ethereum_LiquidityPoolHourlySnapshot_filter>;
  deposits_?: InputMaybe<Ethereum_Deposit_filter>;
  withdraws_?: InputMaybe<Ethereum_Withdraw_filter>;
  swaps_?: InputMaybe<Ethereum_Swap_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_LiquidityPool_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_LiquidityPool_filter>>>;
};

export type Ethereum_LiquidityPool_orderBy =
  | 'id'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'name'
  | 'symbol'
  | 'liquidityToken'
  | 'liquidityToken__id'
  | 'liquidityToken__name'
  | 'liquidityToken__symbol'
  | 'liquidityToken__decimals'
  | 'liquidityToken__lastPriceUSD'
  | 'liquidityToken__lastPriceBlockNumber'
  | 'liquidityToken___lastPricePool'
  | 'liquidityToken___totalSupply'
  | 'liquidityToken___totalValueLockedUSD'
  | 'liquidityToken___largePriceChangeBuffer'
  | 'liquidityToken___largeTVLImpactBuffer'
  | 'liquidityTokenType'
  | 'inputTokens'
  | 'rewardTokens'
  | 'fees'
  | 'isSingleSided'
  | 'createdTimestamp'
  | 'createdBlockNumber'
  | 'tick'
  | 'totalValueLockedUSD'
  | 'totalLiquidity'
  | 'totalLiquidityUSD'
  | 'activeLiquidity'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideTokenAmounts'
  | 'uncollectedProtocolSideValuesUSD'
  | 'uncollectedSupplySideTokenAmounts'
  | 'uncollectedSupplySideValuesUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'cumulativeVolumeByTokenAmount'
  | 'cumulativeVolumeByTokenUSD'
  | 'cumulativeVolumeUSD'
  | 'inputTokenBalances'
  | 'inputTokenBalancesUSD'
  | 'inputTokenWeights'
  | 'stakedOutputTokenAmount'
  | 'rewardTokenEmissionsAmount'
  | 'rewardTokenEmissionsUSD'
  | 'cumulativeDepositCount'
  | 'cumulativeWithdrawCount'
  | 'cumulativeSwapCount'
  | 'positions'
  | 'positionCount'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'lastSnapshotDayID'
  | 'lastSnapshotHourID'
  | 'lastUpdateTimestamp'
  | 'lastUpdateBlockNumber'
  | 'dailySnapshots'
  | 'hourlySnapshots'
  | 'deposits'
  | 'withdraws'
  | 'swaps';

export type Ethereum_Network =
  | 'ARBITRUM_ONE'
  | 'ARWEAVE_MAINNET'
  | 'AURORA'
  | 'AVALANCHE'
  | 'BASE'
  | 'BOBA'
  | 'BSC'
  | 'CELO'
  | 'COSMOS'
  | 'CRONOS'
  | 'MAINNET'
  | 'FANTOM'
  | 'FUSE'
  | 'HARMONY'
  | 'JUNO'
  | 'MOONBEAM'
  | 'MOONRIVER'
  | 'NEAR_MAINNET'
  | 'OPTIMISM'
  | 'OSMOSIS'
  | 'MATIC'
  | 'XDAI';

/** Defines the order direction, either ascending or descending */
export type Ethereum_OrderDirection =
  | 'asc'
  | 'desc';

export type Ethereum_Position = {
  /**  { Account address }-{ Market address }-{ Count }  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Account that owns this position  */
  account: Ethereum_Account;
  /**  The liquidity pool in which this position was opened  */
  pool: Ethereum_LiquidityPool;
  /**  The hash of the transaction that opened this position  */
  hashOpened: Scalars['Ethereum_Bytes']['output'];
  /**  The hash of the transaction that closed this position  */
  hashClosed?: Maybe<Scalars['Ethereum_Bytes']['output']>;
  /**  Block number of when the position was opened  */
  blockNumberOpened: Scalars['BigInt']['output'];
  /**  Timestamp when the position was opened  */
  timestampOpened: Scalars['BigInt']['output'];
  /**  Block number of when the position was closed (0 if still open)  */
  blockNumberClosed?: Maybe<Scalars['BigInt']['output']>;
  /**  Timestamp when the position was closed (0 if still open)  */
  timestampClosed?: Maybe<Scalars['BigInt']['output']>;
  /**  lower tick of the position  */
  tickLower?: Maybe<Ethereum_Tick>;
  /**  upper tick of the position  */
  tickUpper?: Maybe<Ethereum_Tick>;
  /**  Token that is to represent ownership of liquidity  */
  liquidityToken?: Maybe<Ethereum_Token>;
  /**  Type of token used to track liquidity  */
  liquidityTokenType?: Maybe<Ethereum_TokenType>;
  /**  total position liquidity  */
  liquidity: Scalars['BigInt']['output'];
  /**  total position liquidity in USD  */
  liquidityUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  amount of tokens ever deposited to position  */
  cumulativeDepositTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD deposited to position  */
  cumulativeDepositUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  amount of tokens ever withdrawn from position (without fees)  */
  cumulativeWithdrawTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD withdrawn from position (without fees)  */
  cumulativeWithdrawUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Total reward token accumulated under this position, in USD  */
  cumulativeRewardUSD?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Number of deposits related to this position  */
  depositCount: Scalars['Int']['output'];
  /**  All deposit events of this position  */
  deposits: Array<Ethereum_Deposit>;
  /**  Number of withdrawals related to this position  */
  withdrawCount: Scalars['Int']['output'];
  /**  All withdraw events of this position  */
  withdraws: Array<Ethereum_Withdraw>;
  /**  Position daily snapshots for open positions  */
  snapshots: Array<Ethereum_PositionSnapshot>;
};


export type Ethereum_PositiondepositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Deposit_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Deposit_filter>;
};


export type Ethereum_PositionwithdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Withdraw_filter>;
};


export type Ethereum_PositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_PositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_PositionSnapshot_filter>;
};

export type Ethereum_PositionSnapshot = {
  /**  { Position ID }-{ Transaction hash }-{ Log index }  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Transaction hash of the transaction that triggered this snapshot  */
  hash: Scalars['Ethereum_Bytes']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Nonce of the transaction that triggered this snapshot  */
  nonce: Scalars['BigInt']['output'];
  /**  Position of this snapshot  */
  position: Ethereum_Position;
  /**  Type of token used to track liquidity  */
  liquidityTokenType?: Maybe<Ethereum_TokenType>;
  /**  total position liquidity  */
  liquidity?: Maybe<Scalars['BigInt']['output']>;
  /**  total position liquidity in USD  */
  liquidityUSD?: Maybe<Scalars['Ethereum_BigDecimal']['output']>;
  /**  amount of tokens ever deposited to position  */
  cumulativeDepositTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD deposited to position  */
  cumulativeDepositUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  amount of tokens ever withdrawn from position (without fees)  */
  cumulativeWithdrawTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD withdrawn from position (without fees)  */
  cumulativeWithdrawUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Total reward token accumulated under this position, in native amounts  */
  cumulativeRewardTokenAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Total reward token accumulated under this position, in USD  */
  cumulativeRewardUSD?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Number of deposits related to this position  */
  depositCount: Scalars['Int']['output'];
  /**  Number of withdrawals related to this position  */
  withdrawCount: Scalars['Int']['output'];
  /**  Block number of this snapshot  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this snapshot  */
  timestamp: Scalars['BigInt']['output'];
};

export type Ethereum_PositionSnapshot_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  position?: InputMaybe<Scalars['String']['input']>;
  position_not?: InputMaybe<Scalars['String']['input']>;
  position_gt?: InputMaybe<Scalars['String']['input']>;
  position_lt?: InputMaybe<Scalars['String']['input']>;
  position_gte?: InputMaybe<Scalars['String']['input']>;
  position_lte?: InputMaybe<Scalars['String']['input']>;
  position_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_contains?: InputMaybe<Scalars['String']['input']>;
  position_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_contains?: InputMaybe<Scalars['String']['input']>;
  position_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_?: InputMaybe<Ethereum_Position_filter>;
  liquidityTokenType?: InputMaybe<Ethereum_TokenType>;
  liquidityTokenType_not?: InputMaybe<Ethereum_TokenType>;
  liquidityTokenType_in?: InputMaybe<Array<Ethereum_TokenType>>;
  liquidityTokenType_not_in?: InputMaybe<Array<Ethereum_TokenType>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeDepositTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeDepositUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeDepositUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeDepositUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeDepositUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeDepositUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeWithdrawTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeWithdrawUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeRewardTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  depositCount?: InputMaybe<Scalars['Int']['input']>;
  depositCount_not?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_PositionSnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_PositionSnapshot_filter>>>;
};

export type Ethereum_PositionSnapshot_orderBy =
  | 'id'
  | 'hash'
  | 'logIndex'
  | 'nonce'
  | 'position'
  | 'position__id'
  | 'position__hashOpened'
  | 'position__hashClosed'
  | 'position__blockNumberOpened'
  | 'position__timestampOpened'
  | 'position__blockNumberClosed'
  | 'position__timestampClosed'
  | 'position__liquidityTokenType'
  | 'position__liquidity'
  | 'position__liquidityUSD'
  | 'position__cumulativeDepositUSD'
  | 'position__cumulativeWithdrawUSD'
  | 'position__depositCount'
  | 'position__withdrawCount'
  | 'liquidityTokenType'
  | 'liquidity'
  | 'liquidityUSD'
  | 'cumulativeDepositTokenAmounts'
  | 'cumulativeDepositUSD'
  | 'cumulativeWithdrawTokenAmounts'
  | 'cumulativeWithdrawUSD'
  | 'cumulativeRewardTokenAmounts'
  | 'cumulativeRewardUSD'
  | 'depositCount'
  | 'withdrawCount'
  | 'blockNumber'
  | 'timestamp';

export type Ethereum_Position_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Ethereum_Account_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Ethereum_LiquidityPool_filter>;
  hashOpened?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hashOpened_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hashOpened_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hashOpened_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hashOpened_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hashOpened_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hashOpened_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  hashOpened_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  hashOpened_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hashOpened_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hashClosed?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hashClosed_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hashClosed_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hashClosed_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hashClosed_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hashClosed_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hashClosed_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  hashClosed_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  hashClosed_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hashClosed_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  blockNumberOpened?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumberOpened_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampOpened?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampOpened_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumberClosed?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumberClosed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampClosed?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampClosed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickLower?: InputMaybe<Scalars['String']['input']>;
  tickLower_not?: InputMaybe<Scalars['String']['input']>;
  tickLower_gt?: InputMaybe<Scalars['String']['input']>;
  tickLower_lt?: InputMaybe<Scalars['String']['input']>;
  tickLower_gte?: InputMaybe<Scalars['String']['input']>;
  tickLower_lte?: InputMaybe<Scalars['String']['input']>;
  tickLower_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickLower_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickLower_contains?: InputMaybe<Scalars['String']['input']>;
  tickLower_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_contains?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_?: InputMaybe<Ethereum_Tick_filter>;
  tickUpper?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not?: InputMaybe<Scalars['String']['input']>;
  tickUpper_gt?: InputMaybe<Scalars['String']['input']>;
  tickUpper_lt?: InputMaybe<Scalars['String']['input']>;
  tickUpper_gte?: InputMaybe<Scalars['String']['input']>;
  tickUpper_lte?: InputMaybe<Scalars['String']['input']>;
  tickUpper_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickUpper_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickUpper_contains?: InputMaybe<Scalars['String']['input']>;
  tickUpper_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_contains?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_?: InputMaybe<Ethereum_Tick_filter>;
  liquidityToken?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_?: InputMaybe<Ethereum_Token_filter>;
  liquidityTokenType?: InputMaybe<Ethereum_TokenType>;
  liquidityTokenType_not?: InputMaybe<Ethereum_TokenType>;
  liquidityTokenType_in?: InputMaybe<Array<Ethereum_TokenType>>;
  liquidityTokenType_not_in?: InputMaybe<Array<Ethereum_TokenType>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeDepositTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeDepositUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeDepositUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeDepositUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeDepositUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeDepositUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeWithdrawTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeWithdrawUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeRewardUSD?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  depositCount?: InputMaybe<Scalars['Int']['input']>;
  depositCount_not?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  deposits_?: InputMaybe<Ethereum_Deposit_filter>;
  withdrawCount?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdraws_?: InputMaybe<Ethereum_Withdraw_filter>;
  snapshots_?: InputMaybe<Ethereum_PositionSnapshot_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_Position_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_Position_filter>>>;
};

export type Ethereum_Position_orderBy =
  | 'id'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'hashOpened'
  | 'hashClosed'
  | 'blockNumberOpened'
  | 'timestampOpened'
  | 'blockNumberClosed'
  | 'timestampClosed'
  | 'tickLower'
  | 'tickLower__id'
  | 'tickLower__index'
  | 'tickLower__createdTimestamp'
  | 'tickLower__createdBlockNumber'
  | 'tickLower__liquidityGross'
  | 'tickLower__liquidityGrossUSD'
  | 'tickLower__liquidityNet'
  | 'tickLower__liquidityNetUSD'
  | 'tickLower__lastSnapshotDayID'
  | 'tickLower__lastSnapshotHourID'
  | 'tickLower__lastUpdateTimestamp'
  | 'tickLower__lastUpdateBlockNumber'
  | 'tickUpper'
  | 'tickUpper__id'
  | 'tickUpper__index'
  | 'tickUpper__createdTimestamp'
  | 'tickUpper__createdBlockNumber'
  | 'tickUpper__liquidityGross'
  | 'tickUpper__liquidityGrossUSD'
  | 'tickUpper__liquidityNet'
  | 'tickUpper__liquidityNetUSD'
  | 'tickUpper__lastSnapshotDayID'
  | 'tickUpper__lastSnapshotHourID'
  | 'tickUpper__lastUpdateTimestamp'
  | 'tickUpper__lastUpdateBlockNumber'
  | 'liquidityToken'
  | 'liquidityToken__id'
  | 'liquidityToken__name'
  | 'liquidityToken__symbol'
  | 'liquidityToken__decimals'
  | 'liquidityToken__lastPriceUSD'
  | 'liquidityToken__lastPriceBlockNumber'
  | 'liquidityToken___lastPricePool'
  | 'liquidityToken___totalSupply'
  | 'liquidityToken___totalValueLockedUSD'
  | 'liquidityToken___largePriceChangeBuffer'
  | 'liquidityToken___largeTVLImpactBuffer'
  | 'liquidityTokenType'
  | 'liquidity'
  | 'liquidityUSD'
  | 'cumulativeDepositTokenAmounts'
  | 'cumulativeDepositUSD'
  | 'cumulativeWithdrawTokenAmounts'
  | 'cumulativeWithdrawUSD'
  | 'cumulativeRewardUSD'
  | 'depositCount'
  | 'deposits'
  | 'withdrawCount'
  | 'withdraws'
  | 'snapshots';

export type Ethereum_Protocol = {
  /**  Smart contract address of the protocol's main contract (Factory, Registry, etc)  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Name of the protocol, including version. e.g. Uniswap v3  */
  name: Scalars['String']['output'];
  /**  Slug of protocol, including version. e.g. uniswap-v3  */
  slug: Scalars['String']['output'];
  /**  Version of the subgraph schema, in SemVer format (e.g. 1.0.0)  */
  schemaVersion: Scalars['String']['output'];
  /**  Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)  */
  subgraphVersion: Scalars['String']['output'];
  /**  Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)  */
  methodologyVersion: Scalars['String']['output'];
  /**  The blockchain network this subgraph is indexing on  */
  network: Ethereum_Network;
  /**  The type of protocol (e.g. DEX, Lending, Yield, etc)  */
  type: Ethereum_ProtocolType;
  /**  Current TVL (Total Value Locked) of the entire protocol  */
  totalValueLockedUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
  protocolControlledValueUSD?: Maybe<Scalars['Ethereum_BigDecimal']['output']>;
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  cumulativeSupplySideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  cumulativeTotalRevenueUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Total number of pools  */
  totalPoolCount: Scalars['Int']['output'];
  /**  Daily usage metrics for this protocol  */
  dailyUsageMetrics: Array<Ethereum_UsageMetricsDailySnapshot>;
  /**  Hourly usage metrics for this protocol  */
  hourlyUsageMetrics: Array<Ethereum_UsageMetricsHourlySnapshot>;
  /**  Daily financial metrics for this protocol  */
  financialMetrics: Array<Ethereum_FinancialsDailySnapshot>;
};


export type Ethereum_ProtocoldailyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_UsageMetricsDailySnapshot_filter>;
};


export type Ethereum_ProtocolhourlyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_UsageMetricsHourlySnapshot_filter>;
};


export type Ethereum_ProtocolfinancialMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_FinancialsDailySnapshot_filter>;
};

export type Ethereum_ProtocolType =
  | 'EXCHANGE'
  | 'LENDING'
  | 'YIELD'
  | 'BRIDGE'
  | 'GENERIC';

export type Ethereum_Protocol_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  slug_not?: InputMaybe<Scalars['String']['input']>;
  slug_gt?: InputMaybe<Scalars['String']['input']>;
  slug_lt?: InputMaybe<Scalars['String']['input']>;
  slug_gte?: InputMaybe<Scalars['String']['input']>;
  slug_lte?: InputMaybe<Scalars['String']['input']>;
  slug_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  slug_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  network?: InputMaybe<Ethereum_Network>;
  network_not?: InputMaybe<Ethereum_Network>;
  network_in?: InputMaybe<Array<Ethereum_Network>>;
  network_not_in?: InputMaybe<Array<Ethereum_Network>>;
  type?: InputMaybe<Ethereum_ProtocolType>;
  type_not?: InputMaybe<Ethereum_ProtocolType>;
  type_in?: InputMaybe<Array<Ethereum_ProtocolType>>;
  type_not_in?: InputMaybe<Array<Ethereum_ProtocolType>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  protocolControlledValueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_not?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyUsageMetrics_?: InputMaybe<Ethereum_UsageMetricsDailySnapshot_filter>;
  hourlyUsageMetrics_?: InputMaybe<Ethereum_UsageMetricsHourlySnapshot_filter>;
  financialMetrics_?: InputMaybe<Ethereum_FinancialsDailySnapshot_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_Protocol_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_Protocol_filter>>>;
};

export type Ethereum_Protocol_orderBy =
  | 'id'
  | 'name'
  | 'slug'
  | 'schemaVersion'
  | 'subgraphVersion'
  | 'methodologyVersion'
  | 'network'
  | 'type'
  | 'totalValueLockedUSD'
  | 'protocolControlledValueUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'cumulativeUniqueUsers'
  | 'totalPoolCount'
  | 'dailyUsageMetrics'
  | 'hourlyUsageMetrics'
  | 'financialMetrics';

export type Ethereum_RewardToken = {
  /**  { Reward token type }-{ Smart contract address of the reward token }  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Reference to the actual token  */
  token: Ethereum_Token;
  /**  The type of the reward token  */
  type: Ethereum_RewardTokenType;
};

export type Ethereum_RewardTokenType =
  /**  For reward tokens awarded to LPs/lenders  */
  | 'DEPOSIT'
  /**  For reward tokens awarded to borrowers  */
  | 'BORROW';

export type Ethereum_RewardToken_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  token?: InputMaybe<Scalars['String']['input']>;
  token_not?: InputMaybe<Scalars['String']['input']>;
  token_gt?: InputMaybe<Scalars['String']['input']>;
  token_lt?: InputMaybe<Scalars['String']['input']>;
  token_gte?: InputMaybe<Scalars['String']['input']>;
  token_lte?: InputMaybe<Scalars['String']['input']>;
  token_in?: InputMaybe<Array<Scalars['String']['input']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  token_contains?: InputMaybe<Scalars['String']['input']>;
  token_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  token_not_contains?: InputMaybe<Scalars['String']['input']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  token_starts_with?: InputMaybe<Scalars['String']['input']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_ends_with?: InputMaybe<Scalars['String']['input']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_?: InputMaybe<Ethereum_Token_filter>;
  type?: InputMaybe<Ethereum_RewardTokenType>;
  type_not?: InputMaybe<Ethereum_RewardTokenType>;
  type_in?: InputMaybe<Array<Ethereum_RewardTokenType>>;
  type_not_in?: InputMaybe<Array<Ethereum_RewardTokenType>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_RewardToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_RewardToken_filter>>>;
};

export type Ethereum_RewardToken_orderBy =
  | 'id'
  | 'token'
  | 'token__id'
  | 'token__name'
  | 'token__symbol'
  | 'token__decimals'
  | 'token__lastPriceUSD'
  | 'token__lastPriceBlockNumber'
  | 'token___lastPricePool'
  | 'token___totalSupply'
  | 'token___totalValueLockedUSD'
  | 'token___largePriceChangeBuffer'
  | 'token___largeTVLImpactBuffer'
  | 'type';

export type Ethereum_Swap = {
  /**  { Transaction hash }-{ Log index }  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Transaction hash of the transaction that emitted this event  */
  hash: Scalars['Ethereum_Bytes']['output'];
  /**  Nonce of the transaction that emitted this event  */
  nonce: Scalars['BigInt']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Gas limit of the transaction that emitted this event  */
  gasLimit?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas used in this transaction. (Optional because not every chain will support this)  */
  gasUsed?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas price of the transaction that emitted this event  */
  gasPrice?: Maybe<Scalars['BigInt']['output']>;
  /**  The protocol this transaction belongs to  */
  protocol: Ethereum_DexAmmProtocol;
  /**  Account that emitted this event  */
  account: Ethereum_Account;
  /**  The pool involving this event  */
  pool: Ethereum_LiquidityPool;
  /**  Block number of this event  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this event  */
  timestamp: Scalars['BigInt']['output'];
  /**  the tick after the swap  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Token deposited into pool  */
  tokenIn: Ethereum_Token;
  /**  Amount of token deposited into pool in native units  */
  amountIn: Scalars['BigInt']['output'];
  /**  Amount of token deposited into pool in USD  */
  amountInUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Token withdrawn from pool  */
  tokenOut: Ethereum_Token;
  /**  Amount of token withdrawn from pool in native units  */
  amountOut: Scalars['BigInt']['output'];
  /**  Amount of token withdrawn from pool in USD  */
  amountOutUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Amount of input tokens in the liquidity pool  */
  reserveAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
};

export type Ethereum_Swap_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Ethereum_DexAmmProtocol_filter>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Ethereum_Account_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Ethereum_LiquidityPool_filter>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tokenIn?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not?: InputMaybe<Scalars['String']['input']>;
  tokenIn_gt?: InputMaybe<Scalars['String']['input']>;
  tokenIn_lt?: InputMaybe<Scalars['String']['input']>;
  tokenIn_gte?: InputMaybe<Scalars['String']['input']>;
  tokenIn_lte?: InputMaybe<Scalars['String']['input']>;
  tokenIn_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenIn_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenIn_contains?: InputMaybe<Scalars['String']['input']>;
  tokenIn_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_contains?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_?: InputMaybe<Ethereum_Token_filter>;
  amountIn?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_not?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_gt?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_lt?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_gte?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_lte?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountIn_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountInUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountInUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountInUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountInUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountInUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountInUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountInUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  amountInUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  tokenOut?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not?: InputMaybe<Scalars['String']['input']>;
  tokenOut_gt?: InputMaybe<Scalars['String']['input']>;
  tokenOut_lt?: InputMaybe<Scalars['String']['input']>;
  tokenOut_gte?: InputMaybe<Scalars['String']['input']>;
  tokenOut_lte?: InputMaybe<Scalars['String']['input']>;
  tokenOut_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenOut_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenOut_contains?: InputMaybe<Scalars['String']['input']>;
  tokenOut_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_contains?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_?: InputMaybe<Ethereum_Token_filter>;
  amountOut?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_not?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_gt?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_lt?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_gte?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_lte?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountOut_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountOutUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountOutUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountOutUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountOutUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountOutUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountOutUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountOutUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  amountOutUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  reserveAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_Swap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_Swap_filter>>>;
};

export type Ethereum_Swap_orderBy =
  | 'id'
  | 'hash'
  | 'nonce'
  | 'logIndex'
  | 'gasLimit'
  | 'gasUsed'
  | 'gasPrice'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'blockNumber'
  | 'timestamp'
  | 'tick'
  | 'tokenIn'
  | 'tokenIn__id'
  | 'tokenIn__name'
  | 'tokenIn__symbol'
  | 'tokenIn__decimals'
  | 'tokenIn__lastPriceUSD'
  | 'tokenIn__lastPriceBlockNumber'
  | 'tokenIn___lastPricePool'
  | 'tokenIn___totalSupply'
  | 'tokenIn___totalValueLockedUSD'
  | 'tokenIn___largePriceChangeBuffer'
  | 'tokenIn___largeTVLImpactBuffer'
  | 'amountIn'
  | 'amountInUSD'
  | 'tokenOut'
  | 'tokenOut__id'
  | 'tokenOut__name'
  | 'tokenOut__symbol'
  | 'tokenOut__decimals'
  | 'tokenOut__lastPriceUSD'
  | 'tokenOut__lastPriceBlockNumber'
  | 'tokenOut___lastPricePool'
  | 'tokenOut___totalSupply'
  | 'tokenOut___totalValueLockedUSD'
  | 'tokenOut___largePriceChangeBuffer'
  | 'tokenOut___largeTVLImpactBuffer'
  | 'amountOut'
  | 'amountOutUSD'
  | 'reserveAmounts';

export type Ethereum_Tick = {
  /**  { pool address }-{ tick index }  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  tick index  */
  index: Scalars['BigInt']['output'];
  /**  Liquidity pool this tick belongs to  */
  pool: Ethereum_LiquidityPool;
  /**  Creation timestamp  */
  createdTimestamp: Scalars['BigInt']['output'];
  /**  Creation block number  */
  createdBlockNumber: Scalars['BigInt']['output'];
  /**  calculated price of token0 of tick within this pool - constant  */
  prices: Array<Scalars['Ethereum_BigDecimal']['output']>;
  /**  total liquidity pool has as tick lower or upper  */
  liquidityGross: Scalars['BigInt']['output'];
  /**  total liquidity in USD pool has as tick lower or upper  */
  liquidityGrossUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  how much liquidity changes when tick crossed  */
  liquidityNet: Scalars['BigInt']['output'];
  /**  how much liquidity in USD changes when tick crossed  */
  liquidityNetUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Day ID of the most recent daily snapshot  */
  lastSnapshotDayID: Scalars['Int']['output'];
  /**  Hour ID of the most recent hourly snapshot  */
  lastSnapshotHourID: Scalars['Int']['output'];
  /**  Timestamp of the last time this entity was updated  */
  lastUpdateTimestamp: Scalars['BigInt']['output'];
  /**  Block number of the last time this entity was updated  */
  lastUpdateBlockNumber: Scalars['BigInt']['output'];
};

export type Ethereum_TickDailySnapshot = {
  /**  { pool address }-{ tick index }-{ day ID }  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  tick index  */
  tick: Ethereum_Tick;
  /**  liquidity pool this tick belongs to  */
  pool: Ethereum_LiquidityPool;
  /**  total liquidity pool has as tick lower or upper  */
  liquidityGross: Scalars['BigInt']['output'];
  /**  total liquidity in USD pool has as tick lower or upper  */
  liquidityGrossUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  how much liquidity changes when tick crossed  */
  liquidityNet: Scalars['BigInt']['output'];
  /**  how much liquidity in USD changes when tick crossed  */
  liquidityNetUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Ethereum_TickDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  tick?: InputMaybe<Scalars['String']['input']>;
  tick_not?: InputMaybe<Scalars['String']['input']>;
  tick_gt?: InputMaybe<Scalars['String']['input']>;
  tick_lt?: InputMaybe<Scalars['String']['input']>;
  tick_gte?: InputMaybe<Scalars['String']['input']>;
  tick_lte?: InputMaybe<Scalars['String']['input']>;
  tick_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_contains?: InputMaybe<Scalars['String']['input']>;
  tick_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_?: InputMaybe<Ethereum_Tick_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Ethereum_LiquidityPool_filter>;
  liquidityGross?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGross_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGrossUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  liquidityGrossUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  liquidityNet?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNet_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNetUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  liquidityNetUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_TickDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_TickDailySnapshot_filter>>>;
};

export type Ethereum_TickDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'tick'
  | 'tick__id'
  | 'tick__index'
  | 'tick__createdTimestamp'
  | 'tick__createdBlockNumber'
  | 'tick__liquidityGross'
  | 'tick__liquidityGrossUSD'
  | 'tick__liquidityNet'
  | 'tick__liquidityNetUSD'
  | 'tick__lastSnapshotDayID'
  | 'tick__lastSnapshotHourID'
  | 'tick__lastUpdateTimestamp'
  | 'tick__lastUpdateBlockNumber'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'liquidityGross'
  | 'liquidityGrossUSD'
  | 'liquidityNet'
  | 'liquidityNetUSD'
  | 'timestamp'
  | 'blockNumber';

export type Ethereum_TickHourlySnapshot = {
  /**  { pool address }-{ tick index }-{ hour ID }  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Number of hours since Unix epoch time  */
  hour: Scalars['Int']['output'];
  /**  tick index  */
  tick: Ethereum_Tick;
  /**  liquidity pool this tick belongs to  */
  pool: Ethereum_LiquidityPool;
  /**  total liquidity pool has as tick lower or upper  */
  liquidityGross: Scalars['BigInt']['output'];
  /**  total liquidity in USD pool has as tick lower or upper  */
  liquidityGrossUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  how much liquidity changes when tick crossed  */
  liquidityNet: Scalars['BigInt']['output'];
  /**  how much liquidity in USD changes when tick crossed  */
  liquidityNetUSD: Scalars['Ethereum_BigDecimal']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Ethereum_TickHourlySnapshot_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hour?: InputMaybe<Scalars['Int']['input']>;
  hour_not?: InputMaybe<Scalars['Int']['input']>;
  hour_gt?: InputMaybe<Scalars['Int']['input']>;
  hour_lt?: InputMaybe<Scalars['Int']['input']>;
  hour_gte?: InputMaybe<Scalars['Int']['input']>;
  hour_lte?: InputMaybe<Scalars['Int']['input']>;
  hour_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hour_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  tick?: InputMaybe<Scalars['String']['input']>;
  tick_not?: InputMaybe<Scalars['String']['input']>;
  tick_gt?: InputMaybe<Scalars['String']['input']>;
  tick_lt?: InputMaybe<Scalars['String']['input']>;
  tick_gte?: InputMaybe<Scalars['String']['input']>;
  tick_lte?: InputMaybe<Scalars['String']['input']>;
  tick_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_contains?: InputMaybe<Scalars['String']['input']>;
  tick_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_?: InputMaybe<Ethereum_Tick_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Ethereum_LiquidityPool_filter>;
  liquidityGross?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGross_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGrossUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  liquidityGrossUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  liquidityNet?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNet_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNetUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  liquidityNetUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_TickHourlySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_TickHourlySnapshot_filter>>>;
};

export type Ethereum_TickHourlySnapshot_orderBy =
  | 'id'
  | 'hour'
  | 'tick'
  | 'tick__id'
  | 'tick__index'
  | 'tick__createdTimestamp'
  | 'tick__createdBlockNumber'
  | 'tick__liquidityGross'
  | 'tick__liquidityGrossUSD'
  | 'tick__liquidityNet'
  | 'tick__liquidityNetUSD'
  | 'tick__lastSnapshotDayID'
  | 'tick__lastSnapshotHourID'
  | 'tick__lastUpdateTimestamp'
  | 'tick__lastUpdateBlockNumber'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'liquidityGross'
  | 'liquidityGrossUSD'
  | 'liquidityNet'
  | 'liquidityNetUSD'
  | 'timestamp'
  | 'blockNumber';

export type Ethereum_Tick_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  index?: InputMaybe<Scalars['BigInt']['input']>;
  index_not?: InputMaybe<Scalars['BigInt']['input']>;
  index_gt?: InputMaybe<Scalars['BigInt']['input']>;
  index_lt?: InputMaybe<Scalars['BigInt']['input']>;
  index_gte?: InputMaybe<Scalars['BigInt']['input']>;
  index_lte?: InputMaybe<Scalars['BigInt']['input']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Ethereum_LiquidityPool_filter>;
  createdTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  prices?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  prices_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  prices_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  prices_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  prices_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  prices_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  liquidityGross?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGross_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGrossUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityGrossUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  liquidityGrossUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  liquidityNet?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNet_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNetUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  liquidityNetUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  liquidityNetUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  lastSnapshotDayID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastUpdateTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_Tick_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_Tick_filter>>>;
};

export type Ethereum_Tick_orderBy =
  | 'id'
  | 'index'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'createdTimestamp'
  | 'createdBlockNumber'
  | 'prices'
  | 'liquidityGross'
  | 'liquidityGrossUSD'
  | 'liquidityNet'
  | 'liquidityNetUSD'
  | 'lastSnapshotDayID'
  | 'lastSnapshotHourID'
  | 'lastUpdateTimestamp'
  | 'lastUpdateBlockNumber';

export type Ethereum_Token = {
  /**  Smart contract address of the token  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Name of the token, mirrored from the smart contract  */
  name: Scalars['String']['output'];
  /**  Symbol of the token, mirrored from the smart contract  */
  symbol: Scalars['String']['output'];
  /**  The number of decimal places this token uses, default to 18  */
  decimals: Scalars['Int']['output'];
  /**  Optional field to track the price of a token, mostly for caching purposes  */
  lastPriceUSD?: Maybe<Scalars['Ethereum_BigDecimal']['output']>;
  /**  Optional field to track the block number of the last token price  */
  lastPriceBlockNumber?: Maybe<Scalars['BigInt']['output']>;
  /**  last pool that gave this token a price  */
  _lastPricePool?: Maybe<Scalars['Ethereum_Bytes']['output']>;
  /**  amount of tokens in the protocol  */
  _totalSupply: Scalars['BigInt']['output'];
  /**  Total value locked in the protocol  */
  _totalValueLockedUSD: Scalars['Ethereum_BigDecimal']['output'];
  _largePriceChangeBuffer: Scalars['Int']['output'];
  _largeTVLImpactBuffer: Scalars['Int']['output'];
};

export type Ethereum_TokenType =
  | 'MULTIPLE'
  | 'UNKNOWN'
  | 'ERC20'
  | 'ERC721'
  | 'ERC1155'
  | 'BEP20'
  | 'BEP721'
  | 'BEP1155';

export type Ethereum_Token_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol?: InputMaybe<Scalars['String']['input']>;
  symbol_not?: InputMaybe<Scalars['String']['input']>;
  symbol_gt?: InputMaybe<Scalars['String']['input']>;
  symbol_lt?: InputMaybe<Scalars['String']['input']>;
  symbol_gte?: InputMaybe<Scalars['String']['input']>;
  symbol_lte?: InputMaybe<Scalars['String']['input']>;
  symbol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  decimals?: InputMaybe<Scalars['Int']['input']>;
  decimals_not?: InputMaybe<Scalars['Int']['input']>;
  decimals_gt?: InputMaybe<Scalars['Int']['input']>;
  decimals_lt?: InputMaybe<Scalars['Int']['input']>;
  decimals_gte?: InputMaybe<Scalars['Int']['input']>;
  decimals_lte?: InputMaybe<Scalars['Int']['input']>;
  decimals_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastPriceUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  lastPriceUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  lastPriceUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  lastPriceUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  lastPriceUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  lastPriceUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  lastPriceUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  lastPriceUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  lastPriceBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastPriceBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  _lastPricePool?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  _lastPricePool_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  _lastPricePool_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  _lastPricePool_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  _lastPricePool_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  _lastPricePool_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  _lastPricePool_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  _lastPricePool_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  _lastPricePool_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  _lastPricePool_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  _totalSupply?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_not?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_gt?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_lt?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_gte?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_lte?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  _totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  _totalValueLockedUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  _totalValueLockedUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  _totalValueLockedUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  _totalValueLockedUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  _totalValueLockedUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  _totalValueLockedUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  _totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  _totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  _largePriceChangeBuffer?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_not?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_gt?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_lt?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_gte?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_lte?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  _largePriceChangeBuffer_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  _largeTVLImpactBuffer?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_not?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_gt?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_lt?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_gte?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_lte?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  _largeTVLImpactBuffer_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_Token_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_Token_filter>>>;
};

export type Ethereum_Token_orderBy =
  | 'id'
  | 'name'
  | 'symbol'
  | 'decimals'
  | 'lastPriceUSD'
  | 'lastPriceBlockNumber'
  | '_lastPricePool'
  | '_totalSupply'
  | '_totalValueLockedUSD'
  | '_largePriceChangeBuffer'
  | '_largeTVLImpactBuffer';

export type Ethereum_UsageMetricsDailySnapshot = {
  /**  ID is # of days since Unix epoch time  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  Protocol this snapshot is associated with  */
  protocol: Ethereum_DexAmmProtocol;
  /**  Number of unique daily active users  */
  dailyActiveUsers: Scalars['Int']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface.  */
  dailyTransactionCount: Scalars['Int']['output'];
  /**  Total number of pools  */
  totalPoolCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in an day  */
  dailyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in an day  */
  dailyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in an day  */
  dailySwapCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Ethereum_UsageMetricsDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Ethereum_DexAmmProtocol_filter>;
  dailyActiveUsers?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_not?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyActiveUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyTransactionCount?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyTransactionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_not?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_UsageMetricsDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_UsageMetricsDailySnapshot_filter>>>;
};

export type Ethereum_UsageMetricsDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'dailyActiveUsers'
  | 'cumulativeUniqueUsers'
  | 'dailyTransactionCount'
  | 'totalPoolCount'
  | 'dailyDepositCount'
  | 'dailyWithdrawCount'
  | 'dailySwapCount'
  | 'timestamp'
  | 'blockNumber';

export type Ethereum_UsageMetricsHourlySnapshot = {
  /**  { # of hours since Unix epoch time }  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Number of hours since Unix epoch time  */
  hour: Scalars['Int']['output'];
  /**  Protocol this snapshot is associated with  */
  protocol: Ethereum_DexAmmProtocol;
  /**  Number of unique hourly active users  */
  hourlyActiveUsers: Scalars['Int']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.  */
  hourlyTransactionCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in an hour  */
  hourlyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in an hour  */
  hourlyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in an hour  */
  hourlySwapCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Ethereum_UsageMetricsHourlySnapshot_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hour?: InputMaybe<Scalars['Int']['input']>;
  hour_not?: InputMaybe<Scalars['Int']['input']>;
  hour_gt?: InputMaybe<Scalars['Int']['input']>;
  hour_lt?: InputMaybe<Scalars['Int']['input']>;
  hour_gte?: InputMaybe<Scalars['Int']['input']>;
  hour_lte?: InputMaybe<Scalars['Int']['input']>;
  hour_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hour_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Ethereum_DexAmmProtocol_filter>;
  hourlyActiveUsers?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyActiveUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyTransactionCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyTransactionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_UsageMetricsHourlySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_UsageMetricsHourlySnapshot_filter>>>;
};

export type Ethereum_UsageMetricsHourlySnapshot_orderBy =
  | 'id'
  | 'hour'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'hourlyActiveUsers'
  | 'cumulativeUniqueUsers'
  | 'hourlyTransactionCount'
  | 'hourlyDepositCount'
  | 'hourlyWithdrawCount'
  | 'hourlySwapCount'
  | 'timestamp'
  | 'blockNumber';

export type Ethereum_Withdraw = {
  /**  { Transaction hash }-{ Log index } */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Transaction hash of the transaction that emitted this event  */
  hash: Scalars['Ethereum_Bytes']['output'];
  /**  Nonce of the transaction that emitted this event  */
  nonce: Scalars['BigInt']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Gas limit of the transaction that emitted this event  */
  gasLimit?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas used in this transaction. (Optional because not every chain will support this)  */
  gasUsed?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas price of the transaction that emitted this event  */
  gasPrice?: Maybe<Scalars['BigInt']['output']>;
  /**  The protocol this transaction belongs to  */
  protocol: Ethereum_DexAmmProtocol;
  /**  Account that emitted this event  */
  account: Ethereum_Account;
  /**  The user position changed by this event  */
  position?: Maybe<Ethereum_Position>;
  /**  lower tick of position  */
  tickLower?: Maybe<Scalars['BigInt']['output']>;
  /**  upper tick of position  */
  tickUpper?: Maybe<Scalars['BigInt']['output']>;
  /**  The pool involving this event  */
  pool: Ethereum_LiquidityPool;
  /**  Block number of this event  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this event  */
  timestamp: Scalars['BigInt']['output'];
  /**  Amount of liquidity burned  */
  liquidity: Scalars['BigInt']['output'];
  /**  Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool  */
  inputTokens: Array<Ethereum_Token>;
  /**  Amount of input tokens in the token's native unit  */
  inputTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in the liquidity pool  */
  reserveAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool)  */
  amountUSD: Scalars['Ethereum_BigDecimal']['output'];
};


export type Ethereum_WithdrawinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Token_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Token_filter>;
};

export type Ethereum_Withdraw_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Ethereum_DexAmmProtocol_filter>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Ethereum_Account_filter>;
  position?: InputMaybe<Scalars['String']['input']>;
  position_not?: InputMaybe<Scalars['String']['input']>;
  position_gt?: InputMaybe<Scalars['String']['input']>;
  position_lt?: InputMaybe<Scalars['String']['input']>;
  position_gte?: InputMaybe<Scalars['String']['input']>;
  position_lte?: InputMaybe<Scalars['String']['input']>;
  position_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_contains?: InputMaybe<Scalars['String']['input']>;
  position_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_contains?: InputMaybe<Scalars['String']['input']>;
  position_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_?: InputMaybe<Ethereum_Position_filter>;
  tickLower?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickLower_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Ethereum_LiquidityPool_filter>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Ethereum_Token_filter>;
  inputTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountUSD?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountUSD_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountUSD_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountUSD_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountUSD_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountUSD_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  amountUSD_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum_Withdraw_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum_Withdraw_filter>>>;
};

export type Ethereum_Withdraw_orderBy =
  | 'id'
  | 'hash'
  | 'nonce'
  | 'logIndex'
  | 'gasLimit'
  | 'gasUsed'
  | 'gasPrice'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'position'
  | 'position__id'
  | 'position__hashOpened'
  | 'position__hashClosed'
  | 'position__blockNumberOpened'
  | 'position__timestampOpened'
  | 'position__blockNumberClosed'
  | 'position__timestampClosed'
  | 'position__liquidityTokenType'
  | 'position__liquidity'
  | 'position__liquidityUSD'
  | 'position__cumulativeDepositUSD'
  | 'position__cumulativeWithdrawUSD'
  | 'position__depositCount'
  | 'position__withdrawCount'
  | 'tickLower'
  | 'tickUpper'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'blockNumber'
  | 'timestamp'
  | 'liquidity'
  | 'inputTokens'
  | 'inputTokenAmounts'
  | 'reserveAmounts'
  | 'amountUSD';

export type Ethereum__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['Ethereum_Bytes']['output']>;
  /** The block number */
  number: Scalars['Int']['output'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']['output']>;
  /** The hash of the parent block */
  parentHash?: Maybe<Scalars['Ethereum_Bytes']['output']>;
};

/**   Used to keep track of the price of Ether/TVL in USD, pool deposit count, and total unique users  */
export type Ethereum__HelperStore = {
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Token Prices  */
  valueDecimalList?: Maybe<Array<Scalars['Ethereum_BigDecimal']['output']>>;
  /**  price of ETH/TVL in USD  */
  valueDecimal?: Maybe<Scalars['Ethereum_BigDecimal']['output']>;
  /**  # of deposits, # of unique users  */
  valueInt?: Maybe<Scalars['Int']['output']>;
};

export type Ethereum__HelperStore_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  valueDecimalList?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  valueDecimalList_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  valueDecimalList_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  valueDecimalList_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  valueDecimalList_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  valueDecimalList_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  valueDecimal?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  valueDecimal_not?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  valueDecimal_gt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  valueDecimal_lt?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  valueDecimal_gte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  valueDecimal_lte?: InputMaybe<Scalars['Ethereum_BigDecimal']['input']>;
  valueDecimal_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  valueDecimal_not_in?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  valueInt?: InputMaybe<Scalars['Int']['input']>;
  valueInt_not?: InputMaybe<Scalars['Int']['input']>;
  valueInt_gt?: InputMaybe<Scalars['Int']['input']>;
  valueInt_lt?: InputMaybe<Scalars['Int']['input']>;
  valueInt_gte?: InputMaybe<Scalars['Int']['input']>;
  valueInt_lte?: InputMaybe<Scalars['Int']['input']>;
  valueInt_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  valueInt_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum__HelperStore_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum__HelperStore_filter>>>;
};

export type Ethereum__HelperStore_orderBy =
  | 'id'
  | 'valueDecimalList'
  | 'valueDecimal'
  | 'valueInt';

export type Ethereum__LiquidityPoolAmount = {
  /**  Smart contract address of the pool  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool  */
  inputTokens: Array<Ethereum_Token>;
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['Ethereum_BigDecimal']['output']>;
  tokenPrices: Array<Scalars['Ethereum_BigDecimal']['output']>;
};


export type Ethereum__LiquidityPoolAmountinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_Token_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_Token_filter>;
};

export type Ethereum__LiquidityPoolAmount_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Ethereum_Token_filter>;
  inputTokenBalances?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  tokenPrices?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  tokenPrices_not?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  tokenPrices_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  tokenPrices_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  tokenPrices_not_contains?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  tokenPrices_not_contains_nocase?: InputMaybe<Array<Scalars['Ethereum_BigDecimal']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum__LiquidityPoolAmount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum__LiquidityPoolAmount_filter>>>;
};

export type Ethereum__LiquidityPoolAmount_orderBy =
  | 'id'
  | 'inputTokens'
  | 'inputTokenBalances'
  | 'tokenPrices';

/** The type for the top-level _meta field */
export type Ethereum__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: Ethereum__Block_;
  /** The deployment ID */
  deployment: Scalars['String']['output'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean']['output'];
};

export type Ethereum__SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

/**  This is used to keep tract of the derived price of tokens in ethereum and the whitelisted pools to which it belongs */
export type Ethereum__TokenWhitelist = {
  /**  Token Address  */
  id: Scalars['Ethereum_Bytes']['output'];
  /**  pools token is in that are white listed for USD pricing  */
  whitelistPools: Array<Ethereum_LiquidityPool>;
};


/**  This is used to keep tract of the derived price of tokens in ethereum and the whitelisted pools to which it belongs */
export type Ethereum__TokenWhitelistwhitelistPoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Ethereum_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Ethereum_OrderDirection>;
  where?: InputMaybe<Ethereum_LiquidityPool_filter>;
};

export type Ethereum__TokenWhitelistSymbol = {
  /**  Whitelist Token Symbol  */
  id: Scalars['ID']['output'];
  /**  Whitelist Token Address */
  address: Scalars['Ethereum_Bytes']['output'];
};

export type Ethereum__TokenWhitelistSymbol_filter = {
  id?: InputMaybe<Scalars['ID']['input']>;
  id_not?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  address?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  address_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  address_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  address_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  address_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  address_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  address_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  address_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  address_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  address_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum__TokenWhitelistSymbol_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum__TokenWhitelistSymbol_filter>>>;
};

export type Ethereum__TokenWhitelistSymbol_orderBy =
  | 'id'
  | 'address';

export type Ethereum__TokenWhitelist_filter = {
  id?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Ethereum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Ethereum_Bytes']['input']>;
  whitelistPools?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_not?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_?: InputMaybe<Ethereum_LiquidityPool_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Ethereum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Ethereum__TokenWhitelist_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Ethereum__TokenWhitelist_filter>>>;
};

export type Ethereum__TokenWhitelist_orderBy =
  | 'id'
  | 'whitelistPools';

export type Optimism_Account = {
  /**  { Account address }  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Number of positions this account has  */
  positionCount: Scalars['Int']['output'];
  /**  All positions that belong to this account  */
  positions: Array<Optimism_Position>;
  /**  Number of open positions this account has  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions this account has  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Number of deposits this account made  */
  depositCount: Scalars['Int']['output'];
  /**  All deposit events of this account  */
  deposits: Array<Optimism_Deposit>;
  /**  Number of withdrawals this account made  */
  withdrawCount: Scalars['Int']['output'];
  /**  All withdraw events of this account  */
  withdraws: Array<Optimism_Withdraw>;
  /**  Number of times this account has traded/swapped */
  swapCount: Scalars['Int']['output'];
  /**  All swap events of this account  */
  swaps: Array<Optimism_Swap>;
};


export type Optimism_AccountpositionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Position_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Position_filter>;
};


export type Optimism_AccountdepositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Deposit_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Deposit_filter>;
};


export type Optimism_AccountwithdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Withdraw_filter>;
};


export type Optimism_AccountswapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Swap_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Swap_filter>;
};

export type Optimism_Account_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positions_?: InputMaybe<Optimism_Position_filter>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount?: InputMaybe<Scalars['Int']['input']>;
  depositCount_not?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  deposits_?: InputMaybe<Optimism_Deposit_filter>;
  withdrawCount?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdraws_?: InputMaybe<Optimism_Withdraw_filter>;
  swapCount?: InputMaybe<Scalars['Int']['input']>;
  swapCount_not?: InputMaybe<Scalars['Int']['input']>;
  swapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  swapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  swapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  swapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  swapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  swaps_?: InputMaybe<Optimism_Swap_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_Account_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_Account_filter>>>;
};

export type Optimism_Account_orderBy =
  | 'id'
  | 'positionCount'
  | 'positions'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'depositCount'
  | 'deposits'
  | 'withdrawCount'
  | 'withdraws'
  | 'swapCount'
  | 'swaps';

export type Optimism_ActiveAccount = {
  /**  { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch }  */
  id: Scalars['Optimism_Bytes']['output'];
};

export type Optimism_ActiveAccount_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_ActiveAccount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_ActiveAccount_filter>>>;
};

export type Optimism_ActiveAccount_orderBy =
  | 'id';

export type Optimism_Aggregation_interval =
  | 'hour'
  | 'day';

export type Optimism_BlockChangedFilter = {
  number_gte: Scalars['Int']['input'];
};

export type Optimism_Block_height = {
  hash?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  number_gte?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * An event is any user action that occurs in a protocol. Generally, they are Ethereum events
 * emitted by a function in the smart contracts, stored in transaction receipts as event logs.
 * However, some user actions of interest are function calls that don't emit events. For example,
 * the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
 * store them as events, although they are not technically Ethereum events emitted by smart
 * contracts.
 *
 */
export type Optimism_Deposit = {
  /**  { Transaction hash }-{ Log index }  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Transaction hash of the transaction that emitted this event  */
  hash: Scalars['Optimism_Bytes']['output'];
  /**  Nonce of the transaction that emitted this event  */
  nonce: Scalars['BigInt']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Gas limit of the transaction that emitted this event  */
  gasLimit?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas used in this transaction. (Optional because not every chain will support this)  */
  gasUsed?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas price of the transaction that emitted this event  */
  gasPrice?: Maybe<Scalars['BigInt']['output']>;
  /**  The protocol this transaction belongs to  */
  protocol: Optimism_DexAmmProtocol;
  /**  Account that emitted this event  */
  account: Optimism_Account;
  /**  The user position changed by this event  */
  position?: Maybe<Optimism_Position>;
  /**  The pool involving this event  */
  pool: Optimism_LiquidityPool;
  /**  lower tick of position  */
  tickLower?: Maybe<Scalars['BigInt']['output']>;
  /**  upper tick of position  */
  tickUpper?: Maybe<Scalars['BigInt']['output']>;
  /**  Block number of this event  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this event  */
  timestamp: Scalars['BigInt']['output'];
  /**  Amount of liquidity minted  */
  liquidity: Scalars['BigInt']['output'];
  /**  Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool  */
  inputTokens: Array<Optimism_Token>;
  /**  Amount of input tokens in the token's native unit  */
  inputTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in the liquidity pool  */
  reserveAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool)  */
  amountUSD: Scalars['Optimism_BigDecimal']['output'];
};


/**
 * An event is any user action that occurs in a protocol. Generally, they are Ethereum events
 * emitted by a function in the smart contracts, stored in transaction receipts as event logs.
 * However, some user actions of interest are function calls that don't emit events. For example,
 * the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
 * store them as events, although they are not technically Ethereum events emitted by smart
 * contracts.
 *
 */
export type Optimism_DepositinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Token_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Token_filter>;
};

export type Optimism_Deposit_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Optimism_DexAmmProtocol_filter>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Optimism_Account_filter>;
  position?: InputMaybe<Scalars['String']['input']>;
  position_not?: InputMaybe<Scalars['String']['input']>;
  position_gt?: InputMaybe<Scalars['String']['input']>;
  position_lt?: InputMaybe<Scalars['String']['input']>;
  position_gte?: InputMaybe<Scalars['String']['input']>;
  position_lte?: InputMaybe<Scalars['String']['input']>;
  position_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_contains?: InputMaybe<Scalars['String']['input']>;
  position_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_contains?: InputMaybe<Scalars['String']['input']>;
  position_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_?: InputMaybe<Optimism_Position_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Optimism_LiquidityPool_filter>;
  tickLower?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickLower_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Optimism_Token_filter>;
  inputTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_Deposit_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_Deposit_filter>>>;
};

export type Optimism_Deposit_orderBy =
  | 'id'
  | 'hash'
  | 'nonce'
  | 'logIndex'
  | 'gasLimit'
  | 'gasUsed'
  | 'gasPrice'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'position'
  | 'position__id'
  | 'position__hashOpened'
  | 'position__hashClosed'
  | 'position__blockNumberOpened'
  | 'position__timestampOpened'
  | 'position__blockNumberClosed'
  | 'position__timestampClosed'
  | 'position__liquidityTokenType'
  | 'position__liquidity'
  | 'position__liquidityUSD'
  | 'position__cumulativeDepositUSD'
  | 'position__cumulativeWithdrawUSD'
  | 'position__depositCount'
  | 'position__withdrawCount'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'tickLower'
  | 'tickUpper'
  | 'blockNumber'
  | 'timestamp'
  | 'liquidity'
  | 'inputTokens'
  | 'inputTokenAmounts'
  | 'reserveAmounts'
  | 'amountUSD';

export type Optimism_DexAmmProtocol = Optimism_Protocol & {
  /**  Smart contract address of the protocol's main contract (Factory, Registry, etc)  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Name of the protocol, including version. e.g. Uniswap v3  */
  name: Scalars['String']['output'];
  /**  Slug of protocol, including version. e.g. uniswap-v3  */
  slug: Scalars['String']['output'];
  /**  Version of the subgraph schema, in SemVer format (e.g. 1.0.0)  */
  schemaVersion: Scalars['String']['output'];
  /**  Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)  */
  subgraphVersion: Scalars['String']['output'];
  /**  Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)  */
  methodologyVersion: Scalars['String']['output'];
  /**  The blockchain network this subgraph is indexing on  */
  network: Optimism_Network;
  /**  The type of protocol (e.g. DEX, Lending, Yield, etc)  */
  type: Optimism_ProtocolType;
  /**  Current TVL (Total Value Locked) of the entire protocol  */
  totalValueLockedUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All protocol-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedProtocolSideValueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All supply-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedSupplySideValueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
  protocolControlledValueUSD?: Maybe<Scalars['Optimism_BigDecimal']['output']>;
  /**  All historical volume in USD  */
  cumulativeVolumeUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  cumulativeSupplySideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  cumulativeTotalRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Number of cumulative liquidity providers  */
  cumulativeUniqueLPs: Scalars['Int']['output'];
  /**  Number of cumulative traders  */
  cumulativeUniqueTraders: Scalars['Int']['output'];
  /**  Total number of pools  */
  totalPoolCount: Scalars['Int']['output'];
  /**  Total number of open positions  */
  openPositionCount: Scalars['Int']['output'];
  /**  Total number of positions (open and closed)  */
  cumulativePositionCount: Scalars['Int']['output'];
  /**  Day ID of the most recent daily snapshot  */
  lastSnapshotDayID: Scalars['Int']['output'];
  /**  Timestamp of the last time this entity was updated  */
  lastUpdateTimestamp: Scalars['BigInt']['output'];
  /**  Block number of the last time this entity was updated  */
  lastUpdateBlockNumber: Scalars['BigInt']['output'];
  /**  Daily usage metrics for this protocol  */
  dailyUsageMetrics: Array<Optimism_UsageMetricsDailySnapshot>;
  /**  Hourly usage metrics for this protocol  */
  hourlyUsageMetrics: Array<Optimism_UsageMetricsHourlySnapshot>;
  /**  Daily financial metrics for this protocol  */
  financialMetrics: Array<Optimism_FinancialsDailySnapshot>;
  /**  All pools that belong to this protocol  */
  pools: Array<Optimism_LiquidityPool>;
  /**  This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis  */
  _regenesis: Scalars['Boolean']['output'];
};


export type Optimism_DexAmmProtocoldailyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_UsageMetricsDailySnapshot_filter>;
};


export type Optimism_DexAmmProtocolhourlyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_UsageMetricsHourlySnapshot_filter>;
};


export type Optimism_DexAmmProtocolfinancialMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_FinancialsDailySnapshot_filter>;
};


export type Optimism_DexAmmProtocolpoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_LiquidityPool_filter>;
};

export type Optimism_DexAmmProtocol_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  slug_not?: InputMaybe<Scalars['String']['input']>;
  slug_gt?: InputMaybe<Scalars['String']['input']>;
  slug_lt?: InputMaybe<Scalars['String']['input']>;
  slug_gte?: InputMaybe<Scalars['String']['input']>;
  slug_lte?: InputMaybe<Scalars['String']['input']>;
  slug_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  slug_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  network?: InputMaybe<Optimism_Network>;
  network_not?: InputMaybe<Optimism_Network>;
  network_in?: InputMaybe<Array<Optimism_Network>>;
  network_not_in?: InputMaybe<Array<Optimism_Network>>;
  type?: InputMaybe<Optimism_ProtocolType>;
  type_not?: InputMaybe<Optimism_ProtocolType>;
  type_in?: InputMaybe<Array<Optimism_ProtocolType>>;
  type_not_in?: InputMaybe<Array<Optimism_ProtocolType>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  protocolControlledValueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueLPs?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueLPs_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueTraders?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueTraders_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_not?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativePositionCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativePositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastUpdateTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyUsageMetrics_?: InputMaybe<Optimism_UsageMetricsDailySnapshot_filter>;
  hourlyUsageMetrics_?: InputMaybe<Optimism_UsageMetricsHourlySnapshot_filter>;
  financialMetrics_?: InputMaybe<Optimism_FinancialsDailySnapshot_filter>;
  pools_?: InputMaybe<Optimism_LiquidityPool_filter>;
  _regenesis?: InputMaybe<Scalars['Boolean']['input']>;
  _regenesis_not?: InputMaybe<Scalars['Boolean']['input']>;
  _regenesis_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  _regenesis_not_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_DexAmmProtocol_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_DexAmmProtocol_filter>>>;
};

export type Optimism_DexAmmProtocol_orderBy =
  | 'id'
  | 'name'
  | 'slug'
  | 'schemaVersion'
  | 'subgraphVersion'
  | 'methodologyVersion'
  | 'network'
  | 'type'
  | 'totalValueLockedUSD'
  | 'totalLiquidityUSD'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideValueUSD'
  | 'uncollectedSupplySideValueUSD'
  | 'protocolControlledValueUSD'
  | 'cumulativeVolumeUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'cumulativeUniqueUsers'
  | 'cumulativeUniqueLPs'
  | 'cumulativeUniqueTraders'
  | 'totalPoolCount'
  | 'openPositionCount'
  | 'cumulativePositionCount'
  | 'lastSnapshotDayID'
  | 'lastUpdateTimestamp'
  | 'lastUpdateBlockNumber'
  | 'dailyUsageMetrics'
  | 'hourlyUsageMetrics'
  | 'financialMetrics'
  | 'pools'
  | '_regenesis';

export type Optimism_FinancialsDailySnapshot = {
  /**  ID is # of days since Unix epoch time  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  Protocol this snapshot is associated with  */
  protocol: Optimism_DexAmmProtocol;
  /**  Current TVL (Total Value Locked) of the entire protocol  */
  totalValueLockedUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All protocol-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedProtocolSideValueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All supply-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedSupplySideValueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
  protocolControlledValueUSD?: Maybe<Scalars['Optimism_BigDecimal']['output']>;
  /**  All trade volume occurred in a given day, in USD  */
  dailyVolumeUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All historical trade volume in USD  */
  cumulativeVolumeUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  dailySupplySideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  cumulativeSupplySideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  dailyProtocolSideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  dailyTotalRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  cumulativeTotalRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Optimism_FinancialsDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Optimism_DexAmmProtocol_filter>;
  totalValueLockedUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  protocolControlledValueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyVolumeUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyVolumeUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyVolumeUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyVolumeUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyVolumeUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyVolumeUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyVolumeUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyVolumeUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyTotalRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyTotalRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_FinancialsDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_FinancialsDailySnapshot_filter>>>;
};

export type Optimism_FinancialsDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'totalValueLockedUSD'
  | 'totalLiquidityUSD'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideValueUSD'
  | 'uncollectedSupplySideValueUSD'
  | 'protocolControlledValueUSD'
  | 'dailyVolumeUSD'
  | 'cumulativeVolumeUSD'
  | 'dailySupplySideRevenueUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'dailyProtocolSideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'dailyTotalRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'timestamp'
  | 'blockNumber';

export type Optimism_LiquidityPool = {
  /**  Smart contract address of the pool  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  The protocol this pool belongs to  */
  protocol: Optimism_DexAmmProtocol;
  /**  Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)  */
  name?: Maybe<Scalars['String']['output']>;
  /**  Symbol of liquidity pool (e.g. 3CRV)  */
  symbol?: Maybe<Scalars['String']['output']>;
  /**  Token that is to represent ownership of liquidity  */
  liquidityToken?: Maybe<Optimism_Token>;
  /**  Type of token used to track liquidity  */
  liquidityTokenType?: Maybe<Optimism_TokenType>;
  /**  Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer  */
  inputTokens: Array<Optimism_Token>;
  /**  Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon  */
  rewardTokens?: Maybe<Array<Optimism_RewardToken>>;
  /**  Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee. )  */
  fees: Array<Optimism_LiquidityPoolFee>;
  /**  Whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol.  */
  isSingleSided: Scalars['Boolean']['output'];
  /**  Creation timestamp  */
  createdTimestamp: Scalars['BigInt']['output'];
  /**  Creation block number  */
  createdBlockNumber: Scalars['BigInt']['output'];
  /**  Current tick representing the price of token0/token1  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Current TVL (Total Value Locked) of this pool in USD  */
  totalValueLockedUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity for this pool.  */
  totalLiquidity: Scalars['BigInt']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidity: Scalars['BigInt']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All protocol-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All protocol-side value locking in USD that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideValuesUSD: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  All supply-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedSupplySideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All supply-side value locked in USD that remains uncollected and unused in the pool.  */
  uncollectedSupplySideValuesUSD: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  All revenue generated by the liquidity pool, accrued to the supply side.  */
  cumulativeSupplySideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool, accrued to the protocol.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool.  */
  cumulativeTotalRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenUSD: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  All historical trade volume occurred in this pool, in USD  */
  cumulativeVolumeUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalancesUSD: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool  */
  inputTokenWeights: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.  */
  stakedOutputTokenAmount?: Maybe<Scalars['BigInt']['output']>;
  /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsUSD?: Maybe<Array<Scalars['Optimism_BigDecimal']['output']>>;
  /**  Total number of deposits (add liquidity)  */
  cumulativeDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity)  */
  cumulativeWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps)  */
  cumulativeSwapCount: Scalars['Int']['output'];
  /**  All positions in this market  */
  positions: Array<Optimism_Position>;
  /**  Number of positions in this market  */
  positionCount: Scalars['Int']['output'];
  /**  Number of open positions in this market  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions in this market  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Day ID of the most recent daily snapshot  */
  lastSnapshotDayID: Scalars['Int']['output'];
  /**  Hour ID of the most recent hourly snapshot  */
  lastSnapshotHourID: Scalars['Int']['output'];
  /**  Timestamp of the last time this entity was updated  */
  lastUpdateTimestamp: Scalars['BigInt']['output'];
  /**  Block number of the last time this entity was updated  */
  lastUpdateBlockNumber: Scalars['BigInt']['output'];
  /**  Liquidity pool daily snapshots  */
  dailySnapshots: Array<Optimism_LiquidityPoolDailySnapshot>;
  /**  Liquidity pool hourly snapshots  */
  hourlySnapshots: Array<Optimism_LiquidityPoolHourlySnapshot>;
  /**  All deposit (add liquidity) events occurred in this pool  */
  deposits: Array<Optimism_Deposit>;
  /**  All withdraw (remove liquidity) events occurred in this pool  */
  withdraws: Array<Optimism_Withdraw>;
  /**  All trade (swap) events occurred in this pool  */
  swaps: Array<Optimism_Swap>;
};


export type Optimism_LiquidityPoolinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Token_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Token_filter>;
};


export type Optimism_LiquidityPoolrewardTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_RewardToken_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_RewardToken_filter>;
};


export type Optimism_LiquidityPoolfeesArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_LiquidityPoolFee_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_LiquidityPoolFee_filter>;
};


export type Optimism_LiquidityPoolpositionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Position_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Position_filter>;
};


export type Optimism_LiquidityPooldailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_LiquidityPoolDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_LiquidityPoolDailySnapshot_filter>;
};


export type Optimism_LiquidityPoolhourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_LiquidityPoolHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_LiquidityPoolHourlySnapshot_filter>;
};


export type Optimism_LiquidityPooldepositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Deposit_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Deposit_filter>;
};


export type Optimism_LiquidityPoolwithdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Withdraw_filter>;
};


export type Optimism_LiquidityPoolswapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Swap_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Swap_filter>;
};

export type Optimism_LiquidityPoolDailySnapshot = {
  /**  { Smart contract address of the pool }-{ # of days since Unix epoch time }  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  The protocol this snapshot belongs to  */
  protocol: Optimism_DexAmmProtocol;
  /**  The pool this snapshot belongs to  */
  pool: Optimism_LiquidityPool;
  /**  Current tick representing the price of token0/token1  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Current TVL (Total Value Locked) of this pool  */
  totalValueLockedUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity for this pool.  */
  totalLiquidity: Scalars['BigInt']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidity: Scalars['BigInt']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All protocol-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All protocol-side value locking in USD that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideValuesUSD: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  All supply-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedSupplySideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All supply-side value locked in USD that remains uncollected and unused in the pool.  */
  uncollectedSupplySideValuesUSD: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  All revenue generated by the liquidity pool, accrued to the supply side.  */
  cumulativeSupplySideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Daily revenue generated by the liquidity pool, accrued to the supply side.  */
  dailySupplySideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool, accrued to the protocol.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Daily revenue generated by the liquidity pool, accrued to the protocol.  */
  dailyProtocolSideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool.  */
  cumulativeTotalRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Daily revenue generated by the liquidity pool.  */
  dailyTotalRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All historical trade volume occurred in this pool, in USD  */
  cumulativeVolumeUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All trade volume occurred in a given day, in USD  */
  dailyVolumeUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All trade volume , in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  dailyVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenUSD: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  dailyVolumeByTokenUSD: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalancesUSD: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool  */
  inputTokenWeights: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.  */
  stakedOutputTokenAmount?: Maybe<Scalars['BigInt']['output']>;
  /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsUSD?: Maybe<Array<Scalars['Optimism_BigDecimal']['output']>>;
  /**  Total number of deposits (add liquidity)  */
  cumulativeDepositCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in a day  */
  dailyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity)  */
  cumulativeWithdrawCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in a day  */
  dailyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps)  */
  cumulativeSwapCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in a day  */
  dailySwapCount: Scalars['Int']['output'];
  /**  Number of positions in this market  */
  positionCount: Scalars['Int']['output'];
  /**  Number of open positions in this market  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions in this market  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Optimism_LiquidityPoolDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Optimism_DexAmmProtocol_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Optimism_LiquidityPool_filter>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  activeLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideValuesUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideValuesUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyTotalRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyTotalRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyVolumeUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyVolumeUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyVolumeUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyVolumeUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyVolumeUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyVolumeUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  dailyVolumeUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyVolumeUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalances?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalancesUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeDepositCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_LiquidityPoolDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_LiquidityPoolDailySnapshot_filter>>>;
};

export type Optimism_LiquidityPoolDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'tick'
  | 'totalValueLockedUSD'
  | 'totalLiquidity'
  | 'totalLiquidityUSD'
  | 'activeLiquidity'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideTokenAmounts'
  | 'uncollectedProtocolSideValuesUSD'
  | 'uncollectedSupplySideTokenAmounts'
  | 'uncollectedSupplySideValuesUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'dailySupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'dailyProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'dailyTotalRevenueUSD'
  | 'cumulativeVolumeUSD'
  | 'dailyVolumeUSD'
  | 'cumulativeVolumeByTokenAmount'
  | 'dailyVolumeByTokenAmount'
  | 'cumulativeVolumeByTokenUSD'
  | 'dailyVolumeByTokenUSD'
  | 'inputTokenBalances'
  | 'inputTokenBalancesUSD'
  | 'inputTokenWeights'
  | 'stakedOutputTokenAmount'
  | 'rewardTokenEmissionsAmount'
  | 'rewardTokenEmissionsUSD'
  | 'cumulativeDepositCount'
  | 'dailyDepositCount'
  | 'cumulativeWithdrawCount'
  | 'dailyWithdrawCount'
  | 'cumulativeSwapCount'
  | 'dailySwapCount'
  | 'positionCount'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'timestamp'
  | 'blockNumber';

export type Optimism_LiquidityPoolFee = {
  /**  { Fee type }-{ Pool address }  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Fee as a percentage of the trade (swap) amount. Does not always apply  */
  feePercentage?: Maybe<Scalars['Optimism_BigDecimal']['output']>;
  /**  Type of fee this pool uses  */
  feeType: Optimism_LiquidityPoolFeeType;
};

export type Optimism_LiquidityPoolFeeType =
  /**  Total fixed fee paid by the user per trade, as a percentage of the traded amount. e.g. 0.3% for Uniswap v2, 0.3% for Sushiswap, 0.04% for Curve v1.  */
  | 'FIXED_TRADING_FEE'
  /**  Some protocols use tiered fees instead of fixed fee (e.g. DYDX, DODO). Set `feePercentage` as 0 but handle the tiered fees in the mapping code.  */
  | 'TIERED_TRADING_FEE'
  /**  Some protocols use dynamic fees instead of fixed fee (e.g. Balancer v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.  */
  | 'DYNAMIC_TRADING_FEE'
  /**  Fixed fee that's paid to the LP, as a percentage of the traded amount. e.g. 0.25% for Sushiswap, 0.02% for Curve v1.  */
  | 'FIXED_LP_FEE'
  /**  Some protocols use dynamic LP fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.  */
  | 'DYNAMIC_LP_FEE'
  /**  Fixed fee that's paid to the protocol, as a percentage of the traded amount. e.g. 0.05% for Sushiswap, 0.02% for Curve v1.  */
  | 'FIXED_PROTOCOL_FEE'
  /**  Some protocols use dynamic protocol fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.  */
  | 'DYNAMIC_PROTOCOL_FEE'
  /**  One-time fee charged by the protocol during deposit, in percentages of the deposit token  */
  | 'DEPOSIT_FEE'
  /**  One-time fee charged by the protocol (e.g. Bancor v3) during withdrawal, in percentages of the withdrawal token  */
  | 'WITHDRAWAL_FEE';

export type Optimism_LiquidityPoolFee_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  feePercentage?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  feePercentage_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  feePercentage_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  feePercentage_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  feePercentage_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  feePercentage_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  feePercentage_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  feePercentage_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  feeType?: InputMaybe<Optimism_LiquidityPoolFeeType>;
  feeType_not?: InputMaybe<Optimism_LiquidityPoolFeeType>;
  feeType_in?: InputMaybe<Array<Optimism_LiquidityPoolFeeType>>;
  feeType_not_in?: InputMaybe<Array<Optimism_LiquidityPoolFeeType>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_LiquidityPoolFee_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_LiquidityPoolFee_filter>>>;
};

export type Optimism_LiquidityPoolFee_orderBy =
  | 'id'
  | 'feePercentage'
  | 'feeType';

export type Optimism_LiquidityPoolHourlySnapshot = {
  /**  { Smart contract address of the pool }-{ # of hours since Unix epoch time }  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Number of hours since Unix epoch time  */
  hour: Scalars['Int']['output'];
  /**  The protocol this snapshot belongs to  */
  protocol: Optimism_DexAmmProtocol;
  /**  The pool this snapshot belongs to  */
  pool: Optimism_LiquidityPool;
  /**  Current tick representing the price of token0/token1  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Current TVL (Total Value Locked) of this pool  */
  totalValueLockedUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity for this pool.  */
  totalLiquidity: Scalars['BigInt']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidity: Scalars['BigInt']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All protocol-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All protocol-side value locking in USD that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideValuesUSD: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  All supply-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedSupplySideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All supply-side value locked in USD that remains uncollected and unused in the pool.  */
  uncollectedSupplySideValuesUSD: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  All revenue generated by the liquidity pool, accrued to the supply side.  */
  cumulativeSupplySideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Hourly revenue generated by the liquidity pool, accrued to the supply side.  */
  hourlySupplySideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool, accrued to the protocol.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Hourly revenue generated by the liquidity pool, accrued to the protocol.  */
  hourlyProtocolSideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool.  */
  cumulativeTotalRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Hourly revenue generated by the liquidity pool.  */
  hourlyTotalRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All historical trade volume occurred in this pool, in USD  */
  cumulativeVolumeUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All trade volume occurred in a given hour, in USD  */
  hourlyVolumeUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All trade volume, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  hourlyVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenUSD: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  hourlyVolumeByTokenUSD: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalancesUSD: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool  */
  inputTokenWeights: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.  */
  stakedOutputTokenAmount?: Maybe<Scalars['BigInt']['output']>;
  /**  Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsUSD?: Maybe<Array<Scalars['Optimism_BigDecimal']['output']>>;
  /**  Total number of deposits (add liquidity)  */
  cumulativeDepositCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in an hour  */
  hourlyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity)  */
  cumulativeWithdrawCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in an hour  */
  hourlyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps)  */
  cumulativeSwapCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in an hour  */
  hourlySwapCount: Scalars['Int']['output'];
  /**  Number of positions in this market  */
  positionCount: Scalars['Int']['output'];
  /**  Number of open positions in this market  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions in this market  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Optimism_LiquidityPoolHourlySnapshot_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hour?: InputMaybe<Scalars['Int']['input']>;
  hour_not?: InputMaybe<Scalars['Int']['input']>;
  hour_gt?: InputMaybe<Scalars['Int']['input']>;
  hour_lt?: InputMaybe<Scalars['Int']['input']>;
  hour_gte?: InputMaybe<Scalars['Int']['input']>;
  hour_lte?: InputMaybe<Scalars['Int']['input']>;
  hour_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hour_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Optimism_DexAmmProtocol_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Optimism_LiquidityPool_filter>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  activeLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideValuesUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideValuesUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  hourlySupplySideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  hourlySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  hourlyProtocolSideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  hourlyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  hourlyTotalRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  hourlyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  hourlyVolumeUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyVolumeUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyVolumeUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyVolumeUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyVolumeUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyVolumeUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  hourlyVolumeUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  hourlyVolumeUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalances?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalancesUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeDepositCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_LiquidityPoolHourlySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_LiquidityPoolHourlySnapshot_filter>>>;
};

export type Optimism_LiquidityPoolHourlySnapshot_orderBy =
  | 'id'
  | 'hour'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'tick'
  | 'totalValueLockedUSD'
  | 'totalLiquidity'
  | 'totalLiquidityUSD'
  | 'activeLiquidity'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideTokenAmounts'
  | 'uncollectedProtocolSideValuesUSD'
  | 'uncollectedSupplySideTokenAmounts'
  | 'uncollectedSupplySideValuesUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'hourlySupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'hourlyProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'hourlyTotalRevenueUSD'
  | 'cumulativeVolumeUSD'
  | 'hourlyVolumeUSD'
  | 'cumulativeVolumeByTokenAmount'
  | 'hourlyVolumeByTokenAmount'
  | 'cumulativeVolumeByTokenUSD'
  | 'hourlyVolumeByTokenUSD'
  | 'inputTokenBalances'
  | 'inputTokenBalancesUSD'
  | 'inputTokenWeights'
  | 'stakedOutputTokenAmount'
  | 'rewardTokenEmissionsAmount'
  | 'rewardTokenEmissionsUSD'
  | 'cumulativeDepositCount'
  | 'hourlyDepositCount'
  | 'cumulativeWithdrawCount'
  | 'hourlyWithdrawCount'
  | 'cumulativeSwapCount'
  | 'hourlySwapCount'
  | 'positionCount'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'timestamp'
  | 'blockNumber';

export type Optimism_LiquidityPool_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Optimism_DexAmmProtocol_filter>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol?: InputMaybe<Scalars['String']['input']>;
  symbol_not?: InputMaybe<Scalars['String']['input']>;
  symbol_gt?: InputMaybe<Scalars['String']['input']>;
  symbol_lt?: InputMaybe<Scalars['String']['input']>;
  symbol_gte?: InputMaybe<Scalars['String']['input']>;
  symbol_lte?: InputMaybe<Scalars['String']['input']>;
  symbol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_?: InputMaybe<Optimism_Token_filter>;
  liquidityTokenType?: InputMaybe<Optimism_TokenType>;
  liquidityTokenType_not?: InputMaybe<Optimism_TokenType>;
  liquidityTokenType_in?: InputMaybe<Array<Optimism_TokenType>>;
  liquidityTokenType_not_in?: InputMaybe<Array<Optimism_TokenType>>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Optimism_Token_filter>;
  rewardTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_?: InputMaybe<Optimism_RewardToken_filter>;
  fees?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_not?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_?: InputMaybe<Optimism_LiquidityPoolFee_filter>;
  isSingleSided?: InputMaybe<Scalars['Boolean']['input']>;
  isSingleSided_not?: InputMaybe<Scalars['Boolean']['input']>;
  isSingleSided_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  isSingleSided_not_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  createdTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  activeLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideValuesUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideValuesUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalances?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalancesUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenWeights_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeDepositCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positions_?: InputMaybe<Optimism_Position_filter>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastUpdateTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailySnapshots_?: InputMaybe<Optimism_LiquidityPoolDailySnapshot_filter>;
  hourlySnapshots_?: InputMaybe<Optimism_LiquidityPoolHourlySnapshot_filter>;
  deposits_?: InputMaybe<Optimism_Deposit_filter>;
  withdraws_?: InputMaybe<Optimism_Withdraw_filter>;
  swaps_?: InputMaybe<Optimism_Swap_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_LiquidityPool_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_LiquidityPool_filter>>>;
};

export type Optimism_LiquidityPool_orderBy =
  | 'id'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'name'
  | 'symbol'
  | 'liquidityToken'
  | 'liquidityToken__id'
  | 'liquidityToken__name'
  | 'liquidityToken__symbol'
  | 'liquidityToken__decimals'
  | 'liquidityToken__lastPriceUSD'
  | 'liquidityToken__lastPriceBlockNumber'
  | 'liquidityToken___lastPricePool'
  | 'liquidityToken___totalSupply'
  | 'liquidityToken___totalValueLockedUSD'
  | 'liquidityToken___largePriceChangeBuffer'
  | 'liquidityToken___largeTVLImpactBuffer'
  | 'liquidityTokenType'
  | 'inputTokens'
  | 'rewardTokens'
  | 'fees'
  | 'isSingleSided'
  | 'createdTimestamp'
  | 'createdBlockNumber'
  | 'tick'
  | 'totalValueLockedUSD'
  | 'totalLiquidity'
  | 'totalLiquidityUSD'
  | 'activeLiquidity'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideTokenAmounts'
  | 'uncollectedProtocolSideValuesUSD'
  | 'uncollectedSupplySideTokenAmounts'
  | 'uncollectedSupplySideValuesUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'cumulativeVolumeByTokenAmount'
  | 'cumulativeVolumeByTokenUSD'
  | 'cumulativeVolumeUSD'
  | 'inputTokenBalances'
  | 'inputTokenBalancesUSD'
  | 'inputTokenWeights'
  | 'stakedOutputTokenAmount'
  | 'rewardTokenEmissionsAmount'
  | 'rewardTokenEmissionsUSD'
  | 'cumulativeDepositCount'
  | 'cumulativeWithdrawCount'
  | 'cumulativeSwapCount'
  | 'positions'
  | 'positionCount'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'lastSnapshotDayID'
  | 'lastSnapshotHourID'
  | 'lastUpdateTimestamp'
  | 'lastUpdateBlockNumber'
  | 'dailySnapshots'
  | 'hourlySnapshots'
  | 'deposits'
  | 'withdraws'
  | 'swaps';

export type Optimism_Network =
  | 'ARBITRUM_ONE'
  | 'ARWEAVE_MAINNET'
  | 'AURORA'
  | 'AVALANCHE'
  | 'BASE'
  | 'BOBA'
  | 'BSC'
  | 'CELO'
  | 'COSMOS'
  | 'CRONOS'
  | 'MAINNET'
  | 'FANTOM'
  | 'FUSE'
  | 'HARMONY'
  | 'JUNO'
  | 'MOONBEAM'
  | 'MOONRIVER'
  | 'NEAR_MAINNET'
  | 'OPTIMISM'
  | 'OSMOSIS'
  | 'MATIC'
  | 'XDAI';

/** Defines the order direction, either ascending or descending */
export type Optimism_OrderDirection =
  | 'asc'
  | 'desc';

export type Optimism_Position = {
  /**  { Account address }-{ Market address }-{ Count }  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Account that owns this position  */
  account: Optimism_Account;
  /**  The liquidity pool in which this position was opened  */
  pool: Optimism_LiquidityPool;
  /**  The hash of the transaction that opened this position  */
  hashOpened: Scalars['Optimism_Bytes']['output'];
  /**  The hash of the transaction that closed this position  */
  hashClosed?: Maybe<Scalars['Optimism_Bytes']['output']>;
  /**  Block number of when the position was opened  */
  blockNumberOpened: Scalars['BigInt']['output'];
  /**  Timestamp when the position was opened  */
  timestampOpened: Scalars['BigInt']['output'];
  /**  Block number of when the position was closed (0 if still open)  */
  blockNumberClosed?: Maybe<Scalars['BigInt']['output']>;
  /**  Timestamp when the position was closed (0 if still open)  */
  timestampClosed?: Maybe<Scalars['BigInt']['output']>;
  /**  lower tick of the position  */
  tickLower?: Maybe<Optimism_Tick>;
  /**  upper tick of the position  */
  tickUpper?: Maybe<Optimism_Tick>;
  /**  Token that is to represent ownership of liquidity  */
  liquidityToken?: Maybe<Optimism_Token>;
  /**  Type of token used to track liquidity  */
  liquidityTokenType?: Maybe<Optimism_TokenType>;
  /**  total position liquidity  */
  liquidity: Scalars['BigInt']['output'];
  /**  total position liquidity in USD  */
  liquidityUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  amount of tokens ever deposited to position  */
  cumulativeDepositTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD deposited to position  */
  cumulativeDepositUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  amount of tokens ever withdrawn from position (without fees)  */
  cumulativeWithdrawTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD withdrawn from position (without fees)  */
  cumulativeWithdrawUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Total reward token accumulated under this position, in USD  */
  cumulativeRewardUSD?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Number of deposits related to this position  */
  depositCount: Scalars['Int']['output'];
  /**  All deposit events of this position  */
  deposits: Array<Optimism_Deposit>;
  /**  Number of withdrawals related to this position  */
  withdrawCount: Scalars['Int']['output'];
  /**  All withdraw events of this position  */
  withdraws: Array<Optimism_Withdraw>;
  /**  Position daily snapshots for open positions  */
  snapshots: Array<Optimism_PositionSnapshot>;
};


export type Optimism_PositiondepositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Deposit_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Deposit_filter>;
};


export type Optimism_PositionwithdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Withdraw_filter>;
};


export type Optimism_PositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_PositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_PositionSnapshot_filter>;
};

export type Optimism_PositionSnapshot = {
  /**  { Position ID }-{ Transaction hash }-{ Log index }  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Transaction hash of the transaction that triggered this snapshot  */
  hash: Scalars['Optimism_Bytes']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Nonce of the transaction that triggered this snapshot  */
  nonce: Scalars['BigInt']['output'];
  /**  Position of this snapshot  */
  position: Optimism_Position;
  /**  Type of token used to track liquidity  */
  liquidityTokenType?: Maybe<Optimism_TokenType>;
  /**  total position liquidity  */
  liquidity?: Maybe<Scalars['BigInt']['output']>;
  /**  total position liquidity in USD  */
  liquidityUSD?: Maybe<Scalars['Optimism_BigDecimal']['output']>;
  /**  amount of tokens ever deposited to position  */
  cumulativeDepositTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD deposited to position  */
  cumulativeDepositUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  amount of tokens ever withdrawn from position (without fees)  */
  cumulativeWithdrawTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD withdrawn from position (without fees)  */
  cumulativeWithdrawUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Total reward token accumulated under this position, in native amounts  */
  cumulativeRewardTokenAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Total reward token accumulated under this position, in USD  */
  cumulativeRewardUSD?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Number of deposits related to this position  */
  depositCount: Scalars['Int']['output'];
  /**  Number of withdrawals related to this position  */
  withdrawCount: Scalars['Int']['output'];
  /**  Block number of this snapshot  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this snapshot  */
  timestamp: Scalars['BigInt']['output'];
};

export type Optimism_PositionSnapshot_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  position?: InputMaybe<Scalars['String']['input']>;
  position_not?: InputMaybe<Scalars['String']['input']>;
  position_gt?: InputMaybe<Scalars['String']['input']>;
  position_lt?: InputMaybe<Scalars['String']['input']>;
  position_gte?: InputMaybe<Scalars['String']['input']>;
  position_lte?: InputMaybe<Scalars['String']['input']>;
  position_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_contains?: InputMaybe<Scalars['String']['input']>;
  position_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_contains?: InputMaybe<Scalars['String']['input']>;
  position_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_?: InputMaybe<Optimism_Position_filter>;
  liquidityTokenType?: InputMaybe<Optimism_TokenType>;
  liquidityTokenType_not?: InputMaybe<Optimism_TokenType>;
  liquidityTokenType_in?: InputMaybe<Array<Optimism_TokenType>>;
  liquidityTokenType_not_in?: InputMaybe<Array<Optimism_TokenType>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeDepositTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeDepositUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeDepositUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeDepositUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeDepositUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeDepositUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeWithdrawTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeWithdrawUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeWithdrawUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeWithdrawUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeRewardTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  depositCount?: InputMaybe<Scalars['Int']['input']>;
  depositCount_not?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_PositionSnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_PositionSnapshot_filter>>>;
};

export type Optimism_PositionSnapshot_orderBy =
  | 'id'
  | 'hash'
  | 'logIndex'
  | 'nonce'
  | 'position'
  | 'position__id'
  | 'position__hashOpened'
  | 'position__hashClosed'
  | 'position__blockNumberOpened'
  | 'position__timestampOpened'
  | 'position__blockNumberClosed'
  | 'position__timestampClosed'
  | 'position__liquidityTokenType'
  | 'position__liquidity'
  | 'position__liquidityUSD'
  | 'position__cumulativeDepositUSD'
  | 'position__cumulativeWithdrawUSD'
  | 'position__depositCount'
  | 'position__withdrawCount'
  | 'liquidityTokenType'
  | 'liquidity'
  | 'liquidityUSD'
  | 'cumulativeDepositTokenAmounts'
  | 'cumulativeDepositUSD'
  | 'cumulativeWithdrawTokenAmounts'
  | 'cumulativeWithdrawUSD'
  | 'cumulativeRewardTokenAmounts'
  | 'cumulativeRewardUSD'
  | 'depositCount'
  | 'withdrawCount'
  | 'blockNumber'
  | 'timestamp';

export type Optimism_Position_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Optimism_Account_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Optimism_LiquidityPool_filter>;
  hashOpened?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hashOpened_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hashOpened_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hashOpened_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hashOpened_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hashOpened_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hashOpened_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  hashOpened_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  hashOpened_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hashOpened_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hashClosed?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hashClosed_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hashClosed_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hashClosed_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hashClosed_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hashClosed_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hashClosed_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  hashClosed_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  hashClosed_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hashClosed_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  blockNumberOpened?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumberOpened_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampOpened?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampOpened_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumberClosed?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumberClosed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampClosed?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampClosed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickLower?: InputMaybe<Scalars['String']['input']>;
  tickLower_not?: InputMaybe<Scalars['String']['input']>;
  tickLower_gt?: InputMaybe<Scalars['String']['input']>;
  tickLower_lt?: InputMaybe<Scalars['String']['input']>;
  tickLower_gte?: InputMaybe<Scalars['String']['input']>;
  tickLower_lte?: InputMaybe<Scalars['String']['input']>;
  tickLower_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickLower_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickLower_contains?: InputMaybe<Scalars['String']['input']>;
  tickLower_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_contains?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_?: InputMaybe<Optimism_Tick_filter>;
  tickUpper?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not?: InputMaybe<Scalars['String']['input']>;
  tickUpper_gt?: InputMaybe<Scalars['String']['input']>;
  tickUpper_lt?: InputMaybe<Scalars['String']['input']>;
  tickUpper_gte?: InputMaybe<Scalars['String']['input']>;
  tickUpper_lte?: InputMaybe<Scalars['String']['input']>;
  tickUpper_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickUpper_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickUpper_contains?: InputMaybe<Scalars['String']['input']>;
  tickUpper_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_contains?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_?: InputMaybe<Optimism_Tick_filter>;
  liquidityToken?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_?: InputMaybe<Optimism_Token_filter>;
  liquidityTokenType?: InputMaybe<Optimism_TokenType>;
  liquidityTokenType_not?: InputMaybe<Optimism_TokenType>;
  liquidityTokenType_in?: InputMaybe<Array<Optimism_TokenType>>;
  liquidityTokenType_not_in?: InputMaybe<Array<Optimism_TokenType>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeDepositTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeDepositUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeDepositUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeDepositUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeDepositUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeDepositUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeWithdrawTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeWithdrawUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeWithdrawUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeWithdrawUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeRewardUSD?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  depositCount?: InputMaybe<Scalars['Int']['input']>;
  depositCount_not?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  deposits_?: InputMaybe<Optimism_Deposit_filter>;
  withdrawCount?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdraws_?: InputMaybe<Optimism_Withdraw_filter>;
  snapshots_?: InputMaybe<Optimism_PositionSnapshot_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_Position_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_Position_filter>>>;
};

export type Optimism_Position_orderBy =
  | 'id'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'hashOpened'
  | 'hashClosed'
  | 'blockNumberOpened'
  | 'timestampOpened'
  | 'blockNumberClosed'
  | 'timestampClosed'
  | 'tickLower'
  | 'tickLower__id'
  | 'tickLower__index'
  | 'tickLower__createdTimestamp'
  | 'tickLower__createdBlockNumber'
  | 'tickLower__liquidityGross'
  | 'tickLower__liquidityGrossUSD'
  | 'tickLower__liquidityNet'
  | 'tickLower__liquidityNetUSD'
  | 'tickLower__lastSnapshotDayID'
  | 'tickLower__lastSnapshotHourID'
  | 'tickLower__lastUpdateTimestamp'
  | 'tickLower__lastUpdateBlockNumber'
  | 'tickUpper'
  | 'tickUpper__id'
  | 'tickUpper__index'
  | 'tickUpper__createdTimestamp'
  | 'tickUpper__createdBlockNumber'
  | 'tickUpper__liquidityGross'
  | 'tickUpper__liquidityGrossUSD'
  | 'tickUpper__liquidityNet'
  | 'tickUpper__liquidityNetUSD'
  | 'tickUpper__lastSnapshotDayID'
  | 'tickUpper__lastSnapshotHourID'
  | 'tickUpper__lastUpdateTimestamp'
  | 'tickUpper__lastUpdateBlockNumber'
  | 'liquidityToken'
  | 'liquidityToken__id'
  | 'liquidityToken__name'
  | 'liquidityToken__symbol'
  | 'liquidityToken__decimals'
  | 'liquidityToken__lastPriceUSD'
  | 'liquidityToken__lastPriceBlockNumber'
  | 'liquidityToken___lastPricePool'
  | 'liquidityToken___totalSupply'
  | 'liquidityToken___totalValueLockedUSD'
  | 'liquidityToken___largePriceChangeBuffer'
  | 'liquidityToken___largeTVLImpactBuffer'
  | 'liquidityTokenType'
  | 'liquidity'
  | 'liquidityUSD'
  | 'cumulativeDepositTokenAmounts'
  | 'cumulativeDepositUSD'
  | 'cumulativeWithdrawTokenAmounts'
  | 'cumulativeWithdrawUSD'
  | 'cumulativeRewardUSD'
  | 'depositCount'
  | 'deposits'
  | 'withdrawCount'
  | 'withdraws'
  | 'snapshots';

export type Optimism_Protocol = {
  /**  Smart contract address of the protocol's main contract (Factory, Registry, etc)  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Name of the protocol, including version. e.g. Uniswap v3  */
  name: Scalars['String']['output'];
  /**  Slug of protocol, including version. e.g. uniswap-v3  */
  slug: Scalars['String']['output'];
  /**  Version of the subgraph schema, in SemVer format (e.g. 1.0.0)  */
  schemaVersion: Scalars['String']['output'];
  /**  Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)  */
  subgraphVersion: Scalars['String']['output'];
  /**  Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)  */
  methodologyVersion: Scalars['String']['output'];
  /**  The blockchain network this subgraph is indexing on  */
  network: Optimism_Network;
  /**  The type of protocol (e.g. DEX, Lending, Yield, etc)  */
  type: Optimism_ProtocolType;
  /**  Current TVL (Total Value Locked) of the entire protocol  */
  totalValueLockedUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
  protocolControlledValueUSD?: Maybe<Scalars['Optimism_BigDecimal']['output']>;
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  cumulativeSupplySideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  cumulativeTotalRevenueUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Total number of pools  */
  totalPoolCount: Scalars['Int']['output'];
  /**  Daily usage metrics for this protocol  */
  dailyUsageMetrics: Array<Optimism_UsageMetricsDailySnapshot>;
  /**  Hourly usage metrics for this protocol  */
  hourlyUsageMetrics: Array<Optimism_UsageMetricsHourlySnapshot>;
  /**  Daily financial metrics for this protocol  */
  financialMetrics: Array<Optimism_FinancialsDailySnapshot>;
};


export type Optimism_ProtocoldailyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_UsageMetricsDailySnapshot_filter>;
};


export type Optimism_ProtocolhourlyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_UsageMetricsHourlySnapshot_filter>;
};


export type Optimism_ProtocolfinancialMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_FinancialsDailySnapshot_filter>;
};

export type Optimism_ProtocolType =
  | 'EXCHANGE'
  | 'LENDING'
  | 'YIELD'
  | 'BRIDGE'
  | 'GENERIC';

export type Optimism_Protocol_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  slug_not?: InputMaybe<Scalars['String']['input']>;
  slug_gt?: InputMaybe<Scalars['String']['input']>;
  slug_lt?: InputMaybe<Scalars['String']['input']>;
  slug_gte?: InputMaybe<Scalars['String']['input']>;
  slug_lte?: InputMaybe<Scalars['String']['input']>;
  slug_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  slug_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  network?: InputMaybe<Optimism_Network>;
  network_not?: InputMaybe<Optimism_Network>;
  network_in?: InputMaybe<Array<Optimism_Network>>;
  network_not_in?: InputMaybe<Array<Optimism_Network>>;
  type?: InputMaybe<Optimism_ProtocolType>;
  type_not?: InputMaybe<Optimism_ProtocolType>;
  type_in?: InputMaybe<Array<Optimism_ProtocolType>>;
  type_not_in?: InputMaybe<Array<Optimism_ProtocolType>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  protocolControlledValueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_not?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyUsageMetrics_?: InputMaybe<Optimism_UsageMetricsDailySnapshot_filter>;
  hourlyUsageMetrics_?: InputMaybe<Optimism_UsageMetricsHourlySnapshot_filter>;
  financialMetrics_?: InputMaybe<Optimism_FinancialsDailySnapshot_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_Protocol_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_Protocol_filter>>>;
};

export type Optimism_Protocol_orderBy =
  | 'id'
  | 'name'
  | 'slug'
  | 'schemaVersion'
  | 'subgraphVersion'
  | 'methodologyVersion'
  | 'network'
  | 'type'
  | 'totalValueLockedUSD'
  | 'protocolControlledValueUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'cumulativeUniqueUsers'
  | 'totalPoolCount'
  | 'dailyUsageMetrics'
  | 'hourlyUsageMetrics'
  | 'financialMetrics';

export type Optimism_RewardToken = {
  /**  { Reward token type }-{ Smart contract address of the reward token }  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Reference to the actual token  */
  token: Optimism_Token;
  /**  The type of the reward token  */
  type: Optimism_RewardTokenType;
};

export type Optimism_RewardTokenType =
  /**  For reward tokens awarded to LPs/lenders  */
  | 'DEPOSIT'
  /**  For reward tokens awarded to borrowers  */
  | 'BORROW';

export type Optimism_RewardToken_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  token?: InputMaybe<Scalars['String']['input']>;
  token_not?: InputMaybe<Scalars['String']['input']>;
  token_gt?: InputMaybe<Scalars['String']['input']>;
  token_lt?: InputMaybe<Scalars['String']['input']>;
  token_gte?: InputMaybe<Scalars['String']['input']>;
  token_lte?: InputMaybe<Scalars['String']['input']>;
  token_in?: InputMaybe<Array<Scalars['String']['input']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  token_contains?: InputMaybe<Scalars['String']['input']>;
  token_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  token_not_contains?: InputMaybe<Scalars['String']['input']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  token_starts_with?: InputMaybe<Scalars['String']['input']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_ends_with?: InputMaybe<Scalars['String']['input']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_?: InputMaybe<Optimism_Token_filter>;
  type?: InputMaybe<Optimism_RewardTokenType>;
  type_not?: InputMaybe<Optimism_RewardTokenType>;
  type_in?: InputMaybe<Array<Optimism_RewardTokenType>>;
  type_not_in?: InputMaybe<Array<Optimism_RewardTokenType>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_RewardToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_RewardToken_filter>>>;
};

export type Optimism_RewardToken_orderBy =
  | 'id'
  | 'token'
  | 'token__id'
  | 'token__name'
  | 'token__symbol'
  | 'token__decimals'
  | 'token__lastPriceUSD'
  | 'token__lastPriceBlockNumber'
  | 'token___lastPricePool'
  | 'token___totalSupply'
  | 'token___totalValueLockedUSD'
  | 'token___largePriceChangeBuffer'
  | 'token___largeTVLImpactBuffer'
  | 'type';

export type Optimism_Swap = {
  /**  { Transaction hash }-{ Log index }  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Transaction hash of the transaction that emitted this event  */
  hash: Scalars['Optimism_Bytes']['output'];
  /**  Nonce of the transaction that emitted this event  */
  nonce: Scalars['BigInt']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Gas limit of the transaction that emitted this event  */
  gasLimit?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas used in this transaction. (Optional because not every chain will support this)  */
  gasUsed?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas price of the transaction that emitted this event  */
  gasPrice?: Maybe<Scalars['BigInt']['output']>;
  /**  The protocol this transaction belongs to  */
  protocol: Optimism_DexAmmProtocol;
  /**  Account that emitted this event  */
  account: Optimism_Account;
  /**  The pool involving this event  */
  pool: Optimism_LiquidityPool;
  /**  Block number of this event  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this event  */
  timestamp: Scalars['BigInt']['output'];
  /**  the tick after the swap  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Token deposited into pool  */
  tokenIn: Optimism_Token;
  /**  Amount of token deposited into pool in native units  */
  amountIn: Scalars['BigInt']['output'];
  /**  Amount of token deposited into pool in USD  */
  amountInUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Token withdrawn from pool  */
  tokenOut: Optimism_Token;
  /**  Amount of token withdrawn from pool in native units  */
  amountOut: Scalars['BigInt']['output'];
  /**  Amount of token withdrawn from pool in USD  */
  amountOutUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Amount of input tokens in the liquidity pool  */
  reserveAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
};

export type Optimism_Swap_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Optimism_DexAmmProtocol_filter>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Optimism_Account_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Optimism_LiquidityPool_filter>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tokenIn?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not?: InputMaybe<Scalars['String']['input']>;
  tokenIn_gt?: InputMaybe<Scalars['String']['input']>;
  tokenIn_lt?: InputMaybe<Scalars['String']['input']>;
  tokenIn_gte?: InputMaybe<Scalars['String']['input']>;
  tokenIn_lte?: InputMaybe<Scalars['String']['input']>;
  tokenIn_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenIn_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenIn_contains?: InputMaybe<Scalars['String']['input']>;
  tokenIn_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_contains?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_?: InputMaybe<Optimism_Token_filter>;
  amountIn?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_not?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_gt?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_lt?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_gte?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_lte?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountIn_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountInUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountInUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountInUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountInUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountInUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountInUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountInUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  amountInUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  tokenOut?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not?: InputMaybe<Scalars['String']['input']>;
  tokenOut_gt?: InputMaybe<Scalars['String']['input']>;
  tokenOut_lt?: InputMaybe<Scalars['String']['input']>;
  tokenOut_gte?: InputMaybe<Scalars['String']['input']>;
  tokenOut_lte?: InputMaybe<Scalars['String']['input']>;
  tokenOut_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenOut_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenOut_contains?: InputMaybe<Scalars['String']['input']>;
  tokenOut_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_contains?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_?: InputMaybe<Optimism_Token_filter>;
  amountOut?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_not?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_gt?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_lt?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_gte?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_lte?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountOut_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountOutUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountOutUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountOutUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountOutUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountOutUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountOutUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountOutUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  amountOutUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  reserveAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_Swap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_Swap_filter>>>;
};

export type Optimism_Swap_orderBy =
  | 'id'
  | 'hash'
  | 'nonce'
  | 'logIndex'
  | 'gasLimit'
  | 'gasUsed'
  | 'gasPrice'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'blockNumber'
  | 'timestamp'
  | 'tick'
  | 'tokenIn'
  | 'tokenIn__id'
  | 'tokenIn__name'
  | 'tokenIn__symbol'
  | 'tokenIn__decimals'
  | 'tokenIn__lastPriceUSD'
  | 'tokenIn__lastPriceBlockNumber'
  | 'tokenIn___lastPricePool'
  | 'tokenIn___totalSupply'
  | 'tokenIn___totalValueLockedUSD'
  | 'tokenIn___largePriceChangeBuffer'
  | 'tokenIn___largeTVLImpactBuffer'
  | 'amountIn'
  | 'amountInUSD'
  | 'tokenOut'
  | 'tokenOut__id'
  | 'tokenOut__name'
  | 'tokenOut__symbol'
  | 'tokenOut__decimals'
  | 'tokenOut__lastPriceUSD'
  | 'tokenOut__lastPriceBlockNumber'
  | 'tokenOut___lastPricePool'
  | 'tokenOut___totalSupply'
  | 'tokenOut___totalValueLockedUSD'
  | 'tokenOut___largePriceChangeBuffer'
  | 'tokenOut___largeTVLImpactBuffer'
  | 'amountOut'
  | 'amountOutUSD'
  | 'reserveAmounts';

export type Optimism_Tick = {
  /**  { pool address }-{ tick index }  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  tick index  */
  index: Scalars['BigInt']['output'];
  /**  Liquidity pool this tick belongs to  */
  pool: Optimism_LiquidityPool;
  /**  Creation timestamp  */
  createdTimestamp: Scalars['BigInt']['output'];
  /**  Creation block number  */
  createdBlockNumber: Scalars['BigInt']['output'];
  /**  calculated price of token0 of tick within this pool - constant  */
  prices: Array<Scalars['Optimism_BigDecimal']['output']>;
  /**  total liquidity pool has as tick lower or upper  */
  liquidityGross: Scalars['BigInt']['output'];
  /**  total liquidity in USD pool has as tick lower or upper  */
  liquidityGrossUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  how much liquidity changes when tick crossed  */
  liquidityNet: Scalars['BigInt']['output'];
  /**  how much liquidity in USD changes when tick crossed  */
  liquidityNetUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Day ID of the most recent daily snapshot  */
  lastSnapshotDayID: Scalars['Int']['output'];
  /**  Hour ID of the most recent hourly snapshot  */
  lastSnapshotHourID: Scalars['Int']['output'];
  /**  Timestamp of the last time this entity was updated  */
  lastUpdateTimestamp: Scalars['BigInt']['output'];
  /**  Block number of the last time this entity was updated  */
  lastUpdateBlockNumber: Scalars['BigInt']['output'];
};

export type Optimism_TickDailySnapshot = {
  /**  { pool address }-{ tick index }-{ day ID }  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  tick index  */
  tick: Optimism_Tick;
  /**  liquidity pool this tick belongs to  */
  pool: Optimism_LiquidityPool;
  /**  total liquidity pool has as tick lower or upper  */
  liquidityGross: Scalars['BigInt']['output'];
  /**  total liquidity in USD pool has as tick lower or upper  */
  liquidityGrossUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  how much liquidity changes when tick crossed  */
  liquidityNet: Scalars['BigInt']['output'];
  /**  how much liquidity in USD changes when tick crossed  */
  liquidityNetUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Optimism_TickDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  tick?: InputMaybe<Scalars['String']['input']>;
  tick_not?: InputMaybe<Scalars['String']['input']>;
  tick_gt?: InputMaybe<Scalars['String']['input']>;
  tick_lt?: InputMaybe<Scalars['String']['input']>;
  tick_gte?: InputMaybe<Scalars['String']['input']>;
  tick_lte?: InputMaybe<Scalars['String']['input']>;
  tick_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_contains?: InputMaybe<Scalars['String']['input']>;
  tick_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_?: InputMaybe<Optimism_Tick_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Optimism_LiquidityPool_filter>;
  liquidityGross?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGross_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGrossUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  liquidityGrossUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  liquidityNet?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNet_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNetUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  liquidityNetUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_TickDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_TickDailySnapshot_filter>>>;
};

export type Optimism_TickDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'tick'
  | 'tick__id'
  | 'tick__index'
  | 'tick__createdTimestamp'
  | 'tick__createdBlockNumber'
  | 'tick__liquidityGross'
  | 'tick__liquidityGrossUSD'
  | 'tick__liquidityNet'
  | 'tick__liquidityNetUSD'
  | 'tick__lastSnapshotDayID'
  | 'tick__lastSnapshotHourID'
  | 'tick__lastUpdateTimestamp'
  | 'tick__lastUpdateBlockNumber'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'liquidityGross'
  | 'liquidityGrossUSD'
  | 'liquidityNet'
  | 'liquidityNetUSD'
  | 'timestamp'
  | 'blockNumber';

export type Optimism_TickHourlySnapshot = {
  /**  { pool address }-{ tick index }-{ hour ID }  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Number of hours since Unix epoch time  */
  hour: Scalars['Int']['output'];
  /**  tick index  */
  tick: Optimism_Tick;
  /**  liquidity pool this tick belongs to  */
  pool: Optimism_LiquidityPool;
  /**  total liquidity pool has as tick lower or upper  */
  liquidityGross: Scalars['BigInt']['output'];
  /**  total liquidity in USD pool has as tick lower or upper  */
  liquidityGrossUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  how much liquidity changes when tick crossed  */
  liquidityNet: Scalars['BigInt']['output'];
  /**  how much liquidity in USD changes when tick crossed  */
  liquidityNetUSD: Scalars['Optimism_BigDecimal']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Optimism_TickHourlySnapshot_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hour?: InputMaybe<Scalars['Int']['input']>;
  hour_not?: InputMaybe<Scalars['Int']['input']>;
  hour_gt?: InputMaybe<Scalars['Int']['input']>;
  hour_lt?: InputMaybe<Scalars['Int']['input']>;
  hour_gte?: InputMaybe<Scalars['Int']['input']>;
  hour_lte?: InputMaybe<Scalars['Int']['input']>;
  hour_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hour_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  tick?: InputMaybe<Scalars['String']['input']>;
  tick_not?: InputMaybe<Scalars['String']['input']>;
  tick_gt?: InputMaybe<Scalars['String']['input']>;
  tick_lt?: InputMaybe<Scalars['String']['input']>;
  tick_gte?: InputMaybe<Scalars['String']['input']>;
  tick_lte?: InputMaybe<Scalars['String']['input']>;
  tick_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_contains?: InputMaybe<Scalars['String']['input']>;
  tick_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_?: InputMaybe<Optimism_Tick_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Optimism_LiquidityPool_filter>;
  liquidityGross?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGross_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGrossUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  liquidityGrossUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  liquidityNet?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNet_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNetUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  liquidityNetUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_TickHourlySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_TickHourlySnapshot_filter>>>;
};

export type Optimism_TickHourlySnapshot_orderBy =
  | 'id'
  | 'hour'
  | 'tick'
  | 'tick__id'
  | 'tick__index'
  | 'tick__createdTimestamp'
  | 'tick__createdBlockNumber'
  | 'tick__liquidityGross'
  | 'tick__liquidityGrossUSD'
  | 'tick__liquidityNet'
  | 'tick__liquidityNetUSD'
  | 'tick__lastSnapshotDayID'
  | 'tick__lastSnapshotHourID'
  | 'tick__lastUpdateTimestamp'
  | 'tick__lastUpdateBlockNumber'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'liquidityGross'
  | 'liquidityGrossUSD'
  | 'liquidityNet'
  | 'liquidityNetUSD'
  | 'timestamp'
  | 'blockNumber';

export type Optimism_Tick_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  index?: InputMaybe<Scalars['BigInt']['input']>;
  index_not?: InputMaybe<Scalars['BigInt']['input']>;
  index_gt?: InputMaybe<Scalars['BigInt']['input']>;
  index_lt?: InputMaybe<Scalars['BigInt']['input']>;
  index_gte?: InputMaybe<Scalars['BigInt']['input']>;
  index_lte?: InputMaybe<Scalars['BigInt']['input']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Optimism_LiquidityPool_filter>;
  createdTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  prices?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  prices_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  prices_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  prices_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  prices_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  prices_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  liquidityGross?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGross_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGrossUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityGrossUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  liquidityGrossUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  liquidityNet?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNet_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNetUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  liquidityNetUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  liquidityNetUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  lastSnapshotDayID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastUpdateTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_Tick_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_Tick_filter>>>;
};

export type Optimism_Tick_orderBy =
  | 'id'
  | 'index'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'createdTimestamp'
  | 'createdBlockNumber'
  | 'prices'
  | 'liquidityGross'
  | 'liquidityGrossUSD'
  | 'liquidityNet'
  | 'liquidityNetUSD'
  | 'lastSnapshotDayID'
  | 'lastSnapshotHourID'
  | 'lastUpdateTimestamp'
  | 'lastUpdateBlockNumber';

export type Optimism_Token = {
  /**  Smart contract address of the token  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Name of the token, mirrored from the smart contract  */
  name: Scalars['String']['output'];
  /**  Symbol of the token, mirrored from the smart contract  */
  symbol: Scalars['String']['output'];
  /**  The number of decimal places this token uses, default to 18  */
  decimals: Scalars['Int']['output'];
  /**  Optional field to track the price of a token, mostly for caching purposes  */
  lastPriceUSD?: Maybe<Scalars['Optimism_BigDecimal']['output']>;
  /**  Optional field to track the block number of the last token price  */
  lastPriceBlockNumber?: Maybe<Scalars['BigInt']['output']>;
  /**  last pool that gave this token a price  */
  _lastPricePool?: Maybe<Scalars['Optimism_Bytes']['output']>;
  /**  amount of tokens in the protocol  */
  _totalSupply: Scalars['BigInt']['output'];
  /**  Total value locked in the protocol  */
  _totalValueLockedUSD: Scalars['Optimism_BigDecimal']['output'];
  _largePriceChangeBuffer: Scalars['Int']['output'];
  _largeTVLImpactBuffer: Scalars['Int']['output'];
};

export type Optimism_TokenType =
  | 'MULTIPLE'
  | 'UNKNOWN'
  | 'ERC20'
  | 'ERC721'
  | 'ERC1155'
  | 'BEP20'
  | 'BEP721'
  | 'BEP1155';

export type Optimism_Token_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol?: InputMaybe<Scalars['String']['input']>;
  symbol_not?: InputMaybe<Scalars['String']['input']>;
  symbol_gt?: InputMaybe<Scalars['String']['input']>;
  symbol_lt?: InputMaybe<Scalars['String']['input']>;
  symbol_gte?: InputMaybe<Scalars['String']['input']>;
  symbol_lte?: InputMaybe<Scalars['String']['input']>;
  symbol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  decimals?: InputMaybe<Scalars['Int']['input']>;
  decimals_not?: InputMaybe<Scalars['Int']['input']>;
  decimals_gt?: InputMaybe<Scalars['Int']['input']>;
  decimals_lt?: InputMaybe<Scalars['Int']['input']>;
  decimals_gte?: InputMaybe<Scalars['Int']['input']>;
  decimals_lte?: InputMaybe<Scalars['Int']['input']>;
  decimals_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastPriceUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  lastPriceUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  lastPriceUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  lastPriceUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  lastPriceUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  lastPriceUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  lastPriceUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  lastPriceUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  lastPriceBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastPriceBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  _lastPricePool?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  _lastPricePool_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  _lastPricePool_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  _lastPricePool_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  _lastPricePool_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  _lastPricePool_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  _lastPricePool_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  _lastPricePool_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  _lastPricePool_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  _lastPricePool_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  _totalSupply?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_not?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_gt?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_lt?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_gte?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_lte?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  _totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  _totalValueLockedUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  _totalValueLockedUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  _totalValueLockedUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  _totalValueLockedUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  _totalValueLockedUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  _totalValueLockedUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  _totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  _totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  _largePriceChangeBuffer?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_not?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_gt?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_lt?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_gte?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_lte?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  _largePriceChangeBuffer_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  _largeTVLImpactBuffer?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_not?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_gt?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_lt?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_gte?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_lte?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  _largeTVLImpactBuffer_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_Token_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_Token_filter>>>;
};

export type Optimism_Token_orderBy =
  | 'id'
  | 'name'
  | 'symbol'
  | 'decimals'
  | 'lastPriceUSD'
  | 'lastPriceBlockNumber'
  | '_lastPricePool'
  | '_totalSupply'
  | '_totalValueLockedUSD'
  | '_largePriceChangeBuffer'
  | '_largeTVLImpactBuffer';

export type Optimism_UsageMetricsDailySnapshot = {
  /**  ID is # of days since Unix epoch time  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  Protocol this snapshot is associated with  */
  protocol: Optimism_DexAmmProtocol;
  /**  Number of unique daily active users  */
  dailyActiveUsers: Scalars['Int']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface.  */
  dailyTransactionCount: Scalars['Int']['output'];
  /**  Total number of pools  */
  totalPoolCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in an day  */
  dailyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in an day  */
  dailyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in an day  */
  dailySwapCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Optimism_UsageMetricsDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Optimism_DexAmmProtocol_filter>;
  dailyActiveUsers?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_not?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyActiveUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyTransactionCount?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyTransactionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_not?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_UsageMetricsDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_UsageMetricsDailySnapshot_filter>>>;
};

export type Optimism_UsageMetricsDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'dailyActiveUsers'
  | 'cumulativeUniqueUsers'
  | 'dailyTransactionCount'
  | 'totalPoolCount'
  | 'dailyDepositCount'
  | 'dailyWithdrawCount'
  | 'dailySwapCount'
  | 'timestamp'
  | 'blockNumber';

export type Optimism_UsageMetricsHourlySnapshot = {
  /**  { # of hours since Unix epoch time }  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Number of hours since Unix epoch time  */
  hour: Scalars['Int']['output'];
  /**  Protocol this snapshot is associated with  */
  protocol: Optimism_DexAmmProtocol;
  /**  Number of unique hourly active users  */
  hourlyActiveUsers: Scalars['Int']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.  */
  hourlyTransactionCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in an hour  */
  hourlyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in an hour  */
  hourlyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in an hour  */
  hourlySwapCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Optimism_UsageMetricsHourlySnapshot_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hour?: InputMaybe<Scalars['Int']['input']>;
  hour_not?: InputMaybe<Scalars['Int']['input']>;
  hour_gt?: InputMaybe<Scalars['Int']['input']>;
  hour_lt?: InputMaybe<Scalars['Int']['input']>;
  hour_gte?: InputMaybe<Scalars['Int']['input']>;
  hour_lte?: InputMaybe<Scalars['Int']['input']>;
  hour_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hour_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Optimism_DexAmmProtocol_filter>;
  hourlyActiveUsers?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyActiveUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyTransactionCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyTransactionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_UsageMetricsHourlySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_UsageMetricsHourlySnapshot_filter>>>;
};

export type Optimism_UsageMetricsHourlySnapshot_orderBy =
  | 'id'
  | 'hour'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'hourlyActiveUsers'
  | 'cumulativeUniqueUsers'
  | 'hourlyTransactionCount'
  | 'hourlyDepositCount'
  | 'hourlyWithdrawCount'
  | 'hourlySwapCount'
  | 'timestamp'
  | 'blockNumber';

export type Optimism_Withdraw = {
  /**  { Transaction hash }-{ Log index } */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Transaction hash of the transaction that emitted this event  */
  hash: Scalars['Optimism_Bytes']['output'];
  /**  Nonce of the transaction that emitted this event  */
  nonce: Scalars['BigInt']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Gas limit of the transaction that emitted this event  */
  gasLimit?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas used in this transaction. (Optional because not every chain will support this)  */
  gasUsed?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas price of the transaction that emitted this event  */
  gasPrice?: Maybe<Scalars['BigInt']['output']>;
  /**  The protocol this transaction belongs to  */
  protocol: Optimism_DexAmmProtocol;
  /**  Account that emitted this event  */
  account: Optimism_Account;
  /**  The user position changed by this event  */
  position?: Maybe<Optimism_Position>;
  /**  lower tick of position  */
  tickLower?: Maybe<Scalars['BigInt']['output']>;
  /**  upper tick of position  */
  tickUpper?: Maybe<Scalars['BigInt']['output']>;
  /**  The pool involving this event  */
  pool: Optimism_LiquidityPool;
  /**  Block number of this event  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this event  */
  timestamp: Scalars['BigInt']['output'];
  /**  Amount of liquidity burned  */
  liquidity: Scalars['BigInt']['output'];
  /**  Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool  */
  inputTokens: Array<Optimism_Token>;
  /**  Amount of input tokens in the token's native unit  */
  inputTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in the liquidity pool  */
  reserveAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool)  */
  amountUSD: Scalars['Optimism_BigDecimal']['output'];
};


export type Optimism_WithdrawinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Token_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Token_filter>;
};

export type Optimism_Withdraw_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Optimism_DexAmmProtocol_filter>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Optimism_Account_filter>;
  position?: InputMaybe<Scalars['String']['input']>;
  position_not?: InputMaybe<Scalars['String']['input']>;
  position_gt?: InputMaybe<Scalars['String']['input']>;
  position_lt?: InputMaybe<Scalars['String']['input']>;
  position_gte?: InputMaybe<Scalars['String']['input']>;
  position_lte?: InputMaybe<Scalars['String']['input']>;
  position_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_contains?: InputMaybe<Scalars['String']['input']>;
  position_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_contains?: InputMaybe<Scalars['String']['input']>;
  position_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_?: InputMaybe<Optimism_Position_filter>;
  tickLower?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickLower_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Optimism_LiquidityPool_filter>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Optimism_Token_filter>;
  inputTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountUSD?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountUSD_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountUSD_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountUSD_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountUSD_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountUSD_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  amountUSD_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism_Withdraw_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism_Withdraw_filter>>>;
};

export type Optimism_Withdraw_orderBy =
  | 'id'
  | 'hash'
  | 'nonce'
  | 'logIndex'
  | 'gasLimit'
  | 'gasUsed'
  | 'gasPrice'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'position'
  | 'position__id'
  | 'position__hashOpened'
  | 'position__hashClosed'
  | 'position__blockNumberOpened'
  | 'position__timestampOpened'
  | 'position__blockNumberClosed'
  | 'position__timestampClosed'
  | 'position__liquidityTokenType'
  | 'position__liquidity'
  | 'position__liquidityUSD'
  | 'position__cumulativeDepositUSD'
  | 'position__cumulativeWithdrawUSD'
  | 'position__depositCount'
  | 'position__withdrawCount'
  | 'tickLower'
  | 'tickUpper'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'blockNumber'
  | 'timestamp'
  | 'liquidity'
  | 'inputTokens'
  | 'inputTokenAmounts'
  | 'reserveAmounts'
  | 'amountUSD';

export type Optimism__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['Optimism_Bytes']['output']>;
  /** The block number */
  number: Scalars['Int']['output'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']['output']>;
  /** The hash of the parent block */
  parentHash?: Maybe<Scalars['Optimism_Bytes']['output']>;
};

/**   Used to keep track of the price of Ether/TVL in USD, pool deposit count, and total unique users  */
export type Optimism__HelperStore = {
  id: Scalars['Optimism_Bytes']['output'];
  /**  Token Prices  */
  valueDecimalList?: Maybe<Array<Scalars['Optimism_BigDecimal']['output']>>;
  /**  price of ETH/TVL in USD  */
  valueDecimal?: Maybe<Scalars['Optimism_BigDecimal']['output']>;
  /**  # of deposits, # of unique users  */
  valueInt?: Maybe<Scalars['Int']['output']>;
};

export type Optimism__HelperStore_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  valueDecimalList?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  valueDecimalList_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  valueDecimalList_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  valueDecimalList_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  valueDecimalList_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  valueDecimalList_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  valueDecimal?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  valueDecimal_not?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  valueDecimal_gt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  valueDecimal_lt?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  valueDecimal_gte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  valueDecimal_lte?: InputMaybe<Scalars['Optimism_BigDecimal']['input']>;
  valueDecimal_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  valueDecimal_not_in?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  valueInt?: InputMaybe<Scalars['Int']['input']>;
  valueInt_not?: InputMaybe<Scalars['Int']['input']>;
  valueInt_gt?: InputMaybe<Scalars['Int']['input']>;
  valueInt_lt?: InputMaybe<Scalars['Int']['input']>;
  valueInt_gte?: InputMaybe<Scalars['Int']['input']>;
  valueInt_lte?: InputMaybe<Scalars['Int']['input']>;
  valueInt_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  valueInt_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism__HelperStore_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism__HelperStore_filter>>>;
};

export type Optimism__HelperStore_orderBy =
  | 'id'
  | 'valueDecimalList'
  | 'valueDecimal'
  | 'valueInt';

export type Optimism__LiquidityPoolAmount = {
  /**  Smart contract address of the pool  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool  */
  inputTokens: Array<Optimism_Token>;
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['Optimism_BigDecimal']['output']>;
  tokenPrices: Array<Scalars['Optimism_BigDecimal']['output']>;
};


export type Optimism__LiquidityPoolAmountinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_Token_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_Token_filter>;
};

export type Optimism__LiquidityPoolAmount_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Optimism_Token_filter>;
  inputTokenBalances?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  tokenPrices?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  tokenPrices_not?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  tokenPrices_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  tokenPrices_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  tokenPrices_not_contains?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  tokenPrices_not_contains_nocase?: InputMaybe<Array<Scalars['Optimism_BigDecimal']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism__LiquidityPoolAmount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism__LiquidityPoolAmount_filter>>>;
};

export type Optimism__LiquidityPoolAmount_orderBy =
  | 'id'
  | 'inputTokens'
  | 'inputTokenBalances'
  | 'tokenPrices';

/** The type for the top-level _meta field */
export type Optimism__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: Optimism__Block_;
  /** The deployment ID */
  deployment: Scalars['String']['output'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean']['output'];
};

export type Optimism__SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

/**  This is used to keep tract of the derived price of tokens in ethereum and the whitelisted pools to which it belongs */
export type Optimism__TokenWhitelist = {
  /**  Token Address  */
  id: Scalars['Optimism_Bytes']['output'];
  /**  pools token is in that are white listed for USD pricing  */
  whitelistPools: Array<Optimism_LiquidityPool>;
};


/**  This is used to keep tract of the derived price of tokens in ethereum and the whitelisted pools to which it belongs */
export type Optimism__TokenWhitelistwhitelistPoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Optimism_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Optimism_OrderDirection>;
  where?: InputMaybe<Optimism_LiquidityPool_filter>;
};

export type Optimism__TokenWhitelistSymbol = {
  /**  Whitelist Token Symbol  */
  id: Scalars['ID']['output'];
  /**  Whitelist Token Address */
  address: Scalars['Optimism_Bytes']['output'];
};

export type Optimism__TokenWhitelistSymbol_filter = {
  id?: InputMaybe<Scalars['ID']['input']>;
  id_not?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  address?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  address_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  address_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  address_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  address_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  address_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  address_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  address_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  address_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  address_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism__TokenWhitelistSymbol_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism__TokenWhitelistSymbol_filter>>>;
};

export type Optimism__TokenWhitelistSymbol_orderBy =
  | 'id'
  | 'address';

export type Optimism__TokenWhitelist_filter = {
  id?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Optimism_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Optimism_Bytes']['input']>;
  whitelistPools?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_not?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_?: InputMaybe<Optimism_LiquidityPool_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Optimism__TokenWhitelist_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Optimism__TokenWhitelist_filter>>>;
};

export type Optimism__TokenWhitelist_orderBy =
  | 'id'
  | 'whitelistPools';

export type Arbitrum_Account = {
  /**  { Account address }  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Number of positions this account has  */
  positionCount: Scalars['Int']['output'];
  /**  All positions that belong to this account  */
  positions: Array<Arbitrum_Position>;
  /**  Number of open positions this account has  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions this account has  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Number of deposits this account made  */
  depositCount: Scalars['Int']['output'];
  /**  All deposit events of this account  */
  deposits: Array<Arbitrum_Deposit>;
  /**  Number of withdrawals this account made  */
  withdrawCount: Scalars['Int']['output'];
  /**  All withdraw events of this account  */
  withdraws: Array<Arbitrum_Withdraw>;
  /**  Number of times this account has traded/swapped */
  swapCount: Scalars['Int']['output'];
  /**  All swap events of this account  */
  swaps: Array<Arbitrum_Swap>;
};


export type Arbitrum_AccountpositionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Position_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Position_filter>;
};


export type Arbitrum_AccountdepositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Deposit_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Deposit_filter>;
};


export type Arbitrum_AccountwithdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Withdraw_filter>;
};


export type Arbitrum_AccountswapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Swap_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Swap_filter>;
};

export type Arbitrum_Account_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positions_?: InputMaybe<Arbitrum_Position_filter>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount?: InputMaybe<Scalars['Int']['input']>;
  depositCount_not?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  deposits_?: InputMaybe<Arbitrum_Deposit_filter>;
  withdrawCount?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdraws_?: InputMaybe<Arbitrum_Withdraw_filter>;
  swapCount?: InputMaybe<Scalars['Int']['input']>;
  swapCount_not?: InputMaybe<Scalars['Int']['input']>;
  swapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  swapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  swapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  swapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  swapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  swaps_?: InputMaybe<Arbitrum_Swap_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_Account_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_Account_filter>>>;
};

export type Arbitrum_Account_orderBy =
  | 'id'
  | 'positionCount'
  | 'positions'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'depositCount'
  | 'deposits'
  | 'withdrawCount'
  | 'withdraws'
  | 'swapCount'
  | 'swaps';

export type Arbitrum_ActiveAccount = {
  /**  { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch }  */
  id: Scalars['Arbitrum_Bytes']['output'];
};

export type Arbitrum_ActiveAccount_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_ActiveAccount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_ActiveAccount_filter>>>;
};

export type Arbitrum_ActiveAccount_orderBy =
  | 'id';

export type Arbitrum_Aggregation_interval =
  | 'hour'
  | 'day';

export type Arbitrum_BlockChangedFilter = {
  number_gte: Scalars['Int']['input'];
};

export type Arbitrum_Block_height = {
  hash?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  number_gte?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * An event is any user action that occurs in a protocol. Generally, they are Ethereum events
 * emitted by a function in the smart contracts, stored in transaction receipts as event logs.
 * However, some user actions of interest are function calls that don't emit events. For example,
 * the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
 * store them as events, although they are not technically Ethereum events emitted by smart
 * contracts.
 *
 */
export type Arbitrum_Deposit = {
  /**  { Transaction hash }-{ Log index }  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Transaction hash of the transaction that emitted this event  */
  hash: Scalars['Arbitrum_Bytes']['output'];
  /**  Nonce of the transaction that emitted this event  */
  nonce: Scalars['BigInt']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Gas limit of the transaction that emitted this event  */
  gasLimit?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas used in this transaction. (Optional because not every chain will support this)  */
  gasUsed?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas price of the transaction that emitted this event  */
  gasPrice?: Maybe<Scalars['BigInt']['output']>;
  /**  The protocol this transaction belongs to  */
  protocol: Arbitrum_DexAmmProtocol;
  /**  Account that emitted this event  */
  account: Arbitrum_Account;
  /**  The user position changed by this event  */
  position?: Maybe<Arbitrum_Position>;
  /**  The pool involving this event  */
  pool: Arbitrum_LiquidityPool;
  /**  lower tick of position  */
  tickLower?: Maybe<Scalars['BigInt']['output']>;
  /**  upper tick of position  */
  tickUpper?: Maybe<Scalars['BigInt']['output']>;
  /**  Block number of this event  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this event  */
  timestamp: Scalars['BigInt']['output'];
  /**  Amount of liquidity minted  */
  liquidity: Scalars['BigInt']['output'];
  /**  Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool  */
  inputTokens: Array<Arbitrum_Token>;
  /**  Amount of input tokens in the token's native unit  */
  inputTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in the liquidity pool  */
  reserveAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool)  */
  amountUSD: Scalars['Arbitrum_BigDecimal']['output'];
};


/**
 * An event is any user action that occurs in a protocol. Generally, they are Ethereum events
 * emitted by a function in the smart contracts, stored in transaction receipts as event logs.
 * However, some user actions of interest are function calls that don't emit events. For example,
 * the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
 * store them as events, although they are not technically Ethereum events emitted by smart
 * contracts.
 *
 */
export type Arbitrum_DepositinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Token_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Token_filter>;
};

export type Arbitrum_Deposit_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Arbitrum_DexAmmProtocol_filter>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Arbitrum_Account_filter>;
  position?: InputMaybe<Scalars['String']['input']>;
  position_not?: InputMaybe<Scalars['String']['input']>;
  position_gt?: InputMaybe<Scalars['String']['input']>;
  position_lt?: InputMaybe<Scalars['String']['input']>;
  position_gte?: InputMaybe<Scalars['String']['input']>;
  position_lte?: InputMaybe<Scalars['String']['input']>;
  position_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_contains?: InputMaybe<Scalars['String']['input']>;
  position_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_contains?: InputMaybe<Scalars['String']['input']>;
  position_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_?: InputMaybe<Arbitrum_Position_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Arbitrum_LiquidityPool_filter>;
  tickLower?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickLower_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Arbitrum_Token_filter>;
  inputTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_Deposit_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_Deposit_filter>>>;
};

export type Arbitrum_Deposit_orderBy =
  | 'id'
  | 'hash'
  | 'nonce'
  | 'logIndex'
  | 'gasLimit'
  | 'gasUsed'
  | 'gasPrice'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'position'
  | 'position__id'
  | 'position__hashOpened'
  | 'position__hashClosed'
  | 'position__blockNumberOpened'
  | 'position__timestampOpened'
  | 'position__blockNumberClosed'
  | 'position__timestampClosed'
  | 'position__liquidityTokenType'
  | 'position__liquidity'
  | 'position__liquidityUSD'
  | 'position__cumulativeDepositUSD'
  | 'position__cumulativeWithdrawUSD'
  | 'position__depositCount'
  | 'position__withdrawCount'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'tickLower'
  | 'tickUpper'
  | 'blockNumber'
  | 'timestamp'
  | 'liquidity'
  | 'inputTokens'
  | 'inputTokenAmounts'
  | 'reserveAmounts'
  | 'amountUSD';

export type Arbitrum_DexAmmProtocol = Arbitrum_Protocol & {
  /**  Smart contract address of the protocol's main contract (Factory, Registry, etc)  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Name of the protocol, including version. e.g. Uniswap v3  */
  name: Scalars['String']['output'];
  /**  Slug of protocol, including version. e.g. uniswap-v3  */
  slug: Scalars['String']['output'];
  /**  Version of the subgraph schema, in SemVer format (e.g. 1.0.0)  */
  schemaVersion: Scalars['String']['output'];
  /**  Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)  */
  subgraphVersion: Scalars['String']['output'];
  /**  Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)  */
  methodologyVersion: Scalars['String']['output'];
  /**  The blockchain network this subgraph is indexing on  */
  network: Arbitrum_Network;
  /**  The type of protocol (e.g. DEX, Lending, Yield, etc)  */
  type: Arbitrum_ProtocolType;
  /**  Current TVL (Total Value Locked) of the entire protocol  */
  totalValueLockedUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All protocol-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedProtocolSideValueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All supply-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedSupplySideValueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
  protocolControlledValueUSD?: Maybe<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  All historical volume in USD  */
  cumulativeVolumeUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  cumulativeSupplySideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  cumulativeTotalRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Number of cumulative liquidity providers  */
  cumulativeUniqueLPs: Scalars['Int']['output'];
  /**  Number of cumulative traders  */
  cumulativeUniqueTraders: Scalars['Int']['output'];
  /**  Total number of pools  */
  totalPoolCount: Scalars['Int']['output'];
  /**  Total number of open positions  */
  openPositionCount: Scalars['Int']['output'];
  /**  Total number of positions (open and closed)  */
  cumulativePositionCount: Scalars['Int']['output'];
  /**  Day ID of the most recent daily snapshot  */
  lastSnapshotDayID: Scalars['Int']['output'];
  /**  Timestamp of the last time this entity was updated  */
  lastUpdateTimestamp: Scalars['BigInt']['output'];
  /**  Block number of the last time this entity was updated  */
  lastUpdateBlockNumber: Scalars['BigInt']['output'];
  /**  Daily usage metrics for this protocol  */
  dailyUsageMetrics: Array<Arbitrum_UsageMetricsDailySnapshot>;
  /**  Hourly usage metrics for this protocol  */
  hourlyUsageMetrics: Array<Arbitrum_UsageMetricsHourlySnapshot>;
  /**  Daily financial metrics for this protocol  */
  financialMetrics: Array<Arbitrum_FinancialsDailySnapshot>;
  /**  All pools that belong to this protocol  */
  pools: Array<Arbitrum_LiquidityPool>;
  /**  This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis  */
  _regenesis: Scalars['Boolean']['output'];
};


export type Arbitrum_DexAmmProtocoldailyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_UsageMetricsDailySnapshot_filter>;
};


export type Arbitrum_DexAmmProtocolhourlyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_UsageMetricsHourlySnapshot_filter>;
};


export type Arbitrum_DexAmmProtocolfinancialMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_FinancialsDailySnapshot_filter>;
};


export type Arbitrum_DexAmmProtocolpoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_LiquidityPool_filter>;
};

export type Arbitrum_DexAmmProtocol_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  slug_not?: InputMaybe<Scalars['String']['input']>;
  slug_gt?: InputMaybe<Scalars['String']['input']>;
  slug_lt?: InputMaybe<Scalars['String']['input']>;
  slug_gte?: InputMaybe<Scalars['String']['input']>;
  slug_lte?: InputMaybe<Scalars['String']['input']>;
  slug_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  slug_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  network?: InputMaybe<Arbitrum_Network>;
  network_not?: InputMaybe<Arbitrum_Network>;
  network_in?: InputMaybe<Array<Arbitrum_Network>>;
  network_not_in?: InputMaybe<Array<Arbitrum_Network>>;
  type?: InputMaybe<Arbitrum_ProtocolType>;
  type_not?: InputMaybe<Arbitrum_ProtocolType>;
  type_in?: InputMaybe<Array<Arbitrum_ProtocolType>>;
  type_not_in?: InputMaybe<Array<Arbitrum_ProtocolType>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  protocolControlledValueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueLPs?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueLPs_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueTraders?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueTraders_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_not?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativePositionCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativePositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastUpdateTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyUsageMetrics_?: InputMaybe<Arbitrum_UsageMetricsDailySnapshot_filter>;
  hourlyUsageMetrics_?: InputMaybe<Arbitrum_UsageMetricsHourlySnapshot_filter>;
  financialMetrics_?: InputMaybe<Arbitrum_FinancialsDailySnapshot_filter>;
  pools_?: InputMaybe<Arbitrum_LiquidityPool_filter>;
  _regenesis?: InputMaybe<Scalars['Boolean']['input']>;
  _regenesis_not?: InputMaybe<Scalars['Boolean']['input']>;
  _regenesis_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  _regenesis_not_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_DexAmmProtocol_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_DexAmmProtocol_filter>>>;
};

export type Arbitrum_DexAmmProtocol_orderBy =
  | 'id'
  | 'name'
  | 'slug'
  | 'schemaVersion'
  | 'subgraphVersion'
  | 'methodologyVersion'
  | 'network'
  | 'type'
  | 'totalValueLockedUSD'
  | 'totalLiquidityUSD'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideValueUSD'
  | 'uncollectedSupplySideValueUSD'
  | 'protocolControlledValueUSD'
  | 'cumulativeVolumeUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'cumulativeUniqueUsers'
  | 'cumulativeUniqueLPs'
  | 'cumulativeUniqueTraders'
  | 'totalPoolCount'
  | 'openPositionCount'
  | 'cumulativePositionCount'
  | 'lastSnapshotDayID'
  | 'lastUpdateTimestamp'
  | 'lastUpdateBlockNumber'
  | 'dailyUsageMetrics'
  | 'hourlyUsageMetrics'
  | 'financialMetrics'
  | 'pools'
  | '_regenesis';

export type Arbitrum_FinancialsDailySnapshot = {
  /**  ID is # of days since Unix epoch time  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  Protocol this snapshot is associated with  */
  protocol: Arbitrum_DexAmmProtocol;
  /**  Current TVL (Total Value Locked) of the entire protocol  */
  totalValueLockedUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All protocol-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedProtocolSideValueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All supply-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedSupplySideValueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
  protocolControlledValueUSD?: Maybe<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  All trade volume occurred in a given day, in USD  */
  dailyVolumeUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All historical trade volume in USD  */
  cumulativeVolumeUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  dailySupplySideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  cumulativeSupplySideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  dailyProtocolSideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  dailyTotalRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  cumulativeTotalRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Arbitrum_FinancialsDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Arbitrum_DexAmmProtocol_filter>;
  totalValueLockedUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  protocolControlledValueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyVolumeUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyVolumeUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyVolumeUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyVolumeUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyVolumeUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyVolumeUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyVolumeUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyVolumeUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyTotalRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_FinancialsDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_FinancialsDailySnapshot_filter>>>;
};

export type Arbitrum_FinancialsDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'totalValueLockedUSD'
  | 'totalLiquidityUSD'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideValueUSD'
  | 'uncollectedSupplySideValueUSD'
  | 'protocolControlledValueUSD'
  | 'dailyVolumeUSD'
  | 'cumulativeVolumeUSD'
  | 'dailySupplySideRevenueUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'dailyProtocolSideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'dailyTotalRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'timestamp'
  | 'blockNumber';

export type Arbitrum_LiquidityPool = {
  /**  Smart contract address of the pool  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  The protocol this pool belongs to  */
  protocol: Arbitrum_DexAmmProtocol;
  /**  Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)  */
  name?: Maybe<Scalars['String']['output']>;
  /**  Symbol of liquidity pool (e.g. 3CRV)  */
  symbol?: Maybe<Scalars['String']['output']>;
  /**  Token that is to represent ownership of liquidity  */
  liquidityToken?: Maybe<Arbitrum_Token>;
  /**  Type of token used to track liquidity  */
  liquidityTokenType?: Maybe<Arbitrum_TokenType>;
  /**  Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer  */
  inputTokens: Array<Arbitrum_Token>;
  /**  Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon  */
  rewardTokens?: Maybe<Array<Arbitrum_RewardToken>>;
  /**  Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee. )  */
  fees: Array<Arbitrum_LiquidityPoolFee>;
  /**  Whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol.  */
  isSingleSided: Scalars['Boolean']['output'];
  /**  Creation timestamp  */
  createdTimestamp: Scalars['BigInt']['output'];
  /**  Creation block number  */
  createdBlockNumber: Scalars['BigInt']['output'];
  /**  Current tick representing the price of token0/token1  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Current TVL (Total Value Locked) of this pool in USD  */
  totalValueLockedUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity for this pool.  */
  totalLiquidity: Scalars['BigInt']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidity: Scalars['BigInt']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All protocol-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All protocol-side value locking in USD that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideValuesUSD: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  All supply-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedSupplySideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All supply-side value locked in USD that remains uncollected and unused in the pool.  */
  uncollectedSupplySideValuesUSD: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  All revenue generated by the liquidity pool, accrued to the supply side.  */
  cumulativeSupplySideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool, accrued to the protocol.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool.  */
  cumulativeTotalRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenUSD: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  All historical trade volume occurred in this pool, in USD  */
  cumulativeVolumeUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalancesUSD: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool  */
  inputTokenWeights: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.  */
  stakedOutputTokenAmount?: Maybe<Scalars['BigInt']['output']>;
  /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsUSD?: Maybe<Array<Scalars['Arbitrum_BigDecimal']['output']>>;
  /**  Total number of deposits (add liquidity)  */
  cumulativeDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity)  */
  cumulativeWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps)  */
  cumulativeSwapCount: Scalars['Int']['output'];
  /**  All positions in this market  */
  positions: Array<Arbitrum_Position>;
  /**  Number of positions in this market  */
  positionCount: Scalars['Int']['output'];
  /**  Number of open positions in this market  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions in this market  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Day ID of the most recent daily snapshot  */
  lastSnapshotDayID: Scalars['Int']['output'];
  /**  Hour ID of the most recent hourly snapshot  */
  lastSnapshotHourID: Scalars['Int']['output'];
  /**  Timestamp of the last time this entity was updated  */
  lastUpdateTimestamp: Scalars['BigInt']['output'];
  /**  Block number of the last time this entity was updated  */
  lastUpdateBlockNumber: Scalars['BigInt']['output'];
  /**  Liquidity pool daily snapshots  */
  dailySnapshots: Array<Arbitrum_LiquidityPoolDailySnapshot>;
  /**  Liquidity pool hourly snapshots  */
  hourlySnapshots: Array<Arbitrum_LiquidityPoolHourlySnapshot>;
  /**  All deposit (add liquidity) events occurred in this pool  */
  deposits: Array<Arbitrum_Deposit>;
  /**  All withdraw (remove liquidity) events occurred in this pool  */
  withdraws: Array<Arbitrum_Withdraw>;
  /**  All trade (swap) events occurred in this pool  */
  swaps: Array<Arbitrum_Swap>;
};


export type Arbitrum_LiquidityPoolinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Token_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Token_filter>;
};


export type Arbitrum_LiquidityPoolrewardTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_RewardToken_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_RewardToken_filter>;
};


export type Arbitrum_LiquidityPoolfeesArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_LiquidityPoolFee_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_LiquidityPoolFee_filter>;
};


export type Arbitrum_LiquidityPoolpositionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Position_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Position_filter>;
};


export type Arbitrum_LiquidityPooldailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_LiquidityPoolDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_LiquidityPoolDailySnapshot_filter>;
};


export type Arbitrum_LiquidityPoolhourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_LiquidityPoolHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_LiquidityPoolHourlySnapshot_filter>;
};


export type Arbitrum_LiquidityPooldepositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Deposit_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Deposit_filter>;
};


export type Arbitrum_LiquidityPoolwithdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Withdraw_filter>;
};


export type Arbitrum_LiquidityPoolswapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Swap_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Swap_filter>;
};

export type Arbitrum_LiquidityPoolDailySnapshot = {
  /**  { Smart contract address of the pool }-{ # of days since Unix epoch time }  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  The protocol this snapshot belongs to  */
  protocol: Arbitrum_DexAmmProtocol;
  /**  The pool this snapshot belongs to  */
  pool: Arbitrum_LiquidityPool;
  /**  Current tick representing the price of token0/token1  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Current TVL (Total Value Locked) of this pool  */
  totalValueLockedUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity for this pool.  */
  totalLiquidity: Scalars['BigInt']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidity: Scalars['BigInt']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All protocol-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All protocol-side value locking in USD that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideValuesUSD: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  All supply-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedSupplySideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All supply-side value locked in USD that remains uncollected and unused in the pool.  */
  uncollectedSupplySideValuesUSD: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  All revenue generated by the liquidity pool, accrued to the supply side.  */
  cumulativeSupplySideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Daily revenue generated by the liquidity pool, accrued to the supply side.  */
  dailySupplySideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool, accrued to the protocol.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Daily revenue generated by the liquidity pool, accrued to the protocol.  */
  dailyProtocolSideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool.  */
  cumulativeTotalRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Daily revenue generated by the liquidity pool.  */
  dailyTotalRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All historical trade volume occurred in this pool, in USD  */
  cumulativeVolumeUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All trade volume occurred in a given day, in USD  */
  dailyVolumeUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All trade volume , in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  dailyVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenUSD: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  dailyVolumeByTokenUSD: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalancesUSD: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool  */
  inputTokenWeights: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.  */
  stakedOutputTokenAmount?: Maybe<Scalars['BigInt']['output']>;
  /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsUSD?: Maybe<Array<Scalars['Arbitrum_BigDecimal']['output']>>;
  /**  Total number of deposits (add liquidity)  */
  cumulativeDepositCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in a day  */
  dailyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity)  */
  cumulativeWithdrawCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in a day  */
  dailyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps)  */
  cumulativeSwapCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in a day  */
  dailySwapCount: Scalars['Int']['output'];
  /**  Number of positions in this market  */
  positionCount: Scalars['Int']['output'];
  /**  Number of open positions in this market  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions in this market  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Arbitrum_LiquidityPoolDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Arbitrum_DexAmmProtocol_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Arbitrum_LiquidityPool_filter>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  activeLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideValuesUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideValuesUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyTotalRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyVolumeUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyVolumeUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyVolumeUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyVolumeUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyVolumeUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyVolumeUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  dailyVolumeUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyVolumeUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalances?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalancesUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeDepositCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_LiquidityPoolDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_LiquidityPoolDailySnapshot_filter>>>;
};

export type Arbitrum_LiquidityPoolDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'tick'
  | 'totalValueLockedUSD'
  | 'totalLiquidity'
  | 'totalLiquidityUSD'
  | 'activeLiquidity'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideTokenAmounts'
  | 'uncollectedProtocolSideValuesUSD'
  | 'uncollectedSupplySideTokenAmounts'
  | 'uncollectedSupplySideValuesUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'dailySupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'dailyProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'dailyTotalRevenueUSD'
  | 'cumulativeVolumeUSD'
  | 'dailyVolumeUSD'
  | 'cumulativeVolumeByTokenAmount'
  | 'dailyVolumeByTokenAmount'
  | 'cumulativeVolumeByTokenUSD'
  | 'dailyVolumeByTokenUSD'
  | 'inputTokenBalances'
  | 'inputTokenBalancesUSD'
  | 'inputTokenWeights'
  | 'stakedOutputTokenAmount'
  | 'rewardTokenEmissionsAmount'
  | 'rewardTokenEmissionsUSD'
  | 'cumulativeDepositCount'
  | 'dailyDepositCount'
  | 'cumulativeWithdrawCount'
  | 'dailyWithdrawCount'
  | 'cumulativeSwapCount'
  | 'dailySwapCount'
  | 'positionCount'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'timestamp'
  | 'blockNumber';

export type Arbitrum_LiquidityPoolFee = {
  /**  { Fee type }-{ Pool address }  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Fee as a percentage of the trade (swap) amount. Does not always apply  */
  feePercentage?: Maybe<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  Type of fee this pool uses  */
  feeType: Arbitrum_LiquidityPoolFeeType;
};

export type Arbitrum_LiquidityPoolFeeType =
  /**  Total fixed fee paid by the user per trade, as a percentage of the traded amount. e.g. 0.3% for Uniswap v2, 0.3% for Sushiswap, 0.04% for Curve v1.  */
  | 'FIXED_TRADING_FEE'
  /**  Some protocols use tiered fees instead of fixed fee (e.g. DYDX, DODO). Set `feePercentage` as 0 but handle the tiered fees in the mapping code.  */
  | 'TIERED_TRADING_FEE'
  /**  Some protocols use dynamic fees instead of fixed fee (e.g. Balancer v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.  */
  | 'DYNAMIC_TRADING_FEE'
  /**  Fixed fee that's paid to the LP, as a percentage of the traded amount. e.g. 0.25% for Sushiswap, 0.02% for Curve v1.  */
  | 'FIXED_LP_FEE'
  /**  Some protocols use dynamic LP fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.  */
  | 'DYNAMIC_LP_FEE'
  /**  Fixed fee that's paid to the protocol, as a percentage of the traded amount. e.g. 0.05% for Sushiswap, 0.02% for Curve v1.  */
  | 'FIXED_PROTOCOL_FEE'
  /**  Some protocols use dynamic protocol fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.  */
  | 'DYNAMIC_PROTOCOL_FEE'
  /**  One-time fee charged by the protocol during deposit, in percentages of the deposit token  */
  | 'DEPOSIT_FEE'
  /**  One-time fee charged by the protocol (e.g. Bancor v3) during withdrawal, in percentages of the withdrawal token  */
  | 'WITHDRAWAL_FEE';

export type Arbitrum_LiquidityPoolFee_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  feePercentage?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  feePercentage_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  feePercentage_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  feePercentage_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  feePercentage_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  feePercentage_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  feePercentage_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  feePercentage_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  feeType?: InputMaybe<Arbitrum_LiquidityPoolFeeType>;
  feeType_not?: InputMaybe<Arbitrum_LiquidityPoolFeeType>;
  feeType_in?: InputMaybe<Array<Arbitrum_LiquidityPoolFeeType>>;
  feeType_not_in?: InputMaybe<Array<Arbitrum_LiquidityPoolFeeType>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_LiquidityPoolFee_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_LiquidityPoolFee_filter>>>;
};

export type Arbitrum_LiquidityPoolFee_orderBy =
  | 'id'
  | 'feePercentage'
  | 'feeType';

export type Arbitrum_LiquidityPoolHourlySnapshot = {
  /**  { Smart contract address of the pool }-{ # of hours since Unix epoch time }  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Number of hours since Unix epoch time  */
  hour: Scalars['Int']['output'];
  /**  The protocol this snapshot belongs to  */
  protocol: Arbitrum_DexAmmProtocol;
  /**  The pool this snapshot belongs to  */
  pool: Arbitrum_LiquidityPool;
  /**  Current tick representing the price of token0/token1  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Current TVL (Total Value Locked) of this pool  */
  totalValueLockedUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity for this pool.  */
  totalLiquidity: Scalars['BigInt']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidity: Scalars['BigInt']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All protocol-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All protocol-side value locking in USD that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideValuesUSD: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  All supply-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedSupplySideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All supply-side value locked in USD that remains uncollected and unused in the pool.  */
  uncollectedSupplySideValuesUSD: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  All revenue generated by the liquidity pool, accrued to the supply side.  */
  cumulativeSupplySideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Hourly revenue generated by the liquidity pool, accrued to the supply side.  */
  hourlySupplySideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool, accrued to the protocol.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Hourly revenue generated by the liquidity pool, accrued to the protocol.  */
  hourlyProtocolSideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool.  */
  cumulativeTotalRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Hourly revenue generated by the liquidity pool.  */
  hourlyTotalRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All historical trade volume occurred in this pool, in USD  */
  cumulativeVolumeUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All trade volume occurred in a given hour, in USD  */
  hourlyVolumeUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All trade volume, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  hourlyVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenUSD: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  hourlyVolumeByTokenUSD: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalancesUSD: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool  */
  inputTokenWeights: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.  */
  stakedOutputTokenAmount?: Maybe<Scalars['BigInt']['output']>;
  /**  Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsUSD?: Maybe<Array<Scalars['Arbitrum_BigDecimal']['output']>>;
  /**  Total number of deposits (add liquidity)  */
  cumulativeDepositCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in an hour  */
  hourlyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity)  */
  cumulativeWithdrawCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in an hour  */
  hourlyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps)  */
  cumulativeSwapCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in an hour  */
  hourlySwapCount: Scalars['Int']['output'];
  /**  Number of positions in this market  */
  positionCount: Scalars['Int']['output'];
  /**  Number of open positions in this market  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions in this market  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Arbitrum_LiquidityPoolHourlySnapshot_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hour?: InputMaybe<Scalars['Int']['input']>;
  hour_not?: InputMaybe<Scalars['Int']['input']>;
  hour_gt?: InputMaybe<Scalars['Int']['input']>;
  hour_lt?: InputMaybe<Scalars['Int']['input']>;
  hour_gte?: InputMaybe<Scalars['Int']['input']>;
  hour_lte?: InputMaybe<Scalars['Int']['input']>;
  hour_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hour_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Arbitrum_DexAmmProtocol_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Arbitrum_LiquidityPool_filter>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  activeLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideValuesUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideValuesUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  hourlySupplySideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  hourlySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  hourlyProtocolSideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  hourlyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  hourlyTotalRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  hourlyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  hourlyVolumeUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyVolumeUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyVolumeUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyVolumeUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyVolumeUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyVolumeUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  hourlyVolumeUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  hourlyVolumeUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalances?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalancesUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeDepositCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_LiquidityPoolHourlySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_LiquidityPoolHourlySnapshot_filter>>>;
};

export type Arbitrum_LiquidityPoolHourlySnapshot_orderBy =
  | 'id'
  | 'hour'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'tick'
  | 'totalValueLockedUSD'
  | 'totalLiquidity'
  | 'totalLiquidityUSD'
  | 'activeLiquidity'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideTokenAmounts'
  | 'uncollectedProtocolSideValuesUSD'
  | 'uncollectedSupplySideTokenAmounts'
  | 'uncollectedSupplySideValuesUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'hourlySupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'hourlyProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'hourlyTotalRevenueUSD'
  | 'cumulativeVolumeUSD'
  | 'hourlyVolumeUSD'
  | 'cumulativeVolumeByTokenAmount'
  | 'hourlyVolumeByTokenAmount'
  | 'cumulativeVolumeByTokenUSD'
  | 'hourlyVolumeByTokenUSD'
  | 'inputTokenBalances'
  | 'inputTokenBalancesUSD'
  | 'inputTokenWeights'
  | 'stakedOutputTokenAmount'
  | 'rewardTokenEmissionsAmount'
  | 'rewardTokenEmissionsUSD'
  | 'cumulativeDepositCount'
  | 'hourlyDepositCount'
  | 'cumulativeWithdrawCount'
  | 'hourlyWithdrawCount'
  | 'cumulativeSwapCount'
  | 'hourlySwapCount'
  | 'positionCount'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'timestamp'
  | 'blockNumber';

export type Arbitrum_LiquidityPool_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Arbitrum_DexAmmProtocol_filter>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol?: InputMaybe<Scalars['String']['input']>;
  symbol_not?: InputMaybe<Scalars['String']['input']>;
  symbol_gt?: InputMaybe<Scalars['String']['input']>;
  symbol_lt?: InputMaybe<Scalars['String']['input']>;
  symbol_gte?: InputMaybe<Scalars['String']['input']>;
  symbol_lte?: InputMaybe<Scalars['String']['input']>;
  symbol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_?: InputMaybe<Arbitrum_Token_filter>;
  liquidityTokenType?: InputMaybe<Arbitrum_TokenType>;
  liquidityTokenType_not?: InputMaybe<Arbitrum_TokenType>;
  liquidityTokenType_in?: InputMaybe<Array<Arbitrum_TokenType>>;
  liquidityTokenType_not_in?: InputMaybe<Array<Arbitrum_TokenType>>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Arbitrum_Token_filter>;
  rewardTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_?: InputMaybe<Arbitrum_RewardToken_filter>;
  fees?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_not?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_?: InputMaybe<Arbitrum_LiquidityPoolFee_filter>;
  isSingleSided?: InputMaybe<Scalars['Boolean']['input']>;
  isSingleSided_not?: InputMaybe<Scalars['Boolean']['input']>;
  isSingleSided_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  isSingleSided_not_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  createdTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  activeLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideValuesUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideValuesUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalances?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalancesUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenWeights_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeDepositCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positions_?: InputMaybe<Arbitrum_Position_filter>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastUpdateTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailySnapshots_?: InputMaybe<Arbitrum_LiquidityPoolDailySnapshot_filter>;
  hourlySnapshots_?: InputMaybe<Arbitrum_LiquidityPoolHourlySnapshot_filter>;
  deposits_?: InputMaybe<Arbitrum_Deposit_filter>;
  withdraws_?: InputMaybe<Arbitrum_Withdraw_filter>;
  swaps_?: InputMaybe<Arbitrum_Swap_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_LiquidityPool_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_LiquidityPool_filter>>>;
};

export type Arbitrum_LiquidityPool_orderBy =
  | 'id'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'name'
  | 'symbol'
  | 'liquidityToken'
  | 'liquidityToken__id'
  | 'liquidityToken__name'
  | 'liquidityToken__symbol'
  | 'liquidityToken__decimals'
  | 'liquidityToken__lastPriceUSD'
  | 'liquidityToken__lastPriceBlockNumber'
  | 'liquidityToken___lastPricePool'
  | 'liquidityToken___totalSupply'
  | 'liquidityToken___totalValueLockedUSD'
  | 'liquidityToken___largePriceChangeBuffer'
  | 'liquidityToken___largeTVLImpactBuffer'
  | 'liquidityTokenType'
  | 'inputTokens'
  | 'rewardTokens'
  | 'fees'
  | 'isSingleSided'
  | 'createdTimestamp'
  | 'createdBlockNumber'
  | 'tick'
  | 'totalValueLockedUSD'
  | 'totalLiquidity'
  | 'totalLiquidityUSD'
  | 'activeLiquidity'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideTokenAmounts'
  | 'uncollectedProtocolSideValuesUSD'
  | 'uncollectedSupplySideTokenAmounts'
  | 'uncollectedSupplySideValuesUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'cumulativeVolumeByTokenAmount'
  | 'cumulativeVolumeByTokenUSD'
  | 'cumulativeVolumeUSD'
  | 'inputTokenBalances'
  | 'inputTokenBalancesUSD'
  | 'inputTokenWeights'
  | 'stakedOutputTokenAmount'
  | 'rewardTokenEmissionsAmount'
  | 'rewardTokenEmissionsUSD'
  | 'cumulativeDepositCount'
  | 'cumulativeWithdrawCount'
  | 'cumulativeSwapCount'
  | 'positions'
  | 'positionCount'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'lastSnapshotDayID'
  | 'lastSnapshotHourID'
  | 'lastUpdateTimestamp'
  | 'lastUpdateBlockNumber'
  | 'dailySnapshots'
  | 'hourlySnapshots'
  | 'deposits'
  | 'withdraws'
  | 'swaps';

export type Arbitrum_Network =
  | 'ARBITRUM_ONE'
  | 'ARWEAVE_MAINNET'
  | 'AURORA'
  | 'AVALANCHE'
  | 'BASE'
  | 'BOBA'
  | 'BSC'
  | 'CELO'
  | 'COSMOS'
  | 'CRONOS'
  | 'MAINNET'
  | 'FANTOM'
  | 'FUSE'
  | 'HARMONY'
  | 'JUNO'
  | 'MOONBEAM'
  | 'MOONRIVER'
  | 'NEAR_MAINNET'
  | 'OPTIMISM'
  | 'OSMOSIS'
  | 'MATIC'
  | 'XDAI';

/** Defines the order direction, either ascending or descending */
export type Arbitrum_OrderDirection =
  | 'asc'
  | 'desc';

export type Arbitrum_Position = {
  /**  { Account address }-{ Market address }-{ Count }  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Account that owns this position  */
  account: Arbitrum_Account;
  /**  The liquidity pool in which this position was opened  */
  pool: Arbitrum_LiquidityPool;
  /**  The hash of the transaction that opened this position  */
  hashOpened: Scalars['Arbitrum_Bytes']['output'];
  /**  The hash of the transaction that closed this position  */
  hashClosed?: Maybe<Scalars['Arbitrum_Bytes']['output']>;
  /**  Block number of when the position was opened  */
  blockNumberOpened: Scalars['BigInt']['output'];
  /**  Timestamp when the position was opened  */
  timestampOpened: Scalars['BigInt']['output'];
  /**  Block number of when the position was closed (0 if still open)  */
  blockNumberClosed?: Maybe<Scalars['BigInt']['output']>;
  /**  Timestamp when the position was closed (0 if still open)  */
  timestampClosed?: Maybe<Scalars['BigInt']['output']>;
  /**  lower tick of the position  */
  tickLower?: Maybe<Arbitrum_Tick>;
  /**  upper tick of the position  */
  tickUpper?: Maybe<Arbitrum_Tick>;
  /**  Token that is to represent ownership of liquidity  */
  liquidityToken?: Maybe<Arbitrum_Token>;
  /**  Type of token used to track liquidity  */
  liquidityTokenType?: Maybe<Arbitrum_TokenType>;
  /**  total position liquidity  */
  liquidity: Scalars['BigInt']['output'];
  /**  total position liquidity in USD  */
  liquidityUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  amount of tokens ever deposited to position  */
  cumulativeDepositTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD deposited to position  */
  cumulativeDepositUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  amount of tokens ever withdrawn from position (without fees)  */
  cumulativeWithdrawTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD withdrawn from position (without fees)  */
  cumulativeWithdrawUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Total reward token accumulated under this position, in USD  */
  cumulativeRewardUSD?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Number of deposits related to this position  */
  depositCount: Scalars['Int']['output'];
  /**  All deposit events of this position  */
  deposits: Array<Arbitrum_Deposit>;
  /**  Number of withdrawals related to this position  */
  withdrawCount: Scalars['Int']['output'];
  /**  All withdraw events of this position  */
  withdraws: Array<Arbitrum_Withdraw>;
  /**  Position daily snapshots for open positions  */
  snapshots: Array<Arbitrum_PositionSnapshot>;
};


export type Arbitrum_PositiondepositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Deposit_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Deposit_filter>;
};


export type Arbitrum_PositionwithdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Withdraw_filter>;
};


export type Arbitrum_PositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_PositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_PositionSnapshot_filter>;
};

export type Arbitrum_PositionSnapshot = {
  /**  { Position ID }-{ Transaction hash }-{ Log index }  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Transaction hash of the transaction that triggered this snapshot  */
  hash: Scalars['Arbitrum_Bytes']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Nonce of the transaction that triggered this snapshot  */
  nonce: Scalars['BigInt']['output'];
  /**  Position of this snapshot  */
  position: Arbitrum_Position;
  /**  Type of token used to track liquidity  */
  liquidityTokenType?: Maybe<Arbitrum_TokenType>;
  /**  total position liquidity  */
  liquidity?: Maybe<Scalars['BigInt']['output']>;
  /**  total position liquidity in USD  */
  liquidityUSD?: Maybe<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  amount of tokens ever deposited to position  */
  cumulativeDepositTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD deposited to position  */
  cumulativeDepositUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  amount of tokens ever withdrawn from position (without fees)  */
  cumulativeWithdrawTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD withdrawn from position (without fees)  */
  cumulativeWithdrawUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Total reward token accumulated under this position, in native amounts  */
  cumulativeRewardTokenAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Total reward token accumulated under this position, in USD  */
  cumulativeRewardUSD?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Number of deposits related to this position  */
  depositCount: Scalars['Int']['output'];
  /**  Number of withdrawals related to this position  */
  withdrawCount: Scalars['Int']['output'];
  /**  Block number of this snapshot  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this snapshot  */
  timestamp: Scalars['BigInt']['output'];
};

export type Arbitrum_PositionSnapshot_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  position?: InputMaybe<Scalars['String']['input']>;
  position_not?: InputMaybe<Scalars['String']['input']>;
  position_gt?: InputMaybe<Scalars['String']['input']>;
  position_lt?: InputMaybe<Scalars['String']['input']>;
  position_gte?: InputMaybe<Scalars['String']['input']>;
  position_lte?: InputMaybe<Scalars['String']['input']>;
  position_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_contains?: InputMaybe<Scalars['String']['input']>;
  position_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_contains?: InputMaybe<Scalars['String']['input']>;
  position_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_?: InputMaybe<Arbitrum_Position_filter>;
  liquidityTokenType?: InputMaybe<Arbitrum_TokenType>;
  liquidityTokenType_not?: InputMaybe<Arbitrum_TokenType>;
  liquidityTokenType_in?: InputMaybe<Array<Arbitrum_TokenType>>;
  liquidityTokenType_not_in?: InputMaybe<Array<Arbitrum_TokenType>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeDepositTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeDepositUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeDepositUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeDepositUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeDepositUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeDepositUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeWithdrawTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeWithdrawUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeRewardTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  depositCount?: InputMaybe<Scalars['Int']['input']>;
  depositCount_not?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_PositionSnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_PositionSnapshot_filter>>>;
};

export type Arbitrum_PositionSnapshot_orderBy =
  | 'id'
  | 'hash'
  | 'logIndex'
  | 'nonce'
  | 'position'
  | 'position__id'
  | 'position__hashOpened'
  | 'position__hashClosed'
  | 'position__blockNumberOpened'
  | 'position__timestampOpened'
  | 'position__blockNumberClosed'
  | 'position__timestampClosed'
  | 'position__liquidityTokenType'
  | 'position__liquidity'
  | 'position__liquidityUSD'
  | 'position__cumulativeDepositUSD'
  | 'position__cumulativeWithdrawUSD'
  | 'position__depositCount'
  | 'position__withdrawCount'
  | 'liquidityTokenType'
  | 'liquidity'
  | 'liquidityUSD'
  | 'cumulativeDepositTokenAmounts'
  | 'cumulativeDepositUSD'
  | 'cumulativeWithdrawTokenAmounts'
  | 'cumulativeWithdrawUSD'
  | 'cumulativeRewardTokenAmounts'
  | 'cumulativeRewardUSD'
  | 'depositCount'
  | 'withdrawCount'
  | 'blockNumber'
  | 'timestamp';

export type Arbitrum_Position_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Arbitrum_Account_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Arbitrum_LiquidityPool_filter>;
  hashOpened?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hashOpened_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hashOpened_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hashOpened_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hashOpened_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hashOpened_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hashOpened_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  hashOpened_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  hashOpened_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hashOpened_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hashClosed?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hashClosed_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hashClosed_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hashClosed_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hashClosed_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hashClosed_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hashClosed_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  hashClosed_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  hashClosed_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hashClosed_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  blockNumberOpened?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumberOpened_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampOpened?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampOpened_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumberClosed?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumberClosed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampClosed?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampClosed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickLower?: InputMaybe<Scalars['String']['input']>;
  tickLower_not?: InputMaybe<Scalars['String']['input']>;
  tickLower_gt?: InputMaybe<Scalars['String']['input']>;
  tickLower_lt?: InputMaybe<Scalars['String']['input']>;
  tickLower_gte?: InputMaybe<Scalars['String']['input']>;
  tickLower_lte?: InputMaybe<Scalars['String']['input']>;
  tickLower_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickLower_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickLower_contains?: InputMaybe<Scalars['String']['input']>;
  tickLower_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_contains?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_?: InputMaybe<Arbitrum_Tick_filter>;
  tickUpper?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not?: InputMaybe<Scalars['String']['input']>;
  tickUpper_gt?: InputMaybe<Scalars['String']['input']>;
  tickUpper_lt?: InputMaybe<Scalars['String']['input']>;
  tickUpper_gte?: InputMaybe<Scalars['String']['input']>;
  tickUpper_lte?: InputMaybe<Scalars['String']['input']>;
  tickUpper_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickUpper_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickUpper_contains?: InputMaybe<Scalars['String']['input']>;
  tickUpper_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_contains?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_?: InputMaybe<Arbitrum_Tick_filter>;
  liquidityToken?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_?: InputMaybe<Arbitrum_Token_filter>;
  liquidityTokenType?: InputMaybe<Arbitrum_TokenType>;
  liquidityTokenType_not?: InputMaybe<Arbitrum_TokenType>;
  liquidityTokenType_in?: InputMaybe<Array<Arbitrum_TokenType>>;
  liquidityTokenType_not_in?: InputMaybe<Array<Arbitrum_TokenType>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeDepositTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeDepositUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeDepositUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeDepositUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeDepositUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeDepositUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeWithdrawTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeWithdrawUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeWithdrawUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeRewardUSD?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  depositCount?: InputMaybe<Scalars['Int']['input']>;
  depositCount_not?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  deposits_?: InputMaybe<Arbitrum_Deposit_filter>;
  withdrawCount?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdraws_?: InputMaybe<Arbitrum_Withdraw_filter>;
  snapshots_?: InputMaybe<Arbitrum_PositionSnapshot_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_Position_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_Position_filter>>>;
};

export type Arbitrum_Position_orderBy =
  | 'id'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'hashOpened'
  | 'hashClosed'
  | 'blockNumberOpened'
  | 'timestampOpened'
  | 'blockNumberClosed'
  | 'timestampClosed'
  | 'tickLower'
  | 'tickLower__id'
  | 'tickLower__index'
  | 'tickLower__createdTimestamp'
  | 'tickLower__createdBlockNumber'
  | 'tickLower__liquidityGross'
  | 'tickLower__liquidityGrossUSD'
  | 'tickLower__liquidityNet'
  | 'tickLower__liquidityNetUSD'
  | 'tickLower__lastSnapshotDayID'
  | 'tickLower__lastSnapshotHourID'
  | 'tickLower__lastUpdateTimestamp'
  | 'tickLower__lastUpdateBlockNumber'
  | 'tickUpper'
  | 'tickUpper__id'
  | 'tickUpper__index'
  | 'tickUpper__createdTimestamp'
  | 'tickUpper__createdBlockNumber'
  | 'tickUpper__liquidityGross'
  | 'tickUpper__liquidityGrossUSD'
  | 'tickUpper__liquidityNet'
  | 'tickUpper__liquidityNetUSD'
  | 'tickUpper__lastSnapshotDayID'
  | 'tickUpper__lastSnapshotHourID'
  | 'tickUpper__lastUpdateTimestamp'
  | 'tickUpper__lastUpdateBlockNumber'
  | 'liquidityToken'
  | 'liquidityToken__id'
  | 'liquidityToken__name'
  | 'liquidityToken__symbol'
  | 'liquidityToken__decimals'
  | 'liquidityToken__lastPriceUSD'
  | 'liquidityToken__lastPriceBlockNumber'
  | 'liquidityToken___lastPricePool'
  | 'liquidityToken___totalSupply'
  | 'liquidityToken___totalValueLockedUSD'
  | 'liquidityToken___largePriceChangeBuffer'
  | 'liquidityToken___largeTVLImpactBuffer'
  | 'liquidityTokenType'
  | 'liquidity'
  | 'liquidityUSD'
  | 'cumulativeDepositTokenAmounts'
  | 'cumulativeDepositUSD'
  | 'cumulativeWithdrawTokenAmounts'
  | 'cumulativeWithdrawUSD'
  | 'cumulativeRewardUSD'
  | 'depositCount'
  | 'deposits'
  | 'withdrawCount'
  | 'withdraws'
  | 'snapshots';

export type Arbitrum_Protocol = {
  /**  Smart contract address of the protocol's main contract (Factory, Registry, etc)  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Name of the protocol, including version. e.g. Uniswap v3  */
  name: Scalars['String']['output'];
  /**  Slug of protocol, including version. e.g. uniswap-v3  */
  slug: Scalars['String']['output'];
  /**  Version of the subgraph schema, in SemVer format (e.g. 1.0.0)  */
  schemaVersion: Scalars['String']['output'];
  /**  Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)  */
  subgraphVersion: Scalars['String']['output'];
  /**  Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)  */
  methodologyVersion: Scalars['String']['output'];
  /**  The blockchain network this subgraph is indexing on  */
  network: Arbitrum_Network;
  /**  The type of protocol (e.g. DEX, Lending, Yield, etc)  */
  type: Arbitrum_ProtocolType;
  /**  Current TVL (Total Value Locked) of the entire protocol  */
  totalValueLockedUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
  protocolControlledValueUSD?: Maybe<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  cumulativeSupplySideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  cumulativeTotalRevenueUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Total number of pools  */
  totalPoolCount: Scalars['Int']['output'];
  /**  Daily usage metrics for this protocol  */
  dailyUsageMetrics: Array<Arbitrum_UsageMetricsDailySnapshot>;
  /**  Hourly usage metrics for this protocol  */
  hourlyUsageMetrics: Array<Arbitrum_UsageMetricsHourlySnapshot>;
  /**  Daily financial metrics for this protocol  */
  financialMetrics: Array<Arbitrum_FinancialsDailySnapshot>;
};


export type Arbitrum_ProtocoldailyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_UsageMetricsDailySnapshot_filter>;
};


export type Arbitrum_ProtocolhourlyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_UsageMetricsHourlySnapshot_filter>;
};


export type Arbitrum_ProtocolfinancialMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_FinancialsDailySnapshot_filter>;
};

export type Arbitrum_ProtocolType =
  | 'EXCHANGE'
  | 'LENDING'
  | 'YIELD'
  | 'BRIDGE'
  | 'GENERIC';

export type Arbitrum_Protocol_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  slug_not?: InputMaybe<Scalars['String']['input']>;
  slug_gt?: InputMaybe<Scalars['String']['input']>;
  slug_lt?: InputMaybe<Scalars['String']['input']>;
  slug_gte?: InputMaybe<Scalars['String']['input']>;
  slug_lte?: InputMaybe<Scalars['String']['input']>;
  slug_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  slug_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  network?: InputMaybe<Arbitrum_Network>;
  network_not?: InputMaybe<Arbitrum_Network>;
  network_in?: InputMaybe<Array<Arbitrum_Network>>;
  network_not_in?: InputMaybe<Array<Arbitrum_Network>>;
  type?: InputMaybe<Arbitrum_ProtocolType>;
  type_not?: InputMaybe<Arbitrum_ProtocolType>;
  type_in?: InputMaybe<Array<Arbitrum_ProtocolType>>;
  type_not_in?: InputMaybe<Array<Arbitrum_ProtocolType>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  protocolControlledValueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_not?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyUsageMetrics_?: InputMaybe<Arbitrum_UsageMetricsDailySnapshot_filter>;
  hourlyUsageMetrics_?: InputMaybe<Arbitrum_UsageMetricsHourlySnapshot_filter>;
  financialMetrics_?: InputMaybe<Arbitrum_FinancialsDailySnapshot_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_Protocol_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_Protocol_filter>>>;
};

export type Arbitrum_Protocol_orderBy =
  | 'id'
  | 'name'
  | 'slug'
  | 'schemaVersion'
  | 'subgraphVersion'
  | 'methodologyVersion'
  | 'network'
  | 'type'
  | 'totalValueLockedUSD'
  | 'protocolControlledValueUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'cumulativeUniqueUsers'
  | 'totalPoolCount'
  | 'dailyUsageMetrics'
  | 'hourlyUsageMetrics'
  | 'financialMetrics';

export type Arbitrum_RewardToken = {
  /**  { Reward token type }-{ Smart contract address of the reward token }  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Reference to the actual token  */
  token: Arbitrum_Token;
  /**  The type of the reward token  */
  type: Arbitrum_RewardTokenType;
};

export type Arbitrum_RewardTokenType =
  /**  For reward tokens awarded to LPs/lenders  */
  | 'DEPOSIT'
  /**  For reward tokens awarded to borrowers  */
  | 'BORROW';

export type Arbitrum_RewardToken_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  token?: InputMaybe<Scalars['String']['input']>;
  token_not?: InputMaybe<Scalars['String']['input']>;
  token_gt?: InputMaybe<Scalars['String']['input']>;
  token_lt?: InputMaybe<Scalars['String']['input']>;
  token_gte?: InputMaybe<Scalars['String']['input']>;
  token_lte?: InputMaybe<Scalars['String']['input']>;
  token_in?: InputMaybe<Array<Scalars['String']['input']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  token_contains?: InputMaybe<Scalars['String']['input']>;
  token_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  token_not_contains?: InputMaybe<Scalars['String']['input']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  token_starts_with?: InputMaybe<Scalars['String']['input']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_ends_with?: InputMaybe<Scalars['String']['input']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_?: InputMaybe<Arbitrum_Token_filter>;
  type?: InputMaybe<Arbitrum_RewardTokenType>;
  type_not?: InputMaybe<Arbitrum_RewardTokenType>;
  type_in?: InputMaybe<Array<Arbitrum_RewardTokenType>>;
  type_not_in?: InputMaybe<Array<Arbitrum_RewardTokenType>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_RewardToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_RewardToken_filter>>>;
};

export type Arbitrum_RewardToken_orderBy =
  | 'id'
  | 'token'
  | 'token__id'
  | 'token__name'
  | 'token__symbol'
  | 'token__decimals'
  | 'token__lastPriceUSD'
  | 'token__lastPriceBlockNumber'
  | 'token___lastPricePool'
  | 'token___totalSupply'
  | 'token___totalValueLockedUSD'
  | 'token___largePriceChangeBuffer'
  | 'token___largeTVLImpactBuffer'
  | 'type';

export type Arbitrum_Swap = {
  /**  { Transaction hash }-{ Log index }  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Transaction hash of the transaction that emitted this event  */
  hash: Scalars['Arbitrum_Bytes']['output'];
  /**  Nonce of the transaction that emitted this event  */
  nonce: Scalars['BigInt']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Gas limit of the transaction that emitted this event  */
  gasLimit?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas used in this transaction. (Optional because not every chain will support this)  */
  gasUsed?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas price of the transaction that emitted this event  */
  gasPrice?: Maybe<Scalars['BigInt']['output']>;
  /**  The protocol this transaction belongs to  */
  protocol: Arbitrum_DexAmmProtocol;
  /**  Account that emitted this event  */
  account: Arbitrum_Account;
  /**  The pool involving this event  */
  pool: Arbitrum_LiquidityPool;
  /**  Block number of this event  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this event  */
  timestamp: Scalars['BigInt']['output'];
  /**  the tick after the swap  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Token deposited into pool  */
  tokenIn: Arbitrum_Token;
  /**  Amount of token deposited into pool in native units  */
  amountIn: Scalars['BigInt']['output'];
  /**  Amount of token deposited into pool in USD  */
  amountInUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Token withdrawn from pool  */
  tokenOut: Arbitrum_Token;
  /**  Amount of token withdrawn from pool in native units  */
  amountOut: Scalars['BigInt']['output'];
  /**  Amount of token withdrawn from pool in USD  */
  amountOutUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Amount of input tokens in the liquidity pool  */
  reserveAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
};

export type Arbitrum_Swap_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Arbitrum_DexAmmProtocol_filter>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Arbitrum_Account_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Arbitrum_LiquidityPool_filter>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tokenIn?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not?: InputMaybe<Scalars['String']['input']>;
  tokenIn_gt?: InputMaybe<Scalars['String']['input']>;
  tokenIn_lt?: InputMaybe<Scalars['String']['input']>;
  tokenIn_gte?: InputMaybe<Scalars['String']['input']>;
  tokenIn_lte?: InputMaybe<Scalars['String']['input']>;
  tokenIn_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenIn_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenIn_contains?: InputMaybe<Scalars['String']['input']>;
  tokenIn_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_contains?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_?: InputMaybe<Arbitrum_Token_filter>;
  amountIn?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_not?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_gt?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_lt?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_gte?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_lte?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountIn_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountInUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountInUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountInUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountInUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountInUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountInUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountInUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  amountInUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  tokenOut?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not?: InputMaybe<Scalars['String']['input']>;
  tokenOut_gt?: InputMaybe<Scalars['String']['input']>;
  tokenOut_lt?: InputMaybe<Scalars['String']['input']>;
  tokenOut_gte?: InputMaybe<Scalars['String']['input']>;
  tokenOut_lte?: InputMaybe<Scalars['String']['input']>;
  tokenOut_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenOut_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenOut_contains?: InputMaybe<Scalars['String']['input']>;
  tokenOut_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_contains?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_?: InputMaybe<Arbitrum_Token_filter>;
  amountOut?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_not?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_gt?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_lt?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_gte?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_lte?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountOut_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountOutUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountOutUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountOutUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountOutUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountOutUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountOutUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountOutUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  amountOutUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  reserveAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_Swap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_Swap_filter>>>;
};

export type Arbitrum_Swap_orderBy =
  | 'id'
  | 'hash'
  | 'nonce'
  | 'logIndex'
  | 'gasLimit'
  | 'gasUsed'
  | 'gasPrice'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'blockNumber'
  | 'timestamp'
  | 'tick'
  | 'tokenIn'
  | 'tokenIn__id'
  | 'tokenIn__name'
  | 'tokenIn__symbol'
  | 'tokenIn__decimals'
  | 'tokenIn__lastPriceUSD'
  | 'tokenIn__lastPriceBlockNumber'
  | 'tokenIn___lastPricePool'
  | 'tokenIn___totalSupply'
  | 'tokenIn___totalValueLockedUSD'
  | 'tokenIn___largePriceChangeBuffer'
  | 'tokenIn___largeTVLImpactBuffer'
  | 'amountIn'
  | 'amountInUSD'
  | 'tokenOut'
  | 'tokenOut__id'
  | 'tokenOut__name'
  | 'tokenOut__symbol'
  | 'tokenOut__decimals'
  | 'tokenOut__lastPriceUSD'
  | 'tokenOut__lastPriceBlockNumber'
  | 'tokenOut___lastPricePool'
  | 'tokenOut___totalSupply'
  | 'tokenOut___totalValueLockedUSD'
  | 'tokenOut___largePriceChangeBuffer'
  | 'tokenOut___largeTVLImpactBuffer'
  | 'amountOut'
  | 'amountOutUSD'
  | 'reserveAmounts';

export type Arbitrum_Tick = {
  /**  { pool address }-{ tick index }  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  tick index  */
  index: Scalars['BigInt']['output'];
  /**  Liquidity pool this tick belongs to  */
  pool: Arbitrum_LiquidityPool;
  /**  Creation timestamp  */
  createdTimestamp: Scalars['BigInt']['output'];
  /**  Creation block number  */
  createdBlockNumber: Scalars['BigInt']['output'];
  /**  calculated price of token0 of tick within this pool - constant  */
  prices: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  total liquidity pool has as tick lower or upper  */
  liquidityGross: Scalars['BigInt']['output'];
  /**  total liquidity in USD pool has as tick lower or upper  */
  liquidityGrossUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  how much liquidity changes when tick crossed  */
  liquidityNet: Scalars['BigInt']['output'];
  /**  how much liquidity in USD changes when tick crossed  */
  liquidityNetUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Day ID of the most recent daily snapshot  */
  lastSnapshotDayID: Scalars['Int']['output'];
  /**  Hour ID of the most recent hourly snapshot  */
  lastSnapshotHourID: Scalars['Int']['output'];
  /**  Timestamp of the last time this entity was updated  */
  lastUpdateTimestamp: Scalars['BigInt']['output'];
  /**  Block number of the last time this entity was updated  */
  lastUpdateBlockNumber: Scalars['BigInt']['output'];
};

export type Arbitrum_TickDailySnapshot = {
  /**  { pool address }-{ tick index }-{ day ID }  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  tick index  */
  tick: Arbitrum_Tick;
  /**  liquidity pool this tick belongs to  */
  pool: Arbitrum_LiquidityPool;
  /**  total liquidity pool has as tick lower or upper  */
  liquidityGross: Scalars['BigInt']['output'];
  /**  total liquidity in USD pool has as tick lower or upper  */
  liquidityGrossUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  how much liquidity changes when tick crossed  */
  liquidityNet: Scalars['BigInt']['output'];
  /**  how much liquidity in USD changes when tick crossed  */
  liquidityNetUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Arbitrum_TickDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  tick?: InputMaybe<Scalars['String']['input']>;
  tick_not?: InputMaybe<Scalars['String']['input']>;
  tick_gt?: InputMaybe<Scalars['String']['input']>;
  tick_lt?: InputMaybe<Scalars['String']['input']>;
  tick_gte?: InputMaybe<Scalars['String']['input']>;
  tick_lte?: InputMaybe<Scalars['String']['input']>;
  tick_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_contains?: InputMaybe<Scalars['String']['input']>;
  tick_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_?: InputMaybe<Arbitrum_Tick_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Arbitrum_LiquidityPool_filter>;
  liquidityGross?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGross_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGrossUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  liquidityGrossUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  liquidityNet?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNet_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNetUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  liquidityNetUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_TickDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_TickDailySnapshot_filter>>>;
};

export type Arbitrum_TickDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'tick'
  | 'tick__id'
  | 'tick__index'
  | 'tick__createdTimestamp'
  | 'tick__createdBlockNumber'
  | 'tick__liquidityGross'
  | 'tick__liquidityGrossUSD'
  | 'tick__liquidityNet'
  | 'tick__liquidityNetUSD'
  | 'tick__lastSnapshotDayID'
  | 'tick__lastSnapshotHourID'
  | 'tick__lastUpdateTimestamp'
  | 'tick__lastUpdateBlockNumber'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'liquidityGross'
  | 'liquidityGrossUSD'
  | 'liquidityNet'
  | 'liquidityNetUSD'
  | 'timestamp'
  | 'blockNumber';

export type Arbitrum_TickHourlySnapshot = {
  /**  { pool address }-{ tick index }-{ hour ID }  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Number of hours since Unix epoch time  */
  hour: Scalars['Int']['output'];
  /**  tick index  */
  tick: Arbitrum_Tick;
  /**  liquidity pool this tick belongs to  */
  pool: Arbitrum_LiquidityPool;
  /**  total liquidity pool has as tick lower or upper  */
  liquidityGross: Scalars['BigInt']['output'];
  /**  total liquidity in USD pool has as tick lower or upper  */
  liquidityGrossUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  how much liquidity changes when tick crossed  */
  liquidityNet: Scalars['BigInt']['output'];
  /**  how much liquidity in USD changes when tick crossed  */
  liquidityNetUSD: Scalars['Arbitrum_BigDecimal']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Arbitrum_TickHourlySnapshot_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hour?: InputMaybe<Scalars['Int']['input']>;
  hour_not?: InputMaybe<Scalars['Int']['input']>;
  hour_gt?: InputMaybe<Scalars['Int']['input']>;
  hour_lt?: InputMaybe<Scalars['Int']['input']>;
  hour_gte?: InputMaybe<Scalars['Int']['input']>;
  hour_lte?: InputMaybe<Scalars['Int']['input']>;
  hour_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hour_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  tick?: InputMaybe<Scalars['String']['input']>;
  tick_not?: InputMaybe<Scalars['String']['input']>;
  tick_gt?: InputMaybe<Scalars['String']['input']>;
  tick_lt?: InputMaybe<Scalars['String']['input']>;
  tick_gte?: InputMaybe<Scalars['String']['input']>;
  tick_lte?: InputMaybe<Scalars['String']['input']>;
  tick_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_contains?: InputMaybe<Scalars['String']['input']>;
  tick_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_?: InputMaybe<Arbitrum_Tick_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Arbitrum_LiquidityPool_filter>;
  liquidityGross?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGross_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGrossUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  liquidityGrossUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  liquidityNet?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNet_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNetUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  liquidityNetUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_TickHourlySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_TickHourlySnapshot_filter>>>;
};

export type Arbitrum_TickHourlySnapshot_orderBy =
  | 'id'
  | 'hour'
  | 'tick'
  | 'tick__id'
  | 'tick__index'
  | 'tick__createdTimestamp'
  | 'tick__createdBlockNumber'
  | 'tick__liquidityGross'
  | 'tick__liquidityGrossUSD'
  | 'tick__liquidityNet'
  | 'tick__liquidityNetUSD'
  | 'tick__lastSnapshotDayID'
  | 'tick__lastSnapshotHourID'
  | 'tick__lastUpdateTimestamp'
  | 'tick__lastUpdateBlockNumber'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'liquidityGross'
  | 'liquidityGrossUSD'
  | 'liquidityNet'
  | 'liquidityNetUSD'
  | 'timestamp'
  | 'blockNumber';

export type Arbitrum_Tick_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  index?: InputMaybe<Scalars['BigInt']['input']>;
  index_not?: InputMaybe<Scalars['BigInt']['input']>;
  index_gt?: InputMaybe<Scalars['BigInt']['input']>;
  index_lt?: InputMaybe<Scalars['BigInt']['input']>;
  index_gte?: InputMaybe<Scalars['BigInt']['input']>;
  index_lte?: InputMaybe<Scalars['BigInt']['input']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Arbitrum_LiquidityPool_filter>;
  createdTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  prices?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  prices_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  prices_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  prices_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  prices_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  prices_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  liquidityGross?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGross_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGrossUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityGrossUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  liquidityGrossUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  liquidityNet?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNet_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNetUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  liquidityNetUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  liquidityNetUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  lastSnapshotDayID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastUpdateTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_Tick_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_Tick_filter>>>;
};

export type Arbitrum_Tick_orderBy =
  | 'id'
  | 'index'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'createdTimestamp'
  | 'createdBlockNumber'
  | 'prices'
  | 'liquidityGross'
  | 'liquidityGrossUSD'
  | 'liquidityNet'
  | 'liquidityNetUSD'
  | 'lastSnapshotDayID'
  | 'lastSnapshotHourID'
  | 'lastUpdateTimestamp'
  | 'lastUpdateBlockNumber';

export type Arbitrum_Token = {
  /**  Smart contract address of the token  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Name of the token, mirrored from the smart contract  */
  name: Scalars['String']['output'];
  /**  Symbol of the token, mirrored from the smart contract  */
  symbol: Scalars['String']['output'];
  /**  The number of decimal places this token uses, default to 18  */
  decimals: Scalars['Int']['output'];
  /**  Optional field to track the price of a token, mostly for caching purposes  */
  lastPriceUSD?: Maybe<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  Optional field to track the block number of the last token price  */
  lastPriceBlockNumber?: Maybe<Scalars['BigInt']['output']>;
  /**  last pool that gave this token a price  */
  _lastPricePool?: Maybe<Scalars['Arbitrum_Bytes']['output']>;
  /**  amount of tokens in the protocol  */
  _totalSupply: Scalars['BigInt']['output'];
  /**  Total value locked in the protocol  */
  _totalValueLockedUSD: Scalars['Arbitrum_BigDecimal']['output'];
  _largePriceChangeBuffer: Scalars['Int']['output'];
  _largeTVLImpactBuffer: Scalars['Int']['output'];
};

export type Arbitrum_TokenType =
  | 'MULTIPLE'
  | 'UNKNOWN'
  | 'ERC20'
  | 'ERC721'
  | 'ERC1155'
  | 'BEP20'
  | 'BEP721'
  | 'BEP1155';

export type Arbitrum_Token_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol?: InputMaybe<Scalars['String']['input']>;
  symbol_not?: InputMaybe<Scalars['String']['input']>;
  symbol_gt?: InputMaybe<Scalars['String']['input']>;
  symbol_lt?: InputMaybe<Scalars['String']['input']>;
  symbol_gte?: InputMaybe<Scalars['String']['input']>;
  symbol_lte?: InputMaybe<Scalars['String']['input']>;
  symbol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  decimals?: InputMaybe<Scalars['Int']['input']>;
  decimals_not?: InputMaybe<Scalars['Int']['input']>;
  decimals_gt?: InputMaybe<Scalars['Int']['input']>;
  decimals_lt?: InputMaybe<Scalars['Int']['input']>;
  decimals_gte?: InputMaybe<Scalars['Int']['input']>;
  decimals_lte?: InputMaybe<Scalars['Int']['input']>;
  decimals_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastPriceUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  lastPriceUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  lastPriceUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  lastPriceUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  lastPriceUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  lastPriceUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  lastPriceUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  lastPriceUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  lastPriceBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastPriceBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  _lastPricePool?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  _lastPricePool_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  _lastPricePool_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  _lastPricePool_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  _lastPricePool_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  _lastPricePool_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  _lastPricePool_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  _lastPricePool_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  _lastPricePool_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  _lastPricePool_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  _totalSupply?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_not?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_gt?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_lt?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_gte?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_lte?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  _totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  _totalValueLockedUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  _totalValueLockedUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  _totalValueLockedUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  _totalValueLockedUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  _totalValueLockedUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  _totalValueLockedUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  _totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  _totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  _largePriceChangeBuffer?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_not?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_gt?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_lt?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_gte?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_lte?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  _largePriceChangeBuffer_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  _largeTVLImpactBuffer?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_not?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_gt?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_lt?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_gte?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_lte?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  _largeTVLImpactBuffer_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_Token_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_Token_filter>>>;
};

export type Arbitrum_Token_orderBy =
  | 'id'
  | 'name'
  | 'symbol'
  | 'decimals'
  | 'lastPriceUSD'
  | 'lastPriceBlockNumber'
  | '_lastPricePool'
  | '_totalSupply'
  | '_totalValueLockedUSD'
  | '_largePriceChangeBuffer'
  | '_largeTVLImpactBuffer';

export type Arbitrum_UsageMetricsDailySnapshot = {
  /**  ID is # of days since Unix epoch time  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  Protocol this snapshot is associated with  */
  protocol: Arbitrum_DexAmmProtocol;
  /**  Number of unique daily active users  */
  dailyActiveUsers: Scalars['Int']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface.  */
  dailyTransactionCount: Scalars['Int']['output'];
  /**  Total number of pools  */
  totalPoolCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in an day  */
  dailyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in an day  */
  dailyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in an day  */
  dailySwapCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Arbitrum_UsageMetricsDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Arbitrum_DexAmmProtocol_filter>;
  dailyActiveUsers?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_not?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyActiveUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyTransactionCount?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyTransactionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_not?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_UsageMetricsDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_UsageMetricsDailySnapshot_filter>>>;
};

export type Arbitrum_UsageMetricsDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'dailyActiveUsers'
  | 'cumulativeUniqueUsers'
  | 'dailyTransactionCount'
  | 'totalPoolCount'
  | 'dailyDepositCount'
  | 'dailyWithdrawCount'
  | 'dailySwapCount'
  | 'timestamp'
  | 'blockNumber';

export type Arbitrum_UsageMetricsHourlySnapshot = {
  /**  { # of hours since Unix epoch time }  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Number of hours since Unix epoch time  */
  hour: Scalars['Int']['output'];
  /**  Protocol this snapshot is associated with  */
  protocol: Arbitrum_DexAmmProtocol;
  /**  Number of unique hourly active users  */
  hourlyActiveUsers: Scalars['Int']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.  */
  hourlyTransactionCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in an hour  */
  hourlyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in an hour  */
  hourlyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in an hour  */
  hourlySwapCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Arbitrum_UsageMetricsHourlySnapshot_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hour?: InputMaybe<Scalars['Int']['input']>;
  hour_not?: InputMaybe<Scalars['Int']['input']>;
  hour_gt?: InputMaybe<Scalars['Int']['input']>;
  hour_lt?: InputMaybe<Scalars['Int']['input']>;
  hour_gte?: InputMaybe<Scalars['Int']['input']>;
  hour_lte?: InputMaybe<Scalars['Int']['input']>;
  hour_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hour_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Arbitrum_DexAmmProtocol_filter>;
  hourlyActiveUsers?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyActiveUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyTransactionCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyTransactionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_UsageMetricsHourlySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_UsageMetricsHourlySnapshot_filter>>>;
};

export type Arbitrum_UsageMetricsHourlySnapshot_orderBy =
  | 'id'
  | 'hour'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'hourlyActiveUsers'
  | 'cumulativeUniqueUsers'
  | 'hourlyTransactionCount'
  | 'hourlyDepositCount'
  | 'hourlyWithdrawCount'
  | 'hourlySwapCount'
  | 'timestamp'
  | 'blockNumber';

export type Arbitrum_Withdraw = {
  /**  { Transaction hash }-{ Log index } */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Transaction hash of the transaction that emitted this event  */
  hash: Scalars['Arbitrum_Bytes']['output'];
  /**  Nonce of the transaction that emitted this event  */
  nonce: Scalars['BigInt']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Gas limit of the transaction that emitted this event  */
  gasLimit?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas used in this transaction. (Optional because not every chain will support this)  */
  gasUsed?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas price of the transaction that emitted this event  */
  gasPrice?: Maybe<Scalars['BigInt']['output']>;
  /**  The protocol this transaction belongs to  */
  protocol: Arbitrum_DexAmmProtocol;
  /**  Account that emitted this event  */
  account: Arbitrum_Account;
  /**  The user position changed by this event  */
  position?: Maybe<Arbitrum_Position>;
  /**  lower tick of position  */
  tickLower?: Maybe<Scalars['BigInt']['output']>;
  /**  upper tick of position  */
  tickUpper?: Maybe<Scalars['BigInt']['output']>;
  /**  The pool involving this event  */
  pool: Arbitrum_LiquidityPool;
  /**  Block number of this event  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this event  */
  timestamp: Scalars['BigInt']['output'];
  /**  Amount of liquidity burned  */
  liquidity: Scalars['BigInt']['output'];
  /**  Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool  */
  inputTokens: Array<Arbitrum_Token>;
  /**  Amount of input tokens in the token's native unit  */
  inputTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in the liquidity pool  */
  reserveAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool)  */
  amountUSD: Scalars['Arbitrum_BigDecimal']['output'];
};


export type Arbitrum_WithdrawinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Token_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Token_filter>;
};

export type Arbitrum_Withdraw_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Arbitrum_DexAmmProtocol_filter>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Arbitrum_Account_filter>;
  position?: InputMaybe<Scalars['String']['input']>;
  position_not?: InputMaybe<Scalars['String']['input']>;
  position_gt?: InputMaybe<Scalars['String']['input']>;
  position_lt?: InputMaybe<Scalars['String']['input']>;
  position_gte?: InputMaybe<Scalars['String']['input']>;
  position_lte?: InputMaybe<Scalars['String']['input']>;
  position_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_contains?: InputMaybe<Scalars['String']['input']>;
  position_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_contains?: InputMaybe<Scalars['String']['input']>;
  position_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_?: InputMaybe<Arbitrum_Position_filter>;
  tickLower?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickLower_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Arbitrum_LiquidityPool_filter>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Arbitrum_Token_filter>;
  inputTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountUSD?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountUSD_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountUSD_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountUSD_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountUSD_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountUSD_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  amountUSD_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum_Withdraw_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum_Withdraw_filter>>>;
};

export type Arbitrum_Withdraw_orderBy =
  | 'id'
  | 'hash'
  | 'nonce'
  | 'logIndex'
  | 'gasLimit'
  | 'gasUsed'
  | 'gasPrice'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'position'
  | 'position__id'
  | 'position__hashOpened'
  | 'position__hashClosed'
  | 'position__blockNumberOpened'
  | 'position__timestampOpened'
  | 'position__blockNumberClosed'
  | 'position__timestampClosed'
  | 'position__liquidityTokenType'
  | 'position__liquidity'
  | 'position__liquidityUSD'
  | 'position__cumulativeDepositUSD'
  | 'position__cumulativeWithdrawUSD'
  | 'position__depositCount'
  | 'position__withdrawCount'
  | 'tickLower'
  | 'tickUpper'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'blockNumber'
  | 'timestamp'
  | 'liquidity'
  | 'inputTokens'
  | 'inputTokenAmounts'
  | 'reserveAmounts'
  | 'amountUSD';

export type Arbitrum__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['Arbitrum_Bytes']['output']>;
  /** The block number */
  number: Scalars['Int']['output'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']['output']>;
  /** The hash of the parent block */
  parentHash?: Maybe<Scalars['Arbitrum_Bytes']['output']>;
};

/**   Used to keep track of the price of Ether/TVL in USD, pool deposit count, and total unique users  */
export type Arbitrum__HelperStore = {
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Token Prices  */
  valueDecimalList?: Maybe<Array<Scalars['Arbitrum_BigDecimal']['output']>>;
  /**  price of ETH/TVL in USD  */
  valueDecimal?: Maybe<Scalars['Arbitrum_BigDecimal']['output']>;
  /**  # of deposits, # of unique users  */
  valueInt?: Maybe<Scalars['Int']['output']>;
};

export type Arbitrum__HelperStore_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  valueDecimalList?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  valueDecimalList_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  valueDecimalList_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  valueDecimalList_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  valueDecimalList_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  valueDecimalList_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  valueDecimal?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  valueDecimal_not?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  valueDecimal_gt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  valueDecimal_lt?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  valueDecimal_gte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  valueDecimal_lte?: InputMaybe<Scalars['Arbitrum_BigDecimal']['input']>;
  valueDecimal_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  valueDecimal_not_in?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  valueInt?: InputMaybe<Scalars['Int']['input']>;
  valueInt_not?: InputMaybe<Scalars['Int']['input']>;
  valueInt_gt?: InputMaybe<Scalars['Int']['input']>;
  valueInt_lt?: InputMaybe<Scalars['Int']['input']>;
  valueInt_gte?: InputMaybe<Scalars['Int']['input']>;
  valueInt_lte?: InputMaybe<Scalars['Int']['input']>;
  valueInt_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  valueInt_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum__HelperStore_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum__HelperStore_filter>>>;
};

export type Arbitrum__HelperStore_orderBy =
  | 'id'
  | 'valueDecimalList'
  | 'valueDecimal'
  | 'valueInt';

export type Arbitrum__LiquidityPoolAmount = {
  /**  Smart contract address of the pool  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool  */
  inputTokens: Array<Arbitrum_Token>;
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['Arbitrum_BigDecimal']['output']>;
  tokenPrices: Array<Scalars['Arbitrum_BigDecimal']['output']>;
};


export type Arbitrum__LiquidityPoolAmountinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_Token_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_Token_filter>;
};

export type Arbitrum__LiquidityPoolAmount_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Arbitrum_Token_filter>;
  inputTokenBalances?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  tokenPrices?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  tokenPrices_not?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  tokenPrices_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  tokenPrices_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  tokenPrices_not_contains?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  tokenPrices_not_contains_nocase?: InputMaybe<Array<Scalars['Arbitrum_BigDecimal']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum__LiquidityPoolAmount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum__LiquidityPoolAmount_filter>>>;
};

export type Arbitrum__LiquidityPoolAmount_orderBy =
  | 'id'
  | 'inputTokens'
  | 'inputTokenBalances'
  | 'tokenPrices';

/** The type for the top-level _meta field */
export type Arbitrum__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: Arbitrum__Block_;
  /** The deployment ID */
  deployment: Scalars['String']['output'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean']['output'];
};

export type Arbitrum__SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

/**  This is used to keep tract of the derived price of tokens in ethereum and the whitelisted pools to which it belongs */
export type Arbitrum__TokenWhitelist = {
  /**  Token Address  */
  id: Scalars['Arbitrum_Bytes']['output'];
  /**  pools token is in that are white listed for USD pricing  */
  whitelistPools: Array<Arbitrum_LiquidityPool>;
};


/**  This is used to keep tract of the derived price of tokens in ethereum and the whitelisted pools to which it belongs */
export type Arbitrum__TokenWhitelistwhitelistPoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Arbitrum_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Arbitrum_OrderDirection>;
  where?: InputMaybe<Arbitrum_LiquidityPool_filter>;
};

export type Arbitrum__TokenWhitelistSymbol = {
  /**  Whitelist Token Symbol  */
  id: Scalars['ID']['output'];
  /**  Whitelist Token Address */
  address: Scalars['Arbitrum_Bytes']['output'];
};

export type Arbitrum__TokenWhitelistSymbol_filter = {
  id?: InputMaybe<Scalars['ID']['input']>;
  id_not?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  address?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  address_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  address_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  address_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  address_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  address_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  address_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  address_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  address_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  address_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum__TokenWhitelistSymbol_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum__TokenWhitelistSymbol_filter>>>;
};

export type Arbitrum__TokenWhitelistSymbol_orderBy =
  | 'id'
  | 'address';

export type Arbitrum__TokenWhitelist_filter = {
  id?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Arbitrum_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Arbitrum_Bytes']['input']>;
  whitelistPools?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_not?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_?: InputMaybe<Arbitrum_LiquidityPool_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Arbitrum_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Arbitrum__TokenWhitelist_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Arbitrum__TokenWhitelist_filter>>>;
};

export type Arbitrum__TokenWhitelist_orderBy =
  | 'id'
  | 'whitelistPools';

export type Base_Account = {
  /**  { Account address }  */
  id: Scalars['Base_Bytes']['output'];
  /**  Number of positions this account has  */
  positionCount: Scalars['Int']['output'];
  /**  All positions that belong to this account  */
  positions: Array<Base_Position>;
  /**  Number of open positions this account has  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions this account has  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Number of deposits this account made  */
  depositCount: Scalars['Int']['output'];
  /**  All deposit events of this account  */
  deposits: Array<Base_Deposit>;
  /**  Number of withdrawals this account made  */
  withdrawCount: Scalars['Int']['output'];
  /**  All withdraw events of this account  */
  withdraws: Array<Base_Withdraw>;
  /**  Number of times this account has traded/swapped */
  swapCount: Scalars['Int']['output'];
  /**  All swap events of this account  */
  swaps: Array<Base_Swap>;
};


export type Base_AccountpositionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Position_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Position_filter>;
};


export type Base_AccountdepositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Deposit_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Deposit_filter>;
};


export type Base_AccountwithdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Withdraw_filter>;
};


export type Base_AccountswapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Swap_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Swap_filter>;
};

export type Base_Account_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positions_?: InputMaybe<Base_Position_filter>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount?: InputMaybe<Scalars['Int']['input']>;
  depositCount_not?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  deposits_?: InputMaybe<Base_Deposit_filter>;
  withdrawCount?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdraws_?: InputMaybe<Base_Withdraw_filter>;
  swapCount?: InputMaybe<Scalars['Int']['input']>;
  swapCount_not?: InputMaybe<Scalars['Int']['input']>;
  swapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  swapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  swapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  swapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  swapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  swaps_?: InputMaybe<Base_Swap_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_Account_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_Account_filter>>>;
};

export type Base_Account_orderBy =
  | 'id'
  | 'positionCount'
  | 'positions'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'depositCount'
  | 'deposits'
  | 'withdrawCount'
  | 'withdraws'
  | 'swapCount'
  | 'swaps';

export type Base_ActiveAccount = {
  /**  { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch }  */
  id: Scalars['Base_Bytes']['output'];
};

export type Base_ActiveAccount_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_ActiveAccount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_ActiveAccount_filter>>>;
};

export type Base_ActiveAccount_orderBy =
  | 'id';

export type Base_Aggregation_interval =
  | 'hour'
  | 'day';

export type Base_BlockChangedFilter = {
  number_gte: Scalars['Int']['input'];
};

export type Base_Block_height = {
  hash?: InputMaybe<Scalars['Base_Bytes']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  number_gte?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * An event is any user action that occurs in a protocol. Generally, they are Ethereum events
 * emitted by a function in the smart contracts, stored in transaction receipts as event logs.
 * However, some user actions of interest are function calls that don't emit events. For example,
 * the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
 * store them as events, although they are not technically Ethereum events emitted by smart
 * contracts.
 *
 */
export type Base_Deposit = {
  /**  { Transaction hash }-{ Log index }  */
  id: Scalars['Base_Bytes']['output'];
  /**  Transaction hash of the transaction that emitted this event  */
  hash: Scalars['Base_Bytes']['output'];
  /**  Nonce of the transaction that emitted this event  */
  nonce: Scalars['BigInt']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Gas limit of the transaction that emitted this event  */
  gasLimit?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas used in this transaction. (Optional because not every chain will support this)  */
  gasUsed?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas price of the transaction that emitted this event  */
  gasPrice?: Maybe<Scalars['BigInt']['output']>;
  /**  The protocol this transaction belongs to  */
  protocol: Base_DexAmmProtocol;
  /**  Account that emitted this event  */
  account: Base_Account;
  /**  The user position changed by this event  */
  position?: Maybe<Base_Position>;
  /**  The pool involving this event  */
  pool: Base_LiquidityPool;
  /**  lower tick of position  */
  tickLower?: Maybe<Scalars['BigInt']['output']>;
  /**  upper tick of position  */
  tickUpper?: Maybe<Scalars['BigInt']['output']>;
  /**  Block number of this event  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this event  */
  timestamp: Scalars['BigInt']['output'];
  /**  Amount of liquidity minted  */
  liquidity: Scalars['BigInt']['output'];
  /**  Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool  */
  inputTokens: Array<Base_Token>;
  /**  Amount of input tokens in the token's native unit  */
  inputTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in the liquidity pool  */
  reserveAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool)  */
  amountUSD: Scalars['Base_BigDecimal']['output'];
};


/**
 * An event is any user action that occurs in a protocol. Generally, they are Ethereum events
 * emitted by a function in the smart contracts, stored in transaction receipts as event logs.
 * However, some user actions of interest are function calls that don't emit events. For example,
 * the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
 * store them as events, although they are not technically Ethereum events emitted by smart
 * contracts.
 *
 */
export type Base_DepositinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Token_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Token_filter>;
};

export type Base_Deposit_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Base_DexAmmProtocol_filter>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Base_Account_filter>;
  position?: InputMaybe<Scalars['String']['input']>;
  position_not?: InputMaybe<Scalars['String']['input']>;
  position_gt?: InputMaybe<Scalars['String']['input']>;
  position_lt?: InputMaybe<Scalars['String']['input']>;
  position_gte?: InputMaybe<Scalars['String']['input']>;
  position_lte?: InputMaybe<Scalars['String']['input']>;
  position_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_contains?: InputMaybe<Scalars['String']['input']>;
  position_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_contains?: InputMaybe<Scalars['String']['input']>;
  position_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_?: InputMaybe<Base_Position_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Base_LiquidityPool_filter>;
  tickLower?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickLower_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Base_Token_filter>;
  inputTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_Deposit_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_Deposit_filter>>>;
};

export type Base_Deposit_orderBy =
  | 'id'
  | 'hash'
  | 'nonce'
  | 'logIndex'
  | 'gasLimit'
  | 'gasUsed'
  | 'gasPrice'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'position'
  | 'position__id'
  | 'position__hashOpened'
  | 'position__hashClosed'
  | 'position__blockNumberOpened'
  | 'position__timestampOpened'
  | 'position__blockNumberClosed'
  | 'position__timestampClosed'
  | 'position__liquidityTokenType'
  | 'position__liquidity'
  | 'position__liquidityUSD'
  | 'position__cumulativeDepositUSD'
  | 'position__cumulativeWithdrawUSD'
  | 'position__depositCount'
  | 'position__withdrawCount'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'tickLower'
  | 'tickUpper'
  | 'blockNumber'
  | 'timestamp'
  | 'liquidity'
  | 'inputTokens'
  | 'inputTokenAmounts'
  | 'reserveAmounts'
  | 'amountUSD';

export type Base_DexAmmProtocol = Base_Protocol & {
  /**  Smart contract address of the protocol's main contract (Factory, Registry, etc)  */
  id: Scalars['Base_Bytes']['output'];
  /**  Name of the protocol, including version. e.g. Uniswap v3  */
  name: Scalars['String']['output'];
  /**  Slug of protocol, including version. e.g. uniswap-v3  */
  slug: Scalars['String']['output'];
  /**  Version of the subgraph schema, in SemVer format (e.g. 1.0.0)  */
  schemaVersion: Scalars['String']['output'];
  /**  Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)  */
  subgraphVersion: Scalars['String']['output'];
  /**  Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)  */
  methodologyVersion: Scalars['String']['output'];
  /**  The blockchain network this subgraph is indexing on  */
  network: Base_Network;
  /**  The type of protocol (e.g. DEX, Lending, Yield, etc)  */
  type: Base_ProtocolType;
  /**  Current TVL (Total Value Locked) of the entire protocol  */
  totalValueLockedUSD: Scalars['Base_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Base_BigDecimal']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Base_BigDecimal']['output'];
  /**  All protocol-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedProtocolSideValueUSD: Scalars['Base_BigDecimal']['output'];
  /**  All supply-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedSupplySideValueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
  protocolControlledValueUSD?: Maybe<Scalars['Base_BigDecimal']['output']>;
  /**  All historical volume in USD  */
  cumulativeVolumeUSD: Scalars['Base_BigDecimal']['output'];
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  cumulativeSupplySideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  cumulativeTotalRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Number of cumulative liquidity providers  */
  cumulativeUniqueLPs: Scalars['Int']['output'];
  /**  Number of cumulative traders  */
  cumulativeUniqueTraders: Scalars['Int']['output'];
  /**  Total number of pools  */
  totalPoolCount: Scalars['Int']['output'];
  /**  Total number of open positions  */
  openPositionCount: Scalars['Int']['output'];
  /**  Total number of positions (open and closed)  */
  cumulativePositionCount: Scalars['Int']['output'];
  /**  Day ID of the most recent daily snapshot  */
  lastSnapshotDayID: Scalars['Int']['output'];
  /**  Timestamp of the last time this entity was updated  */
  lastUpdateTimestamp: Scalars['BigInt']['output'];
  /**  Block number of the last time this entity was updated  */
  lastUpdateBlockNumber: Scalars['BigInt']['output'];
  /**  Daily usage metrics for this protocol  */
  dailyUsageMetrics: Array<Base_UsageMetricsDailySnapshot>;
  /**  Hourly usage metrics for this protocol  */
  hourlyUsageMetrics: Array<Base_UsageMetricsHourlySnapshot>;
  /**  Daily financial metrics for this protocol  */
  financialMetrics: Array<Base_FinancialsDailySnapshot>;
  /**  All pools that belong to this protocol  */
  pools: Array<Base_LiquidityPool>;
  /**  This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis  */
  _regenesis: Scalars['Boolean']['output'];
};


export type Base_DexAmmProtocoldailyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_UsageMetricsDailySnapshot_filter>;
};


export type Base_DexAmmProtocolhourlyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_UsageMetricsHourlySnapshot_filter>;
};


export type Base_DexAmmProtocolfinancialMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_FinancialsDailySnapshot_filter>;
};


export type Base_DexAmmProtocolpoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_LiquidityPool_filter>;
};

export type Base_DexAmmProtocol_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  slug_not?: InputMaybe<Scalars['String']['input']>;
  slug_gt?: InputMaybe<Scalars['String']['input']>;
  slug_lt?: InputMaybe<Scalars['String']['input']>;
  slug_gte?: InputMaybe<Scalars['String']['input']>;
  slug_lte?: InputMaybe<Scalars['String']['input']>;
  slug_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  slug_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  network?: InputMaybe<Base_Network>;
  network_not?: InputMaybe<Base_Network>;
  network_in?: InputMaybe<Array<Base_Network>>;
  network_not_in?: InputMaybe<Array<Base_Network>>;
  type?: InputMaybe<Base_ProtocolType>;
  type_not?: InputMaybe<Base_ProtocolType>;
  type_in?: InputMaybe<Array<Base_ProtocolType>>;
  type_not_in?: InputMaybe<Array<Base_ProtocolType>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  protocolControlledValueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueLPs?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueLPs_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueLPs_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueTraders?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueTraders_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueTraders_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_not?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativePositionCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativePositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativePositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastUpdateTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyUsageMetrics_?: InputMaybe<Base_UsageMetricsDailySnapshot_filter>;
  hourlyUsageMetrics_?: InputMaybe<Base_UsageMetricsHourlySnapshot_filter>;
  financialMetrics_?: InputMaybe<Base_FinancialsDailySnapshot_filter>;
  pools_?: InputMaybe<Base_LiquidityPool_filter>;
  _regenesis?: InputMaybe<Scalars['Boolean']['input']>;
  _regenesis_not?: InputMaybe<Scalars['Boolean']['input']>;
  _regenesis_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  _regenesis_not_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_DexAmmProtocol_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_DexAmmProtocol_filter>>>;
};

export type Base_DexAmmProtocol_orderBy =
  | 'id'
  | 'name'
  | 'slug'
  | 'schemaVersion'
  | 'subgraphVersion'
  | 'methodologyVersion'
  | 'network'
  | 'type'
  | 'totalValueLockedUSD'
  | 'totalLiquidityUSD'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideValueUSD'
  | 'uncollectedSupplySideValueUSD'
  | 'protocolControlledValueUSD'
  | 'cumulativeVolumeUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'cumulativeUniqueUsers'
  | 'cumulativeUniqueLPs'
  | 'cumulativeUniqueTraders'
  | 'totalPoolCount'
  | 'openPositionCount'
  | 'cumulativePositionCount'
  | 'lastSnapshotDayID'
  | 'lastUpdateTimestamp'
  | 'lastUpdateBlockNumber'
  | 'dailyUsageMetrics'
  | 'hourlyUsageMetrics'
  | 'financialMetrics'
  | 'pools'
  | '_regenesis';

export type Base_FinancialsDailySnapshot = {
  /**  ID is # of days since Unix epoch time  */
  id: Scalars['Base_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  Protocol this snapshot is associated with  */
  protocol: Base_DexAmmProtocol;
  /**  Current TVL (Total Value Locked) of the entire protocol  */
  totalValueLockedUSD: Scalars['Base_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Base_BigDecimal']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Base_BigDecimal']['output'];
  /**  All protocol-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedProtocolSideValueUSD: Scalars['Base_BigDecimal']['output'];
  /**  All supply-side value locking in USD that remains uncollected and unused in the protocol.  */
  uncollectedSupplySideValueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
  protocolControlledValueUSD?: Maybe<Scalars['Base_BigDecimal']['output']>;
  /**  All trade volume occurred in a given day, in USD  */
  dailyVolumeUSD: Scalars['Base_BigDecimal']['output'];
  /**  All historical trade volume in USD  */
  cumulativeVolumeUSD: Scalars['Base_BigDecimal']['output'];
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  dailySupplySideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  cumulativeSupplySideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  dailyProtocolSideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  dailyTotalRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  cumulativeTotalRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Base_FinancialsDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Base_DexAmmProtocol_filter>;
  totalValueLockedUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedProtocolSideValueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  uncollectedSupplySideValueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  protocolControlledValueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyVolumeUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyVolumeUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyVolumeUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyVolumeUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyVolumeUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyVolumeUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyVolumeUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyVolumeUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyTotalRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyTotalRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_FinancialsDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_FinancialsDailySnapshot_filter>>>;
};

export type Base_FinancialsDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'totalValueLockedUSD'
  | 'totalLiquidityUSD'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideValueUSD'
  | 'uncollectedSupplySideValueUSD'
  | 'protocolControlledValueUSD'
  | 'dailyVolumeUSD'
  | 'cumulativeVolumeUSD'
  | 'dailySupplySideRevenueUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'dailyProtocolSideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'dailyTotalRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'timestamp'
  | 'blockNumber';

export type Base_LiquidityPool = {
  /**  Smart contract address of the pool  */
  id: Scalars['Base_Bytes']['output'];
  /**  The protocol this pool belongs to  */
  protocol: Base_DexAmmProtocol;
  /**  Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)  */
  name?: Maybe<Scalars['String']['output']>;
  /**  Symbol of liquidity pool (e.g. 3CRV)  */
  symbol?: Maybe<Scalars['String']['output']>;
  /**  Token that is to represent ownership of liquidity  */
  liquidityToken?: Maybe<Base_Token>;
  /**  Type of token used to track liquidity  */
  liquidityTokenType?: Maybe<Base_TokenType>;
  /**  Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer  */
  inputTokens: Array<Base_Token>;
  /**  Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon  */
  rewardTokens?: Maybe<Array<Base_RewardToken>>;
  /**  Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee. )  */
  fees: Array<Base_LiquidityPoolFee>;
  /**  Whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol.  */
  isSingleSided: Scalars['Boolean']['output'];
  /**  Creation timestamp  */
  createdTimestamp: Scalars['BigInt']['output'];
  /**  Creation block number  */
  createdBlockNumber: Scalars['BigInt']['output'];
  /**  Current tick representing the price of token0/token1  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Current TVL (Total Value Locked) of this pool in USD  */
  totalValueLockedUSD: Scalars['Base_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity for this pool.  */
  totalLiquidity: Scalars['BigInt']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Base_BigDecimal']['output'];
  /**  All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidity: Scalars['BigInt']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Base_BigDecimal']['output'];
  /**  All protocol-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All protocol-side value locking in USD that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideValuesUSD: Array<Scalars['Base_BigDecimal']['output']>;
  /**  All supply-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedSupplySideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All supply-side value locked in USD that remains uncollected and unused in the pool.  */
  uncollectedSupplySideValuesUSD: Array<Scalars['Base_BigDecimal']['output']>;
  /**  All revenue generated by the liquidity pool, accrued to the supply side.  */
  cumulativeSupplySideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool, accrued to the protocol.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool.  */
  cumulativeTotalRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenUSD: Array<Scalars['Base_BigDecimal']['output']>;
  /**  All historical trade volume occurred in this pool, in USD  */
  cumulativeVolumeUSD: Scalars['Base_BigDecimal']['output'];
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalancesUSD: Array<Scalars['Base_BigDecimal']['output']>;
  /**  Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool  */
  inputTokenWeights: Array<Scalars['Base_BigDecimal']['output']>;
  /**  Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.  */
  stakedOutputTokenAmount?: Maybe<Scalars['BigInt']['output']>;
  /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsUSD?: Maybe<Array<Scalars['Base_BigDecimal']['output']>>;
  /**  Total number of deposits (add liquidity)  */
  cumulativeDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity)  */
  cumulativeWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps)  */
  cumulativeSwapCount: Scalars['Int']['output'];
  /**  All positions in this market  */
  positions: Array<Base_Position>;
  /**  Number of positions in this market  */
  positionCount: Scalars['Int']['output'];
  /**  Number of open positions in this market  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions in this market  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Day ID of the most recent daily snapshot  */
  lastSnapshotDayID: Scalars['Int']['output'];
  /**  Hour ID of the most recent hourly snapshot  */
  lastSnapshotHourID: Scalars['Int']['output'];
  /**  Timestamp of the last time this entity was updated  */
  lastUpdateTimestamp: Scalars['BigInt']['output'];
  /**  Block number of the last time this entity was updated  */
  lastUpdateBlockNumber: Scalars['BigInt']['output'];
  /**  Liquidity pool daily snapshots  */
  dailySnapshots: Array<Base_LiquidityPoolDailySnapshot>;
  /**  Liquidity pool hourly snapshots  */
  hourlySnapshots: Array<Base_LiquidityPoolHourlySnapshot>;
  /**  All deposit (add liquidity) events occurred in this pool  */
  deposits: Array<Base_Deposit>;
  /**  All withdraw (remove liquidity) events occurred in this pool  */
  withdraws: Array<Base_Withdraw>;
  /**  All trade (swap) events occurred in this pool  */
  swaps: Array<Base_Swap>;
};


export type Base_LiquidityPoolinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Token_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Token_filter>;
};


export type Base_LiquidityPoolrewardTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_RewardToken_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_RewardToken_filter>;
};


export type Base_LiquidityPoolfeesArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_LiquidityPoolFee_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_LiquidityPoolFee_filter>;
};


export type Base_LiquidityPoolpositionsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Position_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Position_filter>;
};


export type Base_LiquidityPooldailySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_LiquidityPoolDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_LiquidityPoolDailySnapshot_filter>;
};


export type Base_LiquidityPoolhourlySnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_LiquidityPoolHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_LiquidityPoolHourlySnapshot_filter>;
};


export type Base_LiquidityPooldepositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Deposit_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Deposit_filter>;
};


export type Base_LiquidityPoolwithdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Withdraw_filter>;
};


export type Base_LiquidityPoolswapsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Swap_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Swap_filter>;
};

export type Base_LiquidityPoolDailySnapshot = {
  /**  { Smart contract address of the pool }-{ # of days since Unix epoch time }  */
  id: Scalars['Base_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  The protocol this snapshot belongs to  */
  protocol: Base_DexAmmProtocol;
  /**  The pool this snapshot belongs to  */
  pool: Base_LiquidityPool;
  /**  Current tick representing the price of token0/token1  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Current TVL (Total Value Locked) of this pool  */
  totalValueLockedUSD: Scalars['Base_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity for this pool.  */
  totalLiquidity: Scalars['BigInt']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Base_BigDecimal']['output'];
  /**  All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidity: Scalars['BigInt']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Base_BigDecimal']['output'];
  /**  All protocol-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All protocol-side value locking in USD that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideValuesUSD: Array<Scalars['Base_BigDecimal']['output']>;
  /**  All supply-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedSupplySideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All supply-side value locked in USD that remains uncollected and unused in the pool.  */
  uncollectedSupplySideValuesUSD: Array<Scalars['Base_BigDecimal']['output']>;
  /**  All revenue generated by the liquidity pool, accrued to the supply side.  */
  cumulativeSupplySideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Daily revenue generated by the liquidity pool, accrued to the supply side.  */
  dailySupplySideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool, accrued to the protocol.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Daily revenue generated by the liquidity pool, accrued to the protocol.  */
  dailyProtocolSideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool.  */
  cumulativeTotalRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Daily revenue generated by the liquidity pool.  */
  dailyTotalRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  All historical trade volume occurred in this pool, in USD  */
  cumulativeVolumeUSD: Scalars['Base_BigDecimal']['output'];
  /**  All trade volume occurred in a given day, in USD  */
  dailyVolumeUSD: Scalars['Base_BigDecimal']['output'];
  /**  All trade volume , in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  dailyVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenUSD: Array<Scalars['Base_BigDecimal']['output']>;
  /**  All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  dailyVolumeByTokenUSD: Array<Scalars['Base_BigDecimal']['output']>;
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalancesUSD: Array<Scalars['Base_BigDecimal']['output']>;
  /**  Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool  */
  inputTokenWeights: Array<Scalars['Base_BigDecimal']['output']>;
  /**  Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.  */
  stakedOutputTokenAmount?: Maybe<Scalars['BigInt']['output']>;
  /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsUSD?: Maybe<Array<Scalars['Base_BigDecimal']['output']>>;
  /**  Total number of deposits (add liquidity)  */
  cumulativeDepositCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in a day  */
  dailyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity)  */
  cumulativeWithdrawCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in a day  */
  dailyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps)  */
  cumulativeSwapCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in a day  */
  dailySwapCount: Scalars['Int']['output'];
  /**  Number of positions in this market  */
  positionCount: Scalars['Int']['output'];
  /**  Number of open positions in this market  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions in this market  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Base_LiquidityPoolDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Base_DexAmmProtocol_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Base_LiquidityPool_filter>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  activeLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideValuesUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideValuesUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyTotalRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyTotalRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyTotalRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyTotalRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyVolumeUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyVolumeUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyVolumeUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyVolumeUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyVolumeUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyVolumeUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  dailyVolumeUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyVolumeUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailyVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  dailyVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalances?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalancesUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeDepositCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_LiquidityPoolDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_LiquidityPoolDailySnapshot_filter>>>;
};

export type Base_LiquidityPoolDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'tick'
  | 'totalValueLockedUSD'
  | 'totalLiquidity'
  | 'totalLiquidityUSD'
  | 'activeLiquidity'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideTokenAmounts'
  | 'uncollectedProtocolSideValuesUSD'
  | 'uncollectedSupplySideTokenAmounts'
  | 'uncollectedSupplySideValuesUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'dailySupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'dailyProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'dailyTotalRevenueUSD'
  | 'cumulativeVolumeUSD'
  | 'dailyVolumeUSD'
  | 'cumulativeVolumeByTokenAmount'
  | 'dailyVolumeByTokenAmount'
  | 'cumulativeVolumeByTokenUSD'
  | 'dailyVolumeByTokenUSD'
  | 'inputTokenBalances'
  | 'inputTokenBalancesUSD'
  | 'inputTokenWeights'
  | 'stakedOutputTokenAmount'
  | 'rewardTokenEmissionsAmount'
  | 'rewardTokenEmissionsUSD'
  | 'cumulativeDepositCount'
  | 'dailyDepositCount'
  | 'cumulativeWithdrawCount'
  | 'dailyWithdrawCount'
  | 'cumulativeSwapCount'
  | 'dailySwapCount'
  | 'positionCount'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'timestamp'
  | 'blockNumber';

export type Base_LiquidityPoolFee = {
  /**  { Fee type }-{ Pool address }  */
  id: Scalars['Base_Bytes']['output'];
  /**  Fee as a percentage of the trade (swap) amount. Does not always apply  */
  feePercentage?: Maybe<Scalars['Base_BigDecimal']['output']>;
  /**  Type of fee this pool uses  */
  feeType: Base_LiquidityPoolFeeType;
};

export type Base_LiquidityPoolFeeType =
  /**  Total fixed fee paid by the user per trade, as a percentage of the traded amount. e.g. 0.3% for Uniswap v2, 0.3% for Sushiswap, 0.04% for Curve v1.  */
  | 'FIXED_TRADING_FEE'
  /**  Some protocols use tiered fees instead of fixed fee (e.g. DYDX, DODO). Set `feePercentage` as 0 but handle the tiered fees in the mapping code.  */
  | 'TIERED_TRADING_FEE'
  /**  Some protocols use dynamic fees instead of fixed fee (e.g. Balancer v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.  */
  | 'DYNAMIC_TRADING_FEE'
  /**  Fixed fee that's paid to the LP, as a percentage of the traded amount. e.g. 0.25% for Sushiswap, 0.02% for Curve v1.  */
  | 'FIXED_LP_FEE'
  /**  Some protocols use dynamic LP fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.  */
  | 'DYNAMIC_LP_FEE'
  /**  Fixed fee that's paid to the protocol, as a percentage of the traded amount. e.g. 0.05% for Sushiswap, 0.02% for Curve v1.  */
  | 'FIXED_PROTOCOL_FEE'
  /**  Some protocols use dynamic protocol fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.  */
  | 'DYNAMIC_PROTOCOL_FEE'
  /**  One-time fee charged by the protocol during deposit, in percentages of the deposit token  */
  | 'DEPOSIT_FEE'
  /**  One-time fee charged by the protocol (e.g. Bancor v3) during withdrawal, in percentages of the withdrawal token  */
  | 'WITHDRAWAL_FEE';

export type Base_LiquidityPoolFee_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  feePercentage?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  feePercentage_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  feePercentage_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  feePercentage_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  feePercentage_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  feePercentage_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  feePercentage_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  feePercentage_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  feeType?: InputMaybe<Base_LiquidityPoolFeeType>;
  feeType_not?: InputMaybe<Base_LiquidityPoolFeeType>;
  feeType_in?: InputMaybe<Array<Base_LiquidityPoolFeeType>>;
  feeType_not_in?: InputMaybe<Array<Base_LiquidityPoolFeeType>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_LiquidityPoolFee_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_LiquidityPoolFee_filter>>>;
};

export type Base_LiquidityPoolFee_orderBy =
  | 'id'
  | 'feePercentage'
  | 'feeType';

export type Base_LiquidityPoolHourlySnapshot = {
  /**  { Smart contract address of the pool }-{ # of hours since Unix epoch time }  */
  id: Scalars['Base_Bytes']['output'];
  /**  Number of hours since Unix epoch time  */
  hour: Scalars['Int']['output'];
  /**  The protocol this snapshot belongs to  */
  protocol: Base_DexAmmProtocol;
  /**  The pool this snapshot belongs to  */
  pool: Base_LiquidityPool;
  /**  Current tick representing the price of token0/token1  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Current TVL (Total Value Locked) of this pool  */
  totalValueLockedUSD: Scalars['Base_BigDecimal']['output'];
  /**  The sum of all active and non-active liquidity for this pool.  */
  totalLiquidity: Scalars['BigInt']['output'];
  /**  The sum of all active and non-active liquidity in USD for this pool.  */
  totalLiquidityUSD: Scalars['Base_BigDecimal']['output'];
  /**  All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidity: Scalars['BigInt']['output'];
  /**  All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.  */
  activeLiquidityUSD: Scalars['Base_BigDecimal']['output'];
  /**  All protocol-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All protocol-side value locking in USD that remains uncollected and unused in the pool.  */
  uncollectedProtocolSideValuesUSD: Array<Scalars['Base_BigDecimal']['output']>;
  /**  All supply-side value locked in token amounts that remains uncollected and unused in the pool.  */
  uncollectedSupplySideTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  All supply-side value locked in USD that remains uncollected and unused in the pool.  */
  uncollectedSupplySideValuesUSD: Array<Scalars['Base_BigDecimal']['output']>;
  /**  All revenue generated by the liquidity pool, accrued to the supply side.  */
  cumulativeSupplySideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Hourly revenue generated by the liquidity pool, accrued to the supply side.  */
  hourlySupplySideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool, accrued to the protocol.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Hourly revenue generated by the liquidity pool, accrued to the protocol.  */
  hourlyProtocolSideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  All revenue generated by the liquidity pool.  */
  cumulativeTotalRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Hourly revenue generated by the liquidity pool.  */
  hourlyTotalRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  All historical trade volume occurred in this pool, in USD  */
  cumulativeVolumeUSD: Scalars['Base_BigDecimal']['output'];
  /**  All trade volume occurred in a given hour, in USD  */
  hourlyVolumeUSD: Scalars['Base_BigDecimal']['output'];
  /**  All trade volume, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.  */
  hourlyVolumeByTokenAmount: Array<Scalars['BigInt']['output']>;
  /**  All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  cumulativeVolumeByTokenUSD: Array<Scalars['Base_BigDecimal']['output']>;
  /**  All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.  */
  hourlyVolumeByTokenUSD: Array<Scalars['Base_BigDecimal']['output']>;
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalancesUSD: Array<Scalars['Base_BigDecimal']['output']>;
  /**  Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool  */
  inputTokenWeights: Array<Scalars['Base_BigDecimal']['output']>;
  /**  Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.  */
  stakedOutputTokenAmount?: Maybe<Scalars['BigInt']['output']>;
  /**  Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
  rewardTokenEmissionsUSD?: Maybe<Array<Scalars['Base_BigDecimal']['output']>>;
  /**  Total number of deposits (add liquidity)  */
  cumulativeDepositCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in an hour  */
  hourlyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity)  */
  cumulativeWithdrawCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in an hour  */
  hourlyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps)  */
  cumulativeSwapCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in an hour  */
  hourlySwapCount: Scalars['Int']['output'];
  /**  Number of positions in this market  */
  positionCount: Scalars['Int']['output'];
  /**  Number of open positions in this market  */
  openPositionCount: Scalars['Int']['output'];
  /**  Number of closed positions in this market  */
  closedPositionCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Base_LiquidityPoolHourlySnapshot_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hour?: InputMaybe<Scalars['Int']['input']>;
  hour_not?: InputMaybe<Scalars['Int']['input']>;
  hour_gt?: InputMaybe<Scalars['Int']['input']>;
  hour_lt?: InputMaybe<Scalars['Int']['input']>;
  hour_gte?: InputMaybe<Scalars['Int']['input']>;
  hour_lte?: InputMaybe<Scalars['Int']['input']>;
  hour_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hour_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Base_DexAmmProtocol_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Base_LiquidityPool_filter>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  activeLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideValuesUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideValuesUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  hourlySupplySideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  hourlySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  hourlyProtocolSideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  hourlyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  hourlyTotalRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  hourlyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  hourlyVolumeUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyVolumeUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyVolumeUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyVolumeUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyVolumeUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyVolumeUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  hourlyVolumeUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  hourlyVolumeUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  hourlyVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  hourlyVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalances?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalancesUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeDepositCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_LiquidityPoolHourlySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_LiquidityPoolHourlySnapshot_filter>>>;
};

export type Base_LiquidityPoolHourlySnapshot_orderBy =
  | 'id'
  | 'hour'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'tick'
  | 'totalValueLockedUSD'
  | 'totalLiquidity'
  | 'totalLiquidityUSD'
  | 'activeLiquidity'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideTokenAmounts'
  | 'uncollectedProtocolSideValuesUSD'
  | 'uncollectedSupplySideTokenAmounts'
  | 'uncollectedSupplySideValuesUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'hourlySupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'hourlyProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'hourlyTotalRevenueUSD'
  | 'cumulativeVolumeUSD'
  | 'hourlyVolumeUSD'
  | 'cumulativeVolumeByTokenAmount'
  | 'hourlyVolumeByTokenAmount'
  | 'cumulativeVolumeByTokenUSD'
  | 'hourlyVolumeByTokenUSD'
  | 'inputTokenBalances'
  | 'inputTokenBalancesUSD'
  | 'inputTokenWeights'
  | 'stakedOutputTokenAmount'
  | 'rewardTokenEmissionsAmount'
  | 'rewardTokenEmissionsUSD'
  | 'cumulativeDepositCount'
  | 'hourlyDepositCount'
  | 'cumulativeWithdrawCount'
  | 'hourlyWithdrawCount'
  | 'cumulativeSwapCount'
  | 'hourlySwapCount'
  | 'positionCount'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'timestamp'
  | 'blockNumber';

export type Base_LiquidityPool_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Base_DexAmmProtocol_filter>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol?: InputMaybe<Scalars['String']['input']>;
  symbol_not?: InputMaybe<Scalars['String']['input']>;
  symbol_gt?: InputMaybe<Scalars['String']['input']>;
  symbol_lt?: InputMaybe<Scalars['String']['input']>;
  symbol_gte?: InputMaybe<Scalars['String']['input']>;
  symbol_lte?: InputMaybe<Scalars['String']['input']>;
  symbol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_?: InputMaybe<Base_Token_filter>;
  liquidityTokenType?: InputMaybe<Base_TokenType>;
  liquidityTokenType_not?: InputMaybe<Base_TokenType>;
  liquidityTokenType_in?: InputMaybe<Array<Base_TokenType>>;
  liquidityTokenType_not_in?: InputMaybe<Array<Base_TokenType>>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Base_Token_filter>;
  rewardTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  rewardTokens_?: InputMaybe<Base_RewardToken_filter>;
  fees?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_not?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  fees_?: InputMaybe<Base_LiquidityPoolFee_filter>;
  isSingleSided?: InputMaybe<Scalars['Boolean']['input']>;
  isSingleSided_not?: InputMaybe<Scalars['Boolean']['input']>;
  isSingleSided_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  isSingleSided_not_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  createdTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLiquidityUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalLiquidityUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  activeLiquidity?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  activeLiquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  activeLiquidityUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  activeLiquidityUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  activeLiquidityUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedProtocolSideValuesUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedProtocolSideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  uncollectedSupplySideValuesUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  uncollectedSupplySideValuesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeVolumeByTokenUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeByTokenUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeVolumeUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeVolumeUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalances?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenBalancesUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalancesUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalancesUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenWeights_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']['input']>;
  stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeDepositCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeSwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeSwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positions_?: InputMaybe<Base_Position_filter>;
  positionCount?: InputMaybe<Scalars['Int']['input']>;
  positionCount_not?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  positionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  positionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  positionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  openPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_not?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  closedPositionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastUpdateTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  dailySnapshots_?: InputMaybe<Base_LiquidityPoolDailySnapshot_filter>;
  hourlySnapshots_?: InputMaybe<Base_LiquidityPoolHourlySnapshot_filter>;
  deposits_?: InputMaybe<Base_Deposit_filter>;
  withdraws_?: InputMaybe<Base_Withdraw_filter>;
  swaps_?: InputMaybe<Base_Swap_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_LiquidityPool_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_LiquidityPool_filter>>>;
};

export type Base_LiquidityPool_orderBy =
  | 'id'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'name'
  | 'symbol'
  | 'liquidityToken'
  | 'liquidityToken__id'
  | 'liquidityToken__name'
  | 'liquidityToken__symbol'
  | 'liquidityToken__decimals'
  | 'liquidityToken__lastPriceUSD'
  | 'liquidityToken__lastPriceBlockNumber'
  | 'liquidityToken___lastPricePool'
  | 'liquidityToken___totalSupply'
  | 'liquidityToken___totalValueLockedUSD'
  | 'liquidityToken___largePriceChangeBuffer'
  | 'liquidityToken___largeTVLImpactBuffer'
  | 'liquidityTokenType'
  | 'inputTokens'
  | 'rewardTokens'
  | 'fees'
  | 'isSingleSided'
  | 'createdTimestamp'
  | 'createdBlockNumber'
  | 'tick'
  | 'totalValueLockedUSD'
  | 'totalLiquidity'
  | 'totalLiquidityUSD'
  | 'activeLiquidity'
  | 'activeLiquidityUSD'
  | 'uncollectedProtocolSideTokenAmounts'
  | 'uncollectedProtocolSideValuesUSD'
  | 'uncollectedSupplySideTokenAmounts'
  | 'uncollectedSupplySideValuesUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'cumulativeVolumeByTokenAmount'
  | 'cumulativeVolumeByTokenUSD'
  | 'cumulativeVolumeUSD'
  | 'inputTokenBalances'
  | 'inputTokenBalancesUSD'
  | 'inputTokenWeights'
  | 'stakedOutputTokenAmount'
  | 'rewardTokenEmissionsAmount'
  | 'rewardTokenEmissionsUSD'
  | 'cumulativeDepositCount'
  | 'cumulativeWithdrawCount'
  | 'cumulativeSwapCount'
  | 'positions'
  | 'positionCount'
  | 'openPositionCount'
  | 'closedPositionCount'
  | 'lastSnapshotDayID'
  | 'lastSnapshotHourID'
  | 'lastUpdateTimestamp'
  | 'lastUpdateBlockNumber'
  | 'dailySnapshots'
  | 'hourlySnapshots'
  | 'deposits'
  | 'withdraws'
  | 'swaps';

export type Base_Network =
  | 'ARBITRUM_ONE'
  | 'ARWEAVE_MAINNET'
  | 'AURORA'
  | 'AVALANCHE'
  | 'BASE'
  | 'BOBA'
  | 'BSC'
  | 'CELO'
  | 'COSMOS'
  | 'CRONOS'
  | 'MAINNET'
  | 'FANTOM'
  | 'FUSE'
  | 'HARMONY'
  | 'JUNO'
  | 'MOONBEAM'
  | 'MOONRIVER'
  | 'NEAR_MAINNET'
  | 'OPTIMISM'
  | 'OSMOSIS'
  | 'MATIC'
  | 'XDAI';

/** Defines the order direction, either ascending or descending */
export type Base_OrderDirection =
  | 'asc'
  | 'desc';

export type Base_Position = {
  /**  { Account address }-{ Market address }-{ Count }  */
  id: Scalars['Base_Bytes']['output'];
  /**  Account that owns this position  */
  account: Base_Account;
  /**  The liquidity pool in which this position was opened  */
  pool: Base_LiquidityPool;
  /**  The hash of the transaction that opened this position  */
  hashOpened: Scalars['Base_Bytes']['output'];
  /**  The hash of the transaction that closed this position  */
  hashClosed?: Maybe<Scalars['Base_Bytes']['output']>;
  /**  Block number of when the position was opened  */
  blockNumberOpened: Scalars['BigInt']['output'];
  /**  Timestamp when the position was opened  */
  timestampOpened: Scalars['BigInt']['output'];
  /**  Block number of when the position was closed (0 if still open)  */
  blockNumberClosed?: Maybe<Scalars['BigInt']['output']>;
  /**  Timestamp when the position was closed (0 if still open)  */
  timestampClosed?: Maybe<Scalars['BigInt']['output']>;
  /**  lower tick of the position  */
  tickLower?: Maybe<Base_Tick>;
  /**  upper tick of the position  */
  tickUpper?: Maybe<Base_Tick>;
  /**  Token that is to represent ownership of liquidity  */
  liquidityToken?: Maybe<Base_Token>;
  /**  Type of token used to track liquidity  */
  liquidityTokenType?: Maybe<Base_TokenType>;
  /**  total position liquidity  */
  liquidity: Scalars['BigInt']['output'];
  /**  total position liquidity in USD  */
  liquidityUSD: Scalars['Base_BigDecimal']['output'];
  /**  amount of tokens ever deposited to position  */
  cumulativeDepositTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD deposited to position  */
  cumulativeDepositUSD: Scalars['Base_BigDecimal']['output'];
  /**  amount of tokens ever withdrawn from position (without fees)  */
  cumulativeWithdrawTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD withdrawn from position (without fees)  */
  cumulativeWithdrawUSD: Scalars['Base_BigDecimal']['output'];
  /**  Total reward token accumulated under this position, in USD  */
  cumulativeRewardUSD?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Number of deposits related to this position  */
  depositCount: Scalars['Int']['output'];
  /**  All deposit events of this position  */
  deposits: Array<Base_Deposit>;
  /**  Number of withdrawals related to this position  */
  withdrawCount: Scalars['Int']['output'];
  /**  All withdraw events of this position  */
  withdraws: Array<Base_Withdraw>;
  /**  Position daily snapshots for open positions  */
  snapshots: Array<Base_PositionSnapshot>;
};


export type Base_PositiondepositsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Deposit_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Deposit_filter>;
};


export type Base_PositionwithdrawsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Withdraw_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Withdraw_filter>;
};


export type Base_PositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_PositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_PositionSnapshot_filter>;
};

export type Base_PositionSnapshot = {
  /**  { Position ID }-{ Transaction hash }-{ Log index }  */
  id: Scalars['Base_Bytes']['output'];
  /**  Transaction hash of the transaction that triggered this snapshot  */
  hash: Scalars['Base_Bytes']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Nonce of the transaction that triggered this snapshot  */
  nonce: Scalars['BigInt']['output'];
  /**  Position of this snapshot  */
  position: Base_Position;
  /**  Type of token used to track liquidity  */
  liquidityTokenType?: Maybe<Base_TokenType>;
  /**  total position liquidity  */
  liquidity?: Maybe<Scalars['BigInt']['output']>;
  /**  total position liquidity in USD  */
  liquidityUSD?: Maybe<Scalars['Base_BigDecimal']['output']>;
  /**  amount of tokens ever deposited to position  */
  cumulativeDepositTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD deposited to position  */
  cumulativeDepositUSD: Scalars['Base_BigDecimal']['output'];
  /**  amount of tokens ever withdrawn from position (without fees)  */
  cumulativeWithdrawTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  amount of tokens in USD withdrawn from position (without fees)  */
  cumulativeWithdrawUSD: Scalars['Base_BigDecimal']['output'];
  /**  Total reward token accumulated under this position, in native amounts  */
  cumulativeRewardTokenAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Total reward token accumulated under this position, in USD  */
  cumulativeRewardUSD?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  Number of deposits related to this position  */
  depositCount: Scalars['Int']['output'];
  /**  Number of withdrawals related to this position  */
  withdrawCount: Scalars['Int']['output'];
  /**  Block number of this snapshot  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this snapshot  */
  timestamp: Scalars['BigInt']['output'];
};

export type Base_PositionSnapshot_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  position?: InputMaybe<Scalars['String']['input']>;
  position_not?: InputMaybe<Scalars['String']['input']>;
  position_gt?: InputMaybe<Scalars['String']['input']>;
  position_lt?: InputMaybe<Scalars['String']['input']>;
  position_gte?: InputMaybe<Scalars['String']['input']>;
  position_lte?: InputMaybe<Scalars['String']['input']>;
  position_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_contains?: InputMaybe<Scalars['String']['input']>;
  position_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_contains?: InputMaybe<Scalars['String']['input']>;
  position_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_?: InputMaybe<Base_Position_filter>;
  liquidityTokenType?: InputMaybe<Base_TokenType>;
  liquidityTokenType_not?: InputMaybe<Base_TokenType>;
  liquidityTokenType_in?: InputMaybe<Array<Base_TokenType>>;
  liquidityTokenType_not_in?: InputMaybe<Array<Base_TokenType>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeDepositTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeDepositUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeDepositUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeDepositUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeDepositUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeDepositUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeWithdrawTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeWithdrawUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeWithdrawUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeWithdrawUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeRewardTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  depositCount?: InputMaybe<Scalars['Int']['input']>;
  depositCount_not?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_PositionSnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_PositionSnapshot_filter>>>;
};

export type Base_PositionSnapshot_orderBy =
  | 'id'
  | 'hash'
  | 'logIndex'
  | 'nonce'
  | 'position'
  | 'position__id'
  | 'position__hashOpened'
  | 'position__hashClosed'
  | 'position__blockNumberOpened'
  | 'position__timestampOpened'
  | 'position__blockNumberClosed'
  | 'position__timestampClosed'
  | 'position__liquidityTokenType'
  | 'position__liquidity'
  | 'position__liquidityUSD'
  | 'position__cumulativeDepositUSD'
  | 'position__cumulativeWithdrawUSD'
  | 'position__depositCount'
  | 'position__withdrawCount'
  | 'liquidityTokenType'
  | 'liquidity'
  | 'liquidityUSD'
  | 'cumulativeDepositTokenAmounts'
  | 'cumulativeDepositUSD'
  | 'cumulativeWithdrawTokenAmounts'
  | 'cumulativeWithdrawUSD'
  | 'cumulativeRewardTokenAmounts'
  | 'cumulativeRewardUSD'
  | 'depositCount'
  | 'withdrawCount'
  | 'blockNumber'
  | 'timestamp';

export type Base_Position_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Base_Account_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Base_LiquidityPool_filter>;
  hashOpened?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hashOpened_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hashOpened_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hashOpened_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hashOpened_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hashOpened_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hashOpened_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  hashOpened_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  hashOpened_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hashOpened_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hashClosed?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hashClosed_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hashClosed_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hashClosed_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hashClosed_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hashClosed_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hashClosed_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  hashClosed_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  hashClosed_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hashClosed_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  blockNumberOpened?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberOpened_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumberOpened_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampOpened?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampOpened_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampOpened_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumberClosed?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumberClosed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumberClosed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampClosed?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestampClosed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestampClosed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickLower?: InputMaybe<Scalars['String']['input']>;
  tickLower_not?: InputMaybe<Scalars['String']['input']>;
  tickLower_gt?: InputMaybe<Scalars['String']['input']>;
  tickLower_lt?: InputMaybe<Scalars['String']['input']>;
  tickLower_gte?: InputMaybe<Scalars['String']['input']>;
  tickLower_lte?: InputMaybe<Scalars['String']['input']>;
  tickLower_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickLower_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickLower_contains?: InputMaybe<Scalars['String']['input']>;
  tickLower_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_contains?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickLower_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickLower_?: InputMaybe<Base_Tick_filter>;
  tickUpper?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not?: InputMaybe<Scalars['String']['input']>;
  tickUpper_gt?: InputMaybe<Scalars['String']['input']>;
  tickUpper_lt?: InputMaybe<Scalars['String']['input']>;
  tickUpper_gte?: InputMaybe<Scalars['String']['input']>;
  tickUpper_lte?: InputMaybe<Scalars['String']['input']>;
  tickUpper_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickUpper_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tickUpper_contains?: InputMaybe<Scalars['String']['input']>;
  tickUpper_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_contains?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tickUpper_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tickUpper_?: InputMaybe<Base_Tick_filter>;
  liquidityToken?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lt?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_gte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_lte?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  liquidityToken_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  liquidityToken_?: InputMaybe<Base_Token_filter>;
  liquidityTokenType?: InputMaybe<Base_TokenType>;
  liquidityTokenType_not?: InputMaybe<Base_TokenType>;
  liquidityTokenType_in?: InputMaybe<Array<Base_TokenType>>;
  liquidityTokenType_not_in?: InputMaybe<Array<Base_TokenType>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeDepositTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeDepositUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeDepositUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeDepositUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeDepositUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeDepositUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeDepositUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeWithdrawTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeWithdrawUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeWithdrawUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeWithdrawUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeWithdrawUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeWithdrawUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeWithdrawUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeRewardUSD?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  cumulativeRewardUSD_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  depositCount?: InputMaybe<Scalars['Int']['input']>;
  depositCount_not?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  depositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  depositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  depositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  deposits_?: InputMaybe<Base_Deposit_filter>;
  withdrawCount?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  withdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  withdraws_?: InputMaybe<Base_Withdraw_filter>;
  snapshots_?: InputMaybe<Base_PositionSnapshot_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_Position_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_Position_filter>>>;
};

export type Base_Position_orderBy =
  | 'id'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'hashOpened'
  | 'hashClosed'
  | 'blockNumberOpened'
  | 'timestampOpened'
  | 'blockNumberClosed'
  | 'timestampClosed'
  | 'tickLower'
  | 'tickLower__id'
  | 'tickLower__index'
  | 'tickLower__createdTimestamp'
  | 'tickLower__createdBlockNumber'
  | 'tickLower__liquidityGross'
  | 'tickLower__liquidityGrossUSD'
  | 'tickLower__liquidityNet'
  | 'tickLower__liquidityNetUSD'
  | 'tickLower__lastSnapshotDayID'
  | 'tickLower__lastSnapshotHourID'
  | 'tickLower__lastUpdateTimestamp'
  | 'tickLower__lastUpdateBlockNumber'
  | 'tickUpper'
  | 'tickUpper__id'
  | 'tickUpper__index'
  | 'tickUpper__createdTimestamp'
  | 'tickUpper__createdBlockNumber'
  | 'tickUpper__liquidityGross'
  | 'tickUpper__liquidityGrossUSD'
  | 'tickUpper__liquidityNet'
  | 'tickUpper__liquidityNetUSD'
  | 'tickUpper__lastSnapshotDayID'
  | 'tickUpper__lastSnapshotHourID'
  | 'tickUpper__lastUpdateTimestamp'
  | 'tickUpper__lastUpdateBlockNumber'
  | 'liquidityToken'
  | 'liquidityToken__id'
  | 'liquidityToken__name'
  | 'liquidityToken__symbol'
  | 'liquidityToken__decimals'
  | 'liquidityToken__lastPriceUSD'
  | 'liquidityToken__lastPriceBlockNumber'
  | 'liquidityToken___lastPricePool'
  | 'liquidityToken___totalSupply'
  | 'liquidityToken___totalValueLockedUSD'
  | 'liquidityToken___largePriceChangeBuffer'
  | 'liquidityToken___largeTVLImpactBuffer'
  | 'liquidityTokenType'
  | 'liquidity'
  | 'liquidityUSD'
  | 'cumulativeDepositTokenAmounts'
  | 'cumulativeDepositUSD'
  | 'cumulativeWithdrawTokenAmounts'
  | 'cumulativeWithdrawUSD'
  | 'cumulativeRewardUSD'
  | 'depositCount'
  | 'deposits'
  | 'withdrawCount'
  | 'withdraws'
  | 'snapshots';

export type Base_Protocol = {
  /**  Smart contract address of the protocol's main contract (Factory, Registry, etc)  */
  id: Scalars['Base_Bytes']['output'];
  /**  Name of the protocol, including version. e.g. Uniswap v3  */
  name: Scalars['String']['output'];
  /**  Slug of protocol, including version. e.g. uniswap-v3  */
  slug: Scalars['String']['output'];
  /**  Version of the subgraph schema, in SemVer format (e.g. 1.0.0)  */
  schemaVersion: Scalars['String']['output'];
  /**  Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)  */
  subgraphVersion: Scalars['String']['output'];
  /**  Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)  */
  methodologyVersion: Scalars['String']['output'];
  /**  The blockchain network this subgraph is indexing on  */
  network: Base_Network;
  /**  The type of protocol (e.g. DEX, Lending, Yield, etc)  */
  type: Base_ProtocolType;
  /**  Current TVL (Total Value Locked) of the entire protocol  */
  totalValueLockedUSD: Scalars['Base_BigDecimal']['output'];
  /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
  protocolControlledValueUSD?: Maybe<Scalars['Base_BigDecimal']['output']>;
  /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
  cumulativeSupplySideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
  cumulativeProtocolSideRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
  cumulativeTotalRevenueUSD: Scalars['Base_BigDecimal']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Total number of pools  */
  totalPoolCount: Scalars['Int']['output'];
  /**  Daily usage metrics for this protocol  */
  dailyUsageMetrics: Array<Base_UsageMetricsDailySnapshot>;
  /**  Hourly usage metrics for this protocol  */
  hourlyUsageMetrics: Array<Base_UsageMetricsHourlySnapshot>;
  /**  Daily financial metrics for this protocol  */
  financialMetrics: Array<Base_FinancialsDailySnapshot>;
};


export type Base_ProtocoldailyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_UsageMetricsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_UsageMetricsDailySnapshot_filter>;
};


export type Base_ProtocolhourlyUsageMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_UsageMetricsHourlySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_UsageMetricsHourlySnapshot_filter>;
};


export type Base_ProtocolfinancialMetricsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_FinancialsDailySnapshot_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_FinancialsDailySnapshot_filter>;
};

export type Base_ProtocolType =
  | 'EXCHANGE'
  | 'LENDING'
  | 'YIELD'
  | 'BRIDGE'
  | 'GENERIC';

export type Base_Protocol_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  slug_not?: InputMaybe<Scalars['String']['input']>;
  slug_gt?: InputMaybe<Scalars['String']['input']>;
  slug_lt?: InputMaybe<Scalars['String']['input']>;
  slug_gte?: InputMaybe<Scalars['String']['input']>;
  slug_lte?: InputMaybe<Scalars['String']['input']>;
  slug_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  slug_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  slug_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  slug_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lt?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_gte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_lte?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaVersion_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  schemaVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lt?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_gte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_lte?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  subgraphVersion_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  subgraphVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lt?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_gte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_lte?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  methodologyVersion_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  methodologyVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  network?: InputMaybe<Base_Network>;
  network_not?: InputMaybe<Base_Network>;
  network_in?: InputMaybe<Array<Base_Network>>;
  network_not_in?: InputMaybe<Array<Base_Network>>;
  type?: InputMaybe<Base_ProtocolType>;
  type_not?: InputMaybe<Base_ProtocolType>;
  type_in?: InputMaybe<Array<Base_ProtocolType>>;
  type_not_in?: InputMaybe<Array<Base_ProtocolType>>;
  totalValueLockedUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  protocolControlledValueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_not?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyUsageMetrics_?: InputMaybe<Base_UsageMetricsDailySnapshot_filter>;
  hourlyUsageMetrics_?: InputMaybe<Base_UsageMetricsHourlySnapshot_filter>;
  financialMetrics_?: InputMaybe<Base_FinancialsDailySnapshot_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_Protocol_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_Protocol_filter>>>;
};

export type Base_Protocol_orderBy =
  | 'id'
  | 'name'
  | 'slug'
  | 'schemaVersion'
  | 'subgraphVersion'
  | 'methodologyVersion'
  | 'network'
  | 'type'
  | 'totalValueLockedUSD'
  | 'protocolControlledValueUSD'
  | 'cumulativeSupplySideRevenueUSD'
  | 'cumulativeProtocolSideRevenueUSD'
  | 'cumulativeTotalRevenueUSD'
  | 'cumulativeUniqueUsers'
  | 'totalPoolCount'
  | 'dailyUsageMetrics'
  | 'hourlyUsageMetrics'
  | 'financialMetrics';

export type Base_RewardToken = {
  /**  { Reward token type }-{ Smart contract address of the reward token }  */
  id: Scalars['Base_Bytes']['output'];
  /**  Reference to the actual token  */
  token: Base_Token;
  /**  The type of the reward token  */
  type: Base_RewardTokenType;
};

export type Base_RewardTokenType =
  /**  For reward tokens awarded to LPs/lenders  */
  | 'DEPOSIT'
  /**  For reward tokens awarded to borrowers  */
  | 'BORROW';

export type Base_RewardToken_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  token?: InputMaybe<Scalars['String']['input']>;
  token_not?: InputMaybe<Scalars['String']['input']>;
  token_gt?: InputMaybe<Scalars['String']['input']>;
  token_lt?: InputMaybe<Scalars['String']['input']>;
  token_gte?: InputMaybe<Scalars['String']['input']>;
  token_lte?: InputMaybe<Scalars['String']['input']>;
  token_in?: InputMaybe<Array<Scalars['String']['input']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  token_contains?: InputMaybe<Scalars['String']['input']>;
  token_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  token_not_contains?: InputMaybe<Scalars['String']['input']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  token_starts_with?: InputMaybe<Scalars['String']['input']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_ends_with?: InputMaybe<Scalars['String']['input']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  token_?: InputMaybe<Base_Token_filter>;
  type?: InputMaybe<Base_RewardTokenType>;
  type_not?: InputMaybe<Base_RewardTokenType>;
  type_in?: InputMaybe<Array<Base_RewardTokenType>>;
  type_not_in?: InputMaybe<Array<Base_RewardTokenType>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_RewardToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_RewardToken_filter>>>;
};

export type Base_RewardToken_orderBy =
  | 'id'
  | 'token'
  | 'token__id'
  | 'token__name'
  | 'token__symbol'
  | 'token__decimals'
  | 'token__lastPriceUSD'
  | 'token__lastPriceBlockNumber'
  | 'token___lastPricePool'
  | 'token___totalSupply'
  | 'token___totalValueLockedUSD'
  | 'token___largePriceChangeBuffer'
  | 'token___largeTVLImpactBuffer'
  | 'type';

export type Base_Swap = {
  /**  { Transaction hash }-{ Log index }  */
  id: Scalars['Base_Bytes']['output'];
  /**  Transaction hash of the transaction that emitted this event  */
  hash: Scalars['Base_Bytes']['output'];
  /**  Nonce of the transaction that emitted this event  */
  nonce: Scalars['BigInt']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Gas limit of the transaction that emitted this event  */
  gasLimit?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas used in this transaction. (Optional because not every chain will support this)  */
  gasUsed?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas price of the transaction that emitted this event  */
  gasPrice?: Maybe<Scalars['BigInt']['output']>;
  /**  The protocol this transaction belongs to  */
  protocol: Base_DexAmmProtocol;
  /**  Account that emitted this event  */
  account: Base_Account;
  /**  The pool involving this event  */
  pool: Base_LiquidityPool;
  /**  Block number of this event  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this event  */
  timestamp: Scalars['BigInt']['output'];
  /**  the tick after the swap  */
  tick?: Maybe<Scalars['BigInt']['output']>;
  /**  Token deposited into pool  */
  tokenIn: Base_Token;
  /**  Amount of token deposited into pool in native units  */
  amountIn: Scalars['BigInt']['output'];
  /**  Amount of token deposited into pool in USD  */
  amountInUSD: Scalars['Base_BigDecimal']['output'];
  /**  Token withdrawn from pool  */
  tokenOut: Base_Token;
  /**  Amount of token withdrawn from pool in native units  */
  amountOut: Scalars['BigInt']['output'];
  /**  Amount of token withdrawn from pool in USD  */
  amountOutUSD: Scalars['Base_BigDecimal']['output'];
  /**  Amount of input tokens in the liquidity pool  */
  reserveAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
};

export type Base_Swap_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Base_DexAmmProtocol_filter>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Base_Account_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Base_LiquidityPool_filter>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick?: InputMaybe<Scalars['BigInt']['input']>;
  tick_not?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tick_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tick_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tokenIn?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not?: InputMaybe<Scalars['String']['input']>;
  tokenIn_gt?: InputMaybe<Scalars['String']['input']>;
  tokenIn_lt?: InputMaybe<Scalars['String']['input']>;
  tokenIn_gte?: InputMaybe<Scalars['String']['input']>;
  tokenIn_lte?: InputMaybe<Scalars['String']['input']>;
  tokenIn_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenIn_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenIn_contains?: InputMaybe<Scalars['String']['input']>;
  tokenIn_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_contains?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenIn_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenIn_?: InputMaybe<Base_Token_filter>;
  amountIn?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_not?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_gt?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_lt?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_gte?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_lte?: InputMaybe<Scalars['BigInt']['input']>;
  amountIn_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountIn_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountInUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountInUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountInUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountInUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountInUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountInUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountInUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  amountInUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  tokenOut?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not?: InputMaybe<Scalars['String']['input']>;
  tokenOut_gt?: InputMaybe<Scalars['String']['input']>;
  tokenOut_lt?: InputMaybe<Scalars['String']['input']>;
  tokenOut_gte?: InputMaybe<Scalars['String']['input']>;
  tokenOut_lte?: InputMaybe<Scalars['String']['input']>;
  tokenOut_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenOut_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenOut_contains?: InputMaybe<Scalars['String']['input']>;
  tokenOut_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_contains?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenOut_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenOut_?: InputMaybe<Base_Token_filter>;
  amountOut?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_not?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_gt?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_lt?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_gte?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_lte?: InputMaybe<Scalars['BigInt']['input']>;
  amountOut_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountOut_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountOutUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountOutUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountOutUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountOutUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountOutUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountOutUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountOutUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  amountOutUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  reserveAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_Swap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_Swap_filter>>>;
};

export type Base_Swap_orderBy =
  | 'id'
  | 'hash'
  | 'nonce'
  | 'logIndex'
  | 'gasLimit'
  | 'gasUsed'
  | 'gasPrice'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'blockNumber'
  | 'timestamp'
  | 'tick'
  | 'tokenIn'
  | 'tokenIn__id'
  | 'tokenIn__name'
  | 'tokenIn__symbol'
  | 'tokenIn__decimals'
  | 'tokenIn__lastPriceUSD'
  | 'tokenIn__lastPriceBlockNumber'
  | 'tokenIn___lastPricePool'
  | 'tokenIn___totalSupply'
  | 'tokenIn___totalValueLockedUSD'
  | 'tokenIn___largePriceChangeBuffer'
  | 'tokenIn___largeTVLImpactBuffer'
  | 'amountIn'
  | 'amountInUSD'
  | 'tokenOut'
  | 'tokenOut__id'
  | 'tokenOut__name'
  | 'tokenOut__symbol'
  | 'tokenOut__decimals'
  | 'tokenOut__lastPriceUSD'
  | 'tokenOut__lastPriceBlockNumber'
  | 'tokenOut___lastPricePool'
  | 'tokenOut___totalSupply'
  | 'tokenOut___totalValueLockedUSD'
  | 'tokenOut___largePriceChangeBuffer'
  | 'tokenOut___largeTVLImpactBuffer'
  | 'amountOut'
  | 'amountOutUSD'
  | 'reserveAmounts';

export type Base_Tick = {
  /**  { pool address }-{ tick index }  */
  id: Scalars['Base_Bytes']['output'];
  /**  tick index  */
  index: Scalars['BigInt']['output'];
  /**  Liquidity pool this tick belongs to  */
  pool: Base_LiquidityPool;
  /**  Creation timestamp  */
  createdTimestamp: Scalars['BigInt']['output'];
  /**  Creation block number  */
  createdBlockNumber: Scalars['BigInt']['output'];
  /**  calculated price of token0 of tick within this pool - constant  */
  prices: Array<Scalars['Base_BigDecimal']['output']>;
  /**  total liquidity pool has as tick lower or upper  */
  liquidityGross: Scalars['BigInt']['output'];
  /**  total liquidity in USD pool has as tick lower or upper  */
  liquidityGrossUSD: Scalars['Base_BigDecimal']['output'];
  /**  how much liquidity changes when tick crossed  */
  liquidityNet: Scalars['BigInt']['output'];
  /**  how much liquidity in USD changes when tick crossed  */
  liquidityNetUSD: Scalars['Base_BigDecimal']['output'];
  /**  Day ID of the most recent daily snapshot  */
  lastSnapshotDayID: Scalars['Int']['output'];
  /**  Hour ID of the most recent hourly snapshot  */
  lastSnapshotHourID: Scalars['Int']['output'];
  /**  Timestamp of the last time this entity was updated  */
  lastUpdateTimestamp: Scalars['BigInt']['output'];
  /**  Block number of the last time this entity was updated  */
  lastUpdateBlockNumber: Scalars['BigInt']['output'];
};

export type Base_TickDailySnapshot = {
  /**  { pool address }-{ tick index }-{ day ID }  */
  id: Scalars['Base_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  tick index  */
  tick: Base_Tick;
  /**  liquidity pool this tick belongs to  */
  pool: Base_LiquidityPool;
  /**  total liquidity pool has as tick lower or upper  */
  liquidityGross: Scalars['BigInt']['output'];
  /**  total liquidity in USD pool has as tick lower or upper  */
  liquidityGrossUSD: Scalars['Base_BigDecimal']['output'];
  /**  how much liquidity changes when tick crossed  */
  liquidityNet: Scalars['BigInt']['output'];
  /**  how much liquidity in USD changes when tick crossed  */
  liquidityNetUSD: Scalars['Base_BigDecimal']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Base_TickDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  tick?: InputMaybe<Scalars['String']['input']>;
  tick_not?: InputMaybe<Scalars['String']['input']>;
  tick_gt?: InputMaybe<Scalars['String']['input']>;
  tick_lt?: InputMaybe<Scalars['String']['input']>;
  tick_gte?: InputMaybe<Scalars['String']['input']>;
  tick_lte?: InputMaybe<Scalars['String']['input']>;
  tick_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_contains?: InputMaybe<Scalars['String']['input']>;
  tick_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_?: InputMaybe<Base_Tick_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Base_LiquidityPool_filter>;
  liquidityGross?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGross_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGrossUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  liquidityGrossUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  liquidityNet?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNet_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNetUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  liquidityNetUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_TickDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_TickDailySnapshot_filter>>>;
};

export type Base_TickDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'tick'
  | 'tick__id'
  | 'tick__index'
  | 'tick__createdTimestamp'
  | 'tick__createdBlockNumber'
  | 'tick__liquidityGross'
  | 'tick__liquidityGrossUSD'
  | 'tick__liquidityNet'
  | 'tick__liquidityNetUSD'
  | 'tick__lastSnapshotDayID'
  | 'tick__lastSnapshotHourID'
  | 'tick__lastUpdateTimestamp'
  | 'tick__lastUpdateBlockNumber'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'liquidityGross'
  | 'liquidityGrossUSD'
  | 'liquidityNet'
  | 'liquidityNetUSD'
  | 'timestamp'
  | 'blockNumber';

export type Base_TickHourlySnapshot = {
  /**  { pool address }-{ tick index }-{ hour ID }  */
  id: Scalars['Base_Bytes']['output'];
  /**  Number of hours since Unix epoch time  */
  hour: Scalars['Int']['output'];
  /**  tick index  */
  tick: Base_Tick;
  /**  liquidity pool this tick belongs to  */
  pool: Base_LiquidityPool;
  /**  total liquidity pool has as tick lower or upper  */
  liquidityGross: Scalars['BigInt']['output'];
  /**  total liquidity in USD pool has as tick lower or upper  */
  liquidityGrossUSD: Scalars['Base_BigDecimal']['output'];
  /**  how much liquidity changes when tick crossed  */
  liquidityNet: Scalars['BigInt']['output'];
  /**  how much liquidity in USD changes when tick crossed  */
  liquidityNetUSD: Scalars['Base_BigDecimal']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Base_TickHourlySnapshot_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hour?: InputMaybe<Scalars['Int']['input']>;
  hour_not?: InputMaybe<Scalars['Int']['input']>;
  hour_gt?: InputMaybe<Scalars['Int']['input']>;
  hour_lt?: InputMaybe<Scalars['Int']['input']>;
  hour_gte?: InputMaybe<Scalars['Int']['input']>;
  hour_lte?: InputMaybe<Scalars['Int']['input']>;
  hour_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hour_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  tick?: InputMaybe<Scalars['String']['input']>;
  tick_not?: InputMaybe<Scalars['String']['input']>;
  tick_gt?: InputMaybe<Scalars['String']['input']>;
  tick_lt?: InputMaybe<Scalars['String']['input']>;
  tick_gte?: InputMaybe<Scalars['String']['input']>;
  tick_lte?: InputMaybe<Scalars['String']['input']>;
  tick_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tick_contains?: InputMaybe<Scalars['String']['input']>;
  tick_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains?: InputMaybe<Scalars['String']['input']>;
  tick_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tick_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tick_?: InputMaybe<Base_Tick_filter>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Base_LiquidityPool_filter>;
  liquidityGross?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGross_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGrossUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  liquidityGrossUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  liquidityNet?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNet_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNetUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  liquidityNetUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_TickHourlySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_TickHourlySnapshot_filter>>>;
};

export type Base_TickHourlySnapshot_orderBy =
  | 'id'
  | 'hour'
  | 'tick'
  | 'tick__id'
  | 'tick__index'
  | 'tick__createdTimestamp'
  | 'tick__createdBlockNumber'
  | 'tick__liquidityGross'
  | 'tick__liquidityGrossUSD'
  | 'tick__liquidityNet'
  | 'tick__liquidityNetUSD'
  | 'tick__lastSnapshotDayID'
  | 'tick__lastSnapshotHourID'
  | 'tick__lastUpdateTimestamp'
  | 'tick__lastUpdateBlockNumber'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'liquidityGross'
  | 'liquidityGrossUSD'
  | 'liquidityNet'
  | 'liquidityNetUSD'
  | 'timestamp'
  | 'blockNumber';

export type Base_Tick_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  index?: InputMaybe<Scalars['BigInt']['input']>;
  index_not?: InputMaybe<Scalars['BigInt']['input']>;
  index_gt?: InputMaybe<Scalars['BigInt']['input']>;
  index_lt?: InputMaybe<Scalars['BigInt']['input']>;
  index_gte?: InputMaybe<Scalars['BigInt']['input']>;
  index_lte?: InputMaybe<Scalars['BigInt']['input']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Base_LiquidityPool_filter>;
  createdTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  prices?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  prices_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  prices_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  prices_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  prices_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  prices_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  liquidityGross?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityGross_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGross_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityGrossUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityGrossUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  liquidityGrossUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  liquidityNet?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidityNet_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNet_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidityNetUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  liquidityNetUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  liquidityNetUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  lastSnapshotDayID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotDayID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotDayID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_not?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lt?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_gte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_lte?: InputMaybe<Scalars['Int']['input']>;
  lastSnapshotHourID_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastSnapshotHourID_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastUpdateTimestamp?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateTimestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastUpdateBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastUpdateBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_Tick_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_Tick_filter>>>;
};

export type Base_Tick_orderBy =
  | 'id'
  | 'index'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'createdTimestamp'
  | 'createdBlockNumber'
  | 'prices'
  | 'liquidityGross'
  | 'liquidityGrossUSD'
  | 'liquidityNet'
  | 'liquidityNetUSD'
  | 'lastSnapshotDayID'
  | 'lastSnapshotHourID'
  | 'lastUpdateTimestamp'
  | 'lastUpdateBlockNumber';

export type Base_Token = {
  /**  Smart contract address of the token  */
  id: Scalars['Base_Bytes']['output'];
  /**  Name of the token, mirrored from the smart contract  */
  name: Scalars['String']['output'];
  /**  Symbol of the token, mirrored from the smart contract  */
  symbol: Scalars['String']['output'];
  /**  The number of decimal places this token uses, default to 18  */
  decimals: Scalars['Int']['output'];
  /**  Optional field to track the price of a token, mostly for caching purposes  */
  lastPriceUSD?: Maybe<Scalars['Base_BigDecimal']['output']>;
  /**  Optional field to track the block number of the last token price  */
  lastPriceBlockNumber?: Maybe<Scalars['BigInt']['output']>;
  /**  last pool that gave this token a price  */
  _lastPricePool?: Maybe<Scalars['Base_Bytes']['output']>;
  /**  amount of tokens in the protocol  */
  _totalSupply: Scalars['BigInt']['output'];
  /**  Total value locked in the protocol  */
  _totalValueLockedUSD: Scalars['Base_BigDecimal']['output'];
  _largePriceChangeBuffer: Scalars['Int']['output'];
  _largeTVLImpactBuffer: Scalars['Int']['output'];
};

export type Base_TokenType =
  | 'MULTIPLE'
  | 'UNKNOWN'
  | 'ERC20'
  | 'ERC721'
  | 'ERC1155'
  | 'BEP20'
  | 'BEP721'
  | 'BEP1155';

export type Base_Token_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol?: InputMaybe<Scalars['String']['input']>;
  symbol_not?: InputMaybe<Scalars['String']['input']>;
  symbol_gt?: InputMaybe<Scalars['String']['input']>;
  symbol_lt?: InputMaybe<Scalars['String']['input']>;
  symbol_gte?: InputMaybe<Scalars['String']['input']>;
  symbol_lte?: InputMaybe<Scalars['String']['input']>;
  symbol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  decimals?: InputMaybe<Scalars['Int']['input']>;
  decimals_not?: InputMaybe<Scalars['Int']['input']>;
  decimals_gt?: InputMaybe<Scalars['Int']['input']>;
  decimals_lt?: InputMaybe<Scalars['Int']['input']>;
  decimals_gte?: InputMaybe<Scalars['Int']['input']>;
  decimals_lte?: InputMaybe<Scalars['Int']['input']>;
  decimals_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lastPriceUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  lastPriceUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  lastPriceUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  lastPriceUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  lastPriceUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  lastPriceUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  lastPriceUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  lastPriceUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  lastPriceBlockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastPriceBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastPriceBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  _lastPricePool?: InputMaybe<Scalars['Base_Bytes']['input']>;
  _lastPricePool_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  _lastPricePool_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  _lastPricePool_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  _lastPricePool_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  _lastPricePool_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  _lastPricePool_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  _lastPricePool_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  _lastPricePool_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  _lastPricePool_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  _totalSupply?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_not?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_gt?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_lt?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_gte?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_lte?: InputMaybe<Scalars['BigInt']['input']>;
  _totalSupply_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  _totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  _totalValueLockedUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  _totalValueLockedUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  _totalValueLockedUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  _totalValueLockedUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  _totalValueLockedUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  _totalValueLockedUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  _totalValueLockedUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  _totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  _largePriceChangeBuffer?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_not?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_gt?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_lt?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_gte?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_lte?: InputMaybe<Scalars['Int']['input']>;
  _largePriceChangeBuffer_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  _largePriceChangeBuffer_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  _largeTVLImpactBuffer?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_not?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_gt?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_lt?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_gte?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_lte?: InputMaybe<Scalars['Int']['input']>;
  _largeTVLImpactBuffer_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  _largeTVLImpactBuffer_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_Token_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_Token_filter>>>;
};

export type Base_Token_orderBy =
  | 'id'
  | 'name'
  | 'symbol'
  | 'decimals'
  | 'lastPriceUSD'
  | 'lastPriceBlockNumber'
  | '_lastPricePool'
  | '_totalSupply'
  | '_totalValueLockedUSD'
  | '_largePriceChangeBuffer'
  | '_largeTVLImpactBuffer';

export type Base_UsageMetricsDailySnapshot = {
  /**  ID is # of days since Unix epoch time  */
  id: Scalars['Base_Bytes']['output'];
  /**  Number of days since Unix epoch time  */
  day: Scalars['Int']['output'];
  /**  Protocol this snapshot is associated with  */
  protocol: Base_DexAmmProtocol;
  /**  Number of unique daily active users  */
  dailyActiveUsers: Scalars['Int']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface.  */
  dailyTransactionCount: Scalars['Int']['output'];
  /**  Total number of pools  */
  totalPoolCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in an day  */
  dailyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in an day  */
  dailyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in an day  */
  dailySwapCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Base_UsageMetricsDailySnapshot_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  day?: InputMaybe<Scalars['Int']['input']>;
  day_not?: InputMaybe<Scalars['Int']['input']>;
  day_gt?: InputMaybe<Scalars['Int']['input']>;
  day_lt?: InputMaybe<Scalars['Int']['input']>;
  day_gte?: InputMaybe<Scalars['Int']['input']>;
  day_lte?: InputMaybe<Scalars['Int']['input']>;
  day_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  day_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Base_DexAmmProtocol_filter>;
  dailyActiveUsers?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_not?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyActiveUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyActiveUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyTransactionCount?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyTransactionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyTransactionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_not?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lt?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_gte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_lte?: InputMaybe<Scalars['Int']['input']>;
  totalPoolCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  dailySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  dailySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_UsageMetricsDailySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_UsageMetricsDailySnapshot_filter>>>;
};

export type Base_UsageMetricsDailySnapshot_orderBy =
  | 'id'
  | 'day'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'dailyActiveUsers'
  | 'cumulativeUniqueUsers'
  | 'dailyTransactionCount'
  | 'totalPoolCount'
  | 'dailyDepositCount'
  | 'dailyWithdrawCount'
  | 'dailySwapCount'
  | 'timestamp'
  | 'blockNumber';

export type Base_UsageMetricsHourlySnapshot = {
  /**  { # of hours since Unix epoch time }  */
  id: Scalars['Base_Bytes']['output'];
  /**  Number of hours since Unix epoch time  */
  hour: Scalars['Int']['output'];
  /**  Protocol this snapshot is associated with  */
  protocol: Base_DexAmmProtocol;
  /**  Number of unique hourly active users  */
  hourlyActiveUsers: Scalars['Int']['output'];
  /**  Number of cumulative unique users  */
  cumulativeUniqueUsers: Scalars['Int']['output'];
  /**  Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.  */
  hourlyTransactionCount: Scalars['Int']['output'];
  /**  Total number of deposits (add liquidity) in an hour  */
  hourlyDepositCount: Scalars['Int']['output'];
  /**  Total number of withdrawals (remove liquidity) in an hour  */
  hourlyWithdrawCount: Scalars['Int']['output'];
  /**  Total number of trades (swaps) in an hour  */
  hourlySwapCount: Scalars['Int']['output'];
  /**  Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  timestamp: Scalars['BigInt']['output'];
  /**  Block number of when this snapshot was taken/last modified (May be taken after interval has passed)  */
  blockNumber: Scalars['BigInt']['output'];
};

export type Base_UsageMetricsHourlySnapshot_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hour?: InputMaybe<Scalars['Int']['input']>;
  hour_not?: InputMaybe<Scalars['Int']['input']>;
  hour_gt?: InputMaybe<Scalars['Int']['input']>;
  hour_lt?: InputMaybe<Scalars['Int']['input']>;
  hour_gte?: InputMaybe<Scalars['Int']['input']>;
  hour_lte?: InputMaybe<Scalars['Int']['input']>;
  hour_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hour_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Base_DexAmmProtocol_filter>;
  hourlyActiveUsers?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyActiveUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyActiveUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']['input']>;
  cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyTransactionCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyTransactionCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyTransactionCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyDepositCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_not?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lt?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_gte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_lte?: InputMaybe<Scalars['Int']['input']>;
  hourlySwapCount_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  hourlySwapCount_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_UsageMetricsHourlySnapshot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_UsageMetricsHourlySnapshot_filter>>>;
};

export type Base_UsageMetricsHourlySnapshot_orderBy =
  | 'id'
  | 'hour'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'hourlyActiveUsers'
  | 'cumulativeUniqueUsers'
  | 'hourlyTransactionCount'
  | 'hourlyDepositCount'
  | 'hourlyWithdrawCount'
  | 'hourlySwapCount'
  | 'timestamp'
  | 'blockNumber';

export type Base_Withdraw = {
  /**  { Transaction hash }-{ Log index } */
  id: Scalars['Base_Bytes']['output'];
  /**  Transaction hash of the transaction that emitted this event  */
  hash: Scalars['Base_Bytes']['output'];
  /**  Nonce of the transaction that emitted this event  */
  nonce: Scalars['BigInt']['output'];
  /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
  logIndex: Scalars['Int']['output'];
  /**  Gas limit of the transaction that emitted this event  */
  gasLimit?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas used in this transaction. (Optional because not every chain will support this)  */
  gasUsed?: Maybe<Scalars['BigInt']['output']>;
  /**  Gas price of the transaction that emitted this event  */
  gasPrice?: Maybe<Scalars['BigInt']['output']>;
  /**  The protocol this transaction belongs to  */
  protocol: Base_DexAmmProtocol;
  /**  Account that emitted this event  */
  account: Base_Account;
  /**  The user position changed by this event  */
  position?: Maybe<Base_Position>;
  /**  lower tick of position  */
  tickLower?: Maybe<Scalars['BigInt']['output']>;
  /**  upper tick of position  */
  tickUpper?: Maybe<Scalars['BigInt']['output']>;
  /**  The pool involving this event  */
  pool: Base_LiquidityPool;
  /**  Block number of this event  */
  blockNumber: Scalars['BigInt']['output'];
  /**  Timestamp of this event  */
  timestamp: Scalars['BigInt']['output'];
  /**  Amount of liquidity burned  */
  liquidity: Scalars['BigInt']['output'];
  /**  Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool  */
  inputTokens: Array<Base_Token>;
  /**  Amount of input tokens in the token's native unit  */
  inputTokenAmounts: Array<Scalars['BigInt']['output']>;
  /**  Amount of input tokens in the liquidity pool  */
  reserveAmounts?: Maybe<Array<Scalars['BigInt']['output']>>;
  /**  USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool)  */
  amountUSD: Scalars['Base_BigDecimal']['output'];
};


export type Base_WithdrawinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Token_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Token_filter>;
};

export type Base_Withdraw_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  hash_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  hash_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  hash_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  nonce?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_not?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']['input']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  logIndex?: InputMaybe<Scalars['Int']['input']>;
  logIndex_not?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lt?: InputMaybe<Scalars['Int']['input']>;
  logIndex_gte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_lte?: InputMaybe<Scalars['Int']['input']>;
  logIndex_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasUsed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocol_not?: InputMaybe<Scalars['String']['input']>;
  protocol_gt?: InputMaybe<Scalars['String']['input']>;
  protocol_lt?: InputMaybe<Scalars['String']['input']>;
  protocol_gte?: InputMaybe<Scalars['String']['input']>;
  protocol_lte?: InputMaybe<Scalars['String']['input']>;
  protocol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  protocol_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains?: InputMaybe<Scalars['String']['input']>;
  protocol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  protocol_?: InputMaybe<Base_DexAmmProtocol_filter>;
  account?: InputMaybe<Scalars['String']['input']>;
  account_not?: InputMaybe<Scalars['String']['input']>;
  account_gt?: InputMaybe<Scalars['String']['input']>;
  account_lt?: InputMaybe<Scalars['String']['input']>;
  account_gte?: InputMaybe<Scalars['String']['input']>;
  account_lte?: InputMaybe<Scalars['String']['input']>;
  account_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  account_contains?: InputMaybe<Scalars['String']['input']>;
  account_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_contains?: InputMaybe<Scalars['String']['input']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  account_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  account_?: InputMaybe<Base_Account_filter>;
  position?: InputMaybe<Scalars['String']['input']>;
  position_not?: InputMaybe<Scalars['String']['input']>;
  position_gt?: InputMaybe<Scalars['String']['input']>;
  position_lt?: InputMaybe<Scalars['String']['input']>;
  position_gte?: InputMaybe<Scalars['String']['input']>;
  position_lte?: InputMaybe<Scalars['String']['input']>;
  position_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  position_contains?: InputMaybe<Scalars['String']['input']>;
  position_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_contains?: InputMaybe<Scalars['String']['input']>;
  position_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  position_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  position_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  position_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  position_?: InputMaybe<Base_Position_filter>;
  tickLower?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickLower_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickLower_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_not?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tickUpper_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tickUpper_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  pool?: InputMaybe<Scalars['String']['input']>;
  pool_not?: InputMaybe<Scalars['String']['input']>;
  pool_gt?: InputMaybe<Scalars['String']['input']>;
  pool_lt?: InputMaybe<Scalars['String']['input']>;
  pool_gte?: InputMaybe<Scalars['String']['input']>;
  pool_lte?: InputMaybe<Scalars['String']['input']>;
  pool_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  pool_contains?: InputMaybe<Scalars['String']['input']>;
  pool_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains?: InputMaybe<Scalars['String']['input']>;
  pool_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  pool_?: InputMaybe<Base_LiquidityPool_filter>;
  blockNumber?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']['input']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Base_Token_filter>;
  inputTokenAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  inputTokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  reserveAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountUSD?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountUSD_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountUSD_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountUSD_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountUSD_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountUSD_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  amountUSD_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base_Withdraw_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base_Withdraw_filter>>>;
};

export type Base_Withdraw_orderBy =
  | 'id'
  | 'hash'
  | 'nonce'
  | 'logIndex'
  | 'gasLimit'
  | 'gasUsed'
  | 'gasPrice'
  | 'protocol'
  | 'protocol__id'
  | 'protocol__name'
  | 'protocol__slug'
  | 'protocol__schemaVersion'
  | 'protocol__subgraphVersion'
  | 'protocol__methodologyVersion'
  | 'protocol__network'
  | 'protocol__type'
  | 'protocol__totalValueLockedUSD'
  | 'protocol__totalLiquidityUSD'
  | 'protocol__activeLiquidityUSD'
  | 'protocol__uncollectedProtocolSideValueUSD'
  | 'protocol__uncollectedSupplySideValueUSD'
  | 'protocol__protocolControlledValueUSD'
  | 'protocol__cumulativeVolumeUSD'
  | 'protocol__cumulativeSupplySideRevenueUSD'
  | 'protocol__cumulativeProtocolSideRevenueUSD'
  | 'protocol__cumulativeTotalRevenueUSD'
  | 'protocol__cumulativeUniqueUsers'
  | 'protocol__cumulativeUniqueLPs'
  | 'protocol__cumulativeUniqueTraders'
  | 'protocol__totalPoolCount'
  | 'protocol__openPositionCount'
  | 'protocol__cumulativePositionCount'
  | 'protocol__lastSnapshotDayID'
  | 'protocol__lastUpdateTimestamp'
  | 'protocol__lastUpdateBlockNumber'
  | 'protocol___regenesis'
  | 'account'
  | 'account__id'
  | 'account__positionCount'
  | 'account__openPositionCount'
  | 'account__closedPositionCount'
  | 'account__depositCount'
  | 'account__withdrawCount'
  | 'account__swapCount'
  | 'position'
  | 'position__id'
  | 'position__hashOpened'
  | 'position__hashClosed'
  | 'position__blockNumberOpened'
  | 'position__timestampOpened'
  | 'position__blockNumberClosed'
  | 'position__timestampClosed'
  | 'position__liquidityTokenType'
  | 'position__liquidity'
  | 'position__liquidityUSD'
  | 'position__cumulativeDepositUSD'
  | 'position__cumulativeWithdrawUSD'
  | 'position__depositCount'
  | 'position__withdrawCount'
  | 'tickLower'
  | 'tickUpper'
  | 'pool'
  | 'pool__id'
  | 'pool__name'
  | 'pool__symbol'
  | 'pool__liquidityTokenType'
  | 'pool__isSingleSided'
  | 'pool__createdTimestamp'
  | 'pool__createdBlockNumber'
  | 'pool__tick'
  | 'pool__totalValueLockedUSD'
  | 'pool__totalLiquidity'
  | 'pool__totalLiquidityUSD'
  | 'pool__activeLiquidity'
  | 'pool__activeLiquidityUSD'
  | 'pool__cumulativeSupplySideRevenueUSD'
  | 'pool__cumulativeProtocolSideRevenueUSD'
  | 'pool__cumulativeTotalRevenueUSD'
  | 'pool__cumulativeVolumeUSD'
  | 'pool__stakedOutputTokenAmount'
  | 'pool__cumulativeDepositCount'
  | 'pool__cumulativeWithdrawCount'
  | 'pool__cumulativeSwapCount'
  | 'pool__positionCount'
  | 'pool__openPositionCount'
  | 'pool__closedPositionCount'
  | 'pool__lastSnapshotDayID'
  | 'pool__lastSnapshotHourID'
  | 'pool__lastUpdateTimestamp'
  | 'pool__lastUpdateBlockNumber'
  | 'blockNumber'
  | 'timestamp'
  | 'liquidity'
  | 'inputTokens'
  | 'inputTokenAmounts'
  | 'reserveAmounts'
  | 'amountUSD';

export type Base__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['Base_Bytes']['output']>;
  /** The block number */
  number: Scalars['Int']['output'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']['output']>;
  /** The hash of the parent block */
  parentHash?: Maybe<Scalars['Base_Bytes']['output']>;
};

/**   Used to keep track of the price of Ether/TVL in USD, pool deposit count, and total unique users  */
export type Base__HelperStore = {
  id: Scalars['Base_Bytes']['output'];
  /**  Token Prices  */
  valueDecimalList?: Maybe<Array<Scalars['Base_BigDecimal']['output']>>;
  /**  price of ETH/TVL in USD  */
  valueDecimal?: Maybe<Scalars['Base_BigDecimal']['output']>;
  /**  # of deposits, # of unique users  */
  valueInt?: Maybe<Scalars['Int']['output']>;
};

export type Base__HelperStore_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  valueDecimalList?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  valueDecimalList_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  valueDecimalList_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  valueDecimalList_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  valueDecimalList_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  valueDecimalList_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  valueDecimal?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  valueDecimal_not?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  valueDecimal_gt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  valueDecimal_lt?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  valueDecimal_gte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  valueDecimal_lte?: InputMaybe<Scalars['Base_BigDecimal']['input']>;
  valueDecimal_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  valueDecimal_not_in?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  valueInt?: InputMaybe<Scalars['Int']['input']>;
  valueInt_not?: InputMaybe<Scalars['Int']['input']>;
  valueInt_gt?: InputMaybe<Scalars['Int']['input']>;
  valueInt_lt?: InputMaybe<Scalars['Int']['input']>;
  valueInt_gte?: InputMaybe<Scalars['Int']['input']>;
  valueInt_lte?: InputMaybe<Scalars['Int']['input']>;
  valueInt_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  valueInt_not_in?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base__HelperStore_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base__HelperStore_filter>>>;
};

export type Base__HelperStore_orderBy =
  | 'id'
  | 'valueDecimalList'
  | 'valueDecimal'
  | 'valueInt';

export type Base__LiquidityPoolAmount = {
  /**  Smart contract address of the pool  */
  id: Scalars['Base_Bytes']['output'];
  /**  Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool  */
  inputTokens: Array<Base_Token>;
  /**  Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.  */
  inputTokenBalances: Array<Scalars['Base_BigDecimal']['output']>;
  tokenPrices: Array<Scalars['Base_BigDecimal']['output']>;
};


export type Base__LiquidityPoolAmountinputTokensArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_Token_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_Token_filter>;
};

export type Base__LiquidityPoolAmount_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  inputTokens?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  inputTokens_?: InputMaybe<Base_Token_filter>;
  inputTokenBalances?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalances_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalances_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalances_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalances_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  inputTokenBalances_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  tokenPrices?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  tokenPrices_not?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  tokenPrices_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  tokenPrices_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  tokenPrices_not_contains?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  tokenPrices_not_contains_nocase?: InputMaybe<Array<Scalars['Base_BigDecimal']['input']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base__LiquidityPoolAmount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base__LiquidityPoolAmount_filter>>>;
};

export type Base__LiquidityPoolAmount_orderBy =
  | 'id'
  | 'inputTokens'
  | 'inputTokenBalances'
  | 'tokenPrices';

/** The type for the top-level _meta field */
export type Base__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: Base__Block_;
  /** The deployment ID */
  deployment: Scalars['String']['output'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean']['output'];
};

export type Base__SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

/**  This is used to keep tract of the derived price of tokens in ethereum and the whitelisted pools to which it belongs */
export type Base__TokenWhitelist = {
  /**  Token Address  */
  id: Scalars['Base_Bytes']['output'];
  /**  pools token is in that are white listed for USD pricing  */
  whitelistPools: Array<Base_LiquidityPool>;
};


/**  This is used to keep tract of the derived price of tokens in ethereum and the whitelisted pools to which it belongs */
export type Base__TokenWhitelistwhitelistPoolsArgs = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Base_LiquidityPool_orderBy>;
  orderDirection?: InputMaybe<Base_OrderDirection>;
  where?: InputMaybe<Base_LiquidityPool_filter>;
};

export type Base__TokenWhitelistSymbol = {
  /**  Whitelist Token Symbol  */
  id: Scalars['ID']['output'];
  /**  Whitelist Token Address */
  address: Scalars['Base_Bytes']['output'];
};

export type Base__TokenWhitelistSymbol_filter = {
  id?: InputMaybe<Scalars['ID']['input']>;
  id_not?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  address?: InputMaybe<Scalars['Base_Bytes']['input']>;
  address_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  address_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  address_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  address_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  address_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  address_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  address_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  address_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  address_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base__TokenWhitelistSymbol_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base__TokenWhitelistSymbol_filter>>>;
};

export type Base__TokenWhitelistSymbol_orderBy =
  | 'id'
  | 'address';

export type Base__TokenWhitelist_filter = {
  id?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lt?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_gte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_lte?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_not_in?: InputMaybe<Array<Scalars['Base_Bytes']['input']>>;
  id_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  id_not_contains?: InputMaybe<Scalars['Base_Bytes']['input']>;
  whitelistPools?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_not?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  whitelistPools_?: InputMaybe<Base_LiquidityPool_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<Base_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Base__TokenWhitelist_filter>>>;
  or?: InputMaybe<Array<InputMaybe<Base__TokenWhitelist_filter>>>;
};

export type Base__TokenWhitelist_orderBy =
  | 'id'
  | 'whitelistPools';

export type WithIndex<TObject> = TObject & Record<string, any>;
export type ResolversObject<TObject> = WithIndex<TObject>;

export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string | ((fieldNode: FieldNode) => SelectionSetNode);
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | ResolverWithResolve<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;


/** Mapping of interface types */
export type ResolversInterfaceTypes<_RefType extends Record<string, unknown>> = ResolversObject<{
  Ethereum_Protocol: ( Ethereum_DexAmmProtocol );
  Optimism_Protocol: ( Optimism_DexAmmProtocol );
  Arbitrum_Protocol: ( Arbitrum_DexAmmProtocol );
  Base_Protocol: ( Base_DexAmmProtocol );
}>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = ResolversObject<{
  Query: ResolverTypeWrapper<{}>;
  Subscription: ResolverTypeWrapper<{}>;
  Ethereum_Account: ResolverTypeWrapper<Ethereum_Account>;
  Ethereum_Account_filter: Ethereum_Account_filter;
  Ethereum_Account_orderBy: Ethereum_Account_orderBy;
  Ethereum_ActiveAccount: ResolverTypeWrapper<Ethereum_ActiveAccount>;
  Ethereum_ActiveAccount_filter: Ethereum_ActiveAccount_filter;
  Ethereum_ActiveAccount_orderBy: Ethereum_ActiveAccount_orderBy;
  Ethereum_Aggregation_interval: Ethereum_Aggregation_interval;
  Ethereum_BigDecimal: ResolverTypeWrapper<Scalars['Ethereum_BigDecimal']['output']>;
  BigInt: ResolverTypeWrapper<Scalars['BigInt']['output']>;
  Ethereum_BlockChangedFilter: Ethereum_BlockChangedFilter;
  Ethereum_Block_height: Ethereum_Block_height;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;
  Ethereum_Bytes: ResolverTypeWrapper<Scalars['Ethereum_Bytes']['output']>;
  Ethereum_Deposit: ResolverTypeWrapper<Ethereum_Deposit>;
  Ethereum_Deposit_filter: Ethereum_Deposit_filter;
  Ethereum_Deposit_orderBy: Ethereum_Deposit_orderBy;
  Ethereum_DexAmmProtocol: ResolverTypeWrapper<Ethereum_DexAmmProtocol>;
  Ethereum_DexAmmProtocol_filter: Ethereum_DexAmmProtocol_filter;
  Ethereum_DexAmmProtocol_orderBy: Ethereum_DexAmmProtocol_orderBy;
  Ethereum_FinancialsDailySnapshot: ResolverTypeWrapper<Ethereum_FinancialsDailySnapshot>;
  Ethereum_FinancialsDailySnapshot_filter: Ethereum_FinancialsDailySnapshot_filter;
  Ethereum_FinancialsDailySnapshot_orderBy: Ethereum_FinancialsDailySnapshot_orderBy;
  Float: ResolverTypeWrapper<Scalars['Float']['output']>;
  ID: ResolverTypeWrapper<Scalars['ID']['output']>;
  Int: ResolverTypeWrapper<Scalars['Int']['output']>;
  Ethereum_Int8: ResolverTypeWrapper<Scalars['Ethereum_Int8']['output']>;
  Ethereum_LiquidityPool: ResolverTypeWrapper<Ethereum_LiquidityPool>;
  Ethereum_LiquidityPoolDailySnapshot: ResolverTypeWrapper<Ethereum_LiquidityPoolDailySnapshot>;
  Ethereum_LiquidityPoolDailySnapshot_filter: Ethereum_LiquidityPoolDailySnapshot_filter;
  Ethereum_LiquidityPoolDailySnapshot_orderBy: Ethereum_LiquidityPoolDailySnapshot_orderBy;
  Ethereum_LiquidityPoolFee: ResolverTypeWrapper<Ethereum_LiquidityPoolFee>;
  Ethereum_LiquidityPoolFeeType: Ethereum_LiquidityPoolFeeType;
  Ethereum_LiquidityPoolFee_filter: Ethereum_LiquidityPoolFee_filter;
  Ethereum_LiquidityPoolFee_orderBy: Ethereum_LiquidityPoolFee_orderBy;
  Ethereum_LiquidityPoolHourlySnapshot: ResolverTypeWrapper<Ethereum_LiquidityPoolHourlySnapshot>;
  Ethereum_LiquidityPoolHourlySnapshot_filter: Ethereum_LiquidityPoolHourlySnapshot_filter;
  Ethereum_LiquidityPoolHourlySnapshot_orderBy: Ethereum_LiquidityPoolHourlySnapshot_orderBy;
  Ethereum_LiquidityPool_filter: Ethereum_LiquidityPool_filter;
  Ethereum_LiquidityPool_orderBy: Ethereum_LiquidityPool_orderBy;
  Ethereum_Network: Ethereum_Network;
  Ethereum_OrderDirection: Ethereum_OrderDirection;
  Ethereum_Position: ResolverTypeWrapper<Ethereum_Position>;
  Ethereum_PositionSnapshot: ResolverTypeWrapper<Ethereum_PositionSnapshot>;
  Ethereum_PositionSnapshot_filter: Ethereum_PositionSnapshot_filter;
  Ethereum_PositionSnapshot_orderBy: Ethereum_PositionSnapshot_orderBy;
  Ethereum_Position_filter: Ethereum_Position_filter;
  Ethereum_Position_orderBy: Ethereum_Position_orderBy;
  Ethereum_Protocol: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Ethereum_Protocol']>;
  Ethereum_ProtocolType: Ethereum_ProtocolType;
  Ethereum_Protocol_filter: Ethereum_Protocol_filter;
  Ethereum_Protocol_orderBy: Ethereum_Protocol_orderBy;
  Ethereum_RewardToken: ResolverTypeWrapper<Ethereum_RewardToken>;
  Ethereum_RewardTokenType: Ethereum_RewardTokenType;
  Ethereum_RewardToken_filter: Ethereum_RewardToken_filter;
  Ethereum_RewardToken_orderBy: Ethereum_RewardToken_orderBy;
  String: ResolverTypeWrapper<Scalars['String']['output']>;
  Ethereum_Swap: ResolverTypeWrapper<Ethereum_Swap>;
  Ethereum_Swap_filter: Ethereum_Swap_filter;
  Ethereum_Swap_orderBy: Ethereum_Swap_orderBy;
  Ethereum_Tick: ResolverTypeWrapper<Ethereum_Tick>;
  Ethereum_TickDailySnapshot: ResolverTypeWrapper<Ethereum_TickDailySnapshot>;
  Ethereum_TickDailySnapshot_filter: Ethereum_TickDailySnapshot_filter;
  Ethereum_TickDailySnapshot_orderBy: Ethereum_TickDailySnapshot_orderBy;
  Ethereum_TickHourlySnapshot: ResolverTypeWrapper<Ethereum_TickHourlySnapshot>;
  Ethereum_TickHourlySnapshot_filter: Ethereum_TickHourlySnapshot_filter;
  Ethereum_TickHourlySnapshot_orderBy: Ethereum_TickHourlySnapshot_orderBy;
  Ethereum_Tick_filter: Ethereum_Tick_filter;
  Ethereum_Tick_orderBy: Ethereum_Tick_orderBy;
  Timestamp: ResolverTypeWrapper<Scalars['Timestamp']['output']>;
  Ethereum_Token: ResolverTypeWrapper<Ethereum_Token>;
  Ethereum_TokenType: Ethereum_TokenType;
  Ethereum_Token_filter: Ethereum_Token_filter;
  Ethereum_Token_orderBy: Ethereum_Token_orderBy;
  Ethereum_UsageMetricsDailySnapshot: ResolverTypeWrapper<Ethereum_UsageMetricsDailySnapshot>;
  Ethereum_UsageMetricsDailySnapshot_filter: Ethereum_UsageMetricsDailySnapshot_filter;
  Ethereum_UsageMetricsDailySnapshot_orderBy: Ethereum_UsageMetricsDailySnapshot_orderBy;
  Ethereum_UsageMetricsHourlySnapshot: ResolverTypeWrapper<Ethereum_UsageMetricsHourlySnapshot>;
  Ethereum_UsageMetricsHourlySnapshot_filter: Ethereum_UsageMetricsHourlySnapshot_filter;
  Ethereum_UsageMetricsHourlySnapshot_orderBy: Ethereum_UsageMetricsHourlySnapshot_orderBy;
  Ethereum_Withdraw: ResolverTypeWrapper<Ethereum_Withdraw>;
  Ethereum_Withdraw_filter: Ethereum_Withdraw_filter;
  Ethereum_Withdraw_orderBy: Ethereum_Withdraw_orderBy;
  Ethereum__Block_: ResolverTypeWrapper<Ethereum__Block_>;
  Ethereum__HelperStore: ResolverTypeWrapper<Ethereum__HelperStore>;
  Ethereum__HelperStore_filter: Ethereum__HelperStore_filter;
  Ethereum__HelperStore_orderBy: Ethereum__HelperStore_orderBy;
  Ethereum__LiquidityPoolAmount: ResolverTypeWrapper<Ethereum__LiquidityPoolAmount>;
  Ethereum__LiquidityPoolAmount_filter: Ethereum__LiquidityPoolAmount_filter;
  Ethereum__LiquidityPoolAmount_orderBy: Ethereum__LiquidityPoolAmount_orderBy;
  Ethereum__Meta_: ResolverTypeWrapper<Ethereum__Meta_>;
  Ethereum__SubgraphErrorPolicy_: Ethereum__SubgraphErrorPolicy_;
  Ethereum__TokenWhitelist: ResolverTypeWrapper<Ethereum__TokenWhitelist>;
  Ethereum__TokenWhitelistSymbol: ResolverTypeWrapper<Ethereum__TokenWhitelistSymbol>;
  Ethereum__TokenWhitelistSymbol_filter: Ethereum__TokenWhitelistSymbol_filter;
  Ethereum__TokenWhitelistSymbol_orderBy: Ethereum__TokenWhitelistSymbol_orderBy;
  Ethereum__TokenWhitelist_filter: Ethereum__TokenWhitelist_filter;
  Ethereum__TokenWhitelist_orderBy: Ethereum__TokenWhitelist_orderBy;
  Optimism_Account: ResolverTypeWrapper<Optimism_Account>;
  Optimism_Account_filter: Optimism_Account_filter;
  Optimism_Account_orderBy: Optimism_Account_orderBy;
  Optimism_ActiveAccount: ResolverTypeWrapper<Optimism_ActiveAccount>;
  Optimism_ActiveAccount_filter: Optimism_ActiveAccount_filter;
  Optimism_ActiveAccount_orderBy: Optimism_ActiveAccount_orderBy;
  Optimism_Aggregation_interval: Optimism_Aggregation_interval;
  Optimism_BigDecimal: ResolverTypeWrapper<Scalars['Optimism_BigDecimal']['output']>;
  Optimism_BlockChangedFilter: Optimism_BlockChangedFilter;
  Optimism_Block_height: Optimism_Block_height;
  Optimism_Bytes: ResolverTypeWrapper<Scalars['Optimism_Bytes']['output']>;
  Optimism_Deposit: ResolverTypeWrapper<Optimism_Deposit>;
  Optimism_Deposit_filter: Optimism_Deposit_filter;
  Optimism_Deposit_orderBy: Optimism_Deposit_orderBy;
  Optimism_DexAmmProtocol: ResolverTypeWrapper<Optimism_DexAmmProtocol>;
  Optimism_DexAmmProtocol_filter: Optimism_DexAmmProtocol_filter;
  Optimism_DexAmmProtocol_orderBy: Optimism_DexAmmProtocol_orderBy;
  Optimism_FinancialsDailySnapshot: ResolverTypeWrapper<Optimism_FinancialsDailySnapshot>;
  Optimism_FinancialsDailySnapshot_filter: Optimism_FinancialsDailySnapshot_filter;
  Optimism_FinancialsDailySnapshot_orderBy: Optimism_FinancialsDailySnapshot_orderBy;
  Optimism_Int8: ResolverTypeWrapper<Scalars['Optimism_Int8']['output']>;
  Optimism_LiquidityPool: ResolverTypeWrapper<Optimism_LiquidityPool>;
  Optimism_LiquidityPoolDailySnapshot: ResolverTypeWrapper<Optimism_LiquidityPoolDailySnapshot>;
  Optimism_LiquidityPoolDailySnapshot_filter: Optimism_LiquidityPoolDailySnapshot_filter;
  Optimism_LiquidityPoolDailySnapshot_orderBy: Optimism_LiquidityPoolDailySnapshot_orderBy;
  Optimism_LiquidityPoolFee: ResolverTypeWrapper<Optimism_LiquidityPoolFee>;
  Optimism_LiquidityPoolFeeType: Optimism_LiquidityPoolFeeType;
  Optimism_LiquidityPoolFee_filter: Optimism_LiquidityPoolFee_filter;
  Optimism_LiquidityPoolFee_orderBy: Optimism_LiquidityPoolFee_orderBy;
  Optimism_LiquidityPoolHourlySnapshot: ResolverTypeWrapper<Optimism_LiquidityPoolHourlySnapshot>;
  Optimism_LiquidityPoolHourlySnapshot_filter: Optimism_LiquidityPoolHourlySnapshot_filter;
  Optimism_LiquidityPoolHourlySnapshot_orderBy: Optimism_LiquidityPoolHourlySnapshot_orderBy;
  Optimism_LiquidityPool_filter: Optimism_LiquidityPool_filter;
  Optimism_LiquidityPool_orderBy: Optimism_LiquidityPool_orderBy;
  Optimism_Network: Optimism_Network;
  Optimism_OrderDirection: Optimism_OrderDirection;
  Optimism_Position: ResolverTypeWrapper<Optimism_Position>;
  Optimism_PositionSnapshot: ResolverTypeWrapper<Optimism_PositionSnapshot>;
  Optimism_PositionSnapshot_filter: Optimism_PositionSnapshot_filter;
  Optimism_PositionSnapshot_orderBy: Optimism_PositionSnapshot_orderBy;
  Optimism_Position_filter: Optimism_Position_filter;
  Optimism_Position_orderBy: Optimism_Position_orderBy;
  Optimism_Protocol: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Optimism_Protocol']>;
  Optimism_ProtocolType: Optimism_ProtocolType;
  Optimism_Protocol_filter: Optimism_Protocol_filter;
  Optimism_Protocol_orderBy: Optimism_Protocol_orderBy;
  Optimism_RewardToken: ResolverTypeWrapper<Optimism_RewardToken>;
  Optimism_RewardTokenType: Optimism_RewardTokenType;
  Optimism_RewardToken_filter: Optimism_RewardToken_filter;
  Optimism_RewardToken_orderBy: Optimism_RewardToken_orderBy;
  Optimism_Swap: ResolverTypeWrapper<Optimism_Swap>;
  Optimism_Swap_filter: Optimism_Swap_filter;
  Optimism_Swap_orderBy: Optimism_Swap_orderBy;
  Optimism_Tick: ResolverTypeWrapper<Optimism_Tick>;
  Optimism_TickDailySnapshot: ResolverTypeWrapper<Optimism_TickDailySnapshot>;
  Optimism_TickDailySnapshot_filter: Optimism_TickDailySnapshot_filter;
  Optimism_TickDailySnapshot_orderBy: Optimism_TickDailySnapshot_orderBy;
  Optimism_TickHourlySnapshot: ResolverTypeWrapper<Optimism_TickHourlySnapshot>;
  Optimism_TickHourlySnapshot_filter: Optimism_TickHourlySnapshot_filter;
  Optimism_TickHourlySnapshot_orderBy: Optimism_TickHourlySnapshot_orderBy;
  Optimism_Tick_filter: Optimism_Tick_filter;
  Optimism_Tick_orderBy: Optimism_Tick_orderBy;
  Optimism_Token: ResolverTypeWrapper<Optimism_Token>;
  Optimism_TokenType: Optimism_TokenType;
  Optimism_Token_filter: Optimism_Token_filter;
  Optimism_Token_orderBy: Optimism_Token_orderBy;
  Optimism_UsageMetricsDailySnapshot: ResolverTypeWrapper<Optimism_UsageMetricsDailySnapshot>;
  Optimism_UsageMetricsDailySnapshot_filter: Optimism_UsageMetricsDailySnapshot_filter;
  Optimism_UsageMetricsDailySnapshot_orderBy: Optimism_UsageMetricsDailySnapshot_orderBy;
  Optimism_UsageMetricsHourlySnapshot: ResolverTypeWrapper<Optimism_UsageMetricsHourlySnapshot>;
  Optimism_UsageMetricsHourlySnapshot_filter: Optimism_UsageMetricsHourlySnapshot_filter;
  Optimism_UsageMetricsHourlySnapshot_orderBy: Optimism_UsageMetricsHourlySnapshot_orderBy;
  Optimism_Withdraw: ResolverTypeWrapper<Optimism_Withdraw>;
  Optimism_Withdraw_filter: Optimism_Withdraw_filter;
  Optimism_Withdraw_orderBy: Optimism_Withdraw_orderBy;
  Optimism__Block_: ResolverTypeWrapper<Optimism__Block_>;
  Optimism__HelperStore: ResolverTypeWrapper<Optimism__HelperStore>;
  Optimism__HelperStore_filter: Optimism__HelperStore_filter;
  Optimism__HelperStore_orderBy: Optimism__HelperStore_orderBy;
  Optimism__LiquidityPoolAmount: ResolverTypeWrapper<Optimism__LiquidityPoolAmount>;
  Optimism__LiquidityPoolAmount_filter: Optimism__LiquidityPoolAmount_filter;
  Optimism__LiquidityPoolAmount_orderBy: Optimism__LiquidityPoolAmount_orderBy;
  Optimism__Meta_: ResolverTypeWrapper<Optimism__Meta_>;
  Optimism__SubgraphErrorPolicy_: Optimism__SubgraphErrorPolicy_;
  Optimism__TokenWhitelist: ResolverTypeWrapper<Optimism__TokenWhitelist>;
  Optimism__TokenWhitelistSymbol: ResolverTypeWrapper<Optimism__TokenWhitelistSymbol>;
  Optimism__TokenWhitelistSymbol_filter: Optimism__TokenWhitelistSymbol_filter;
  Optimism__TokenWhitelistSymbol_orderBy: Optimism__TokenWhitelistSymbol_orderBy;
  Optimism__TokenWhitelist_filter: Optimism__TokenWhitelist_filter;
  Optimism__TokenWhitelist_orderBy: Optimism__TokenWhitelist_orderBy;
  Arbitrum_Account: ResolverTypeWrapper<Arbitrum_Account>;
  Arbitrum_Account_filter: Arbitrum_Account_filter;
  Arbitrum_Account_orderBy: Arbitrum_Account_orderBy;
  Arbitrum_ActiveAccount: ResolverTypeWrapper<Arbitrum_ActiveAccount>;
  Arbitrum_ActiveAccount_filter: Arbitrum_ActiveAccount_filter;
  Arbitrum_ActiveAccount_orderBy: Arbitrum_ActiveAccount_orderBy;
  Arbitrum_Aggregation_interval: Arbitrum_Aggregation_interval;
  Arbitrum_BigDecimal: ResolverTypeWrapper<Scalars['Arbitrum_BigDecimal']['output']>;
  Arbitrum_BlockChangedFilter: Arbitrum_BlockChangedFilter;
  Arbitrum_Block_height: Arbitrum_Block_height;
  Arbitrum_Bytes: ResolverTypeWrapper<Scalars['Arbitrum_Bytes']['output']>;
  Arbitrum_Deposit: ResolverTypeWrapper<Arbitrum_Deposit>;
  Arbitrum_Deposit_filter: Arbitrum_Deposit_filter;
  Arbitrum_Deposit_orderBy: Arbitrum_Deposit_orderBy;
  Arbitrum_DexAmmProtocol: ResolverTypeWrapper<Arbitrum_DexAmmProtocol>;
  Arbitrum_DexAmmProtocol_filter: Arbitrum_DexAmmProtocol_filter;
  Arbitrum_DexAmmProtocol_orderBy: Arbitrum_DexAmmProtocol_orderBy;
  Arbitrum_FinancialsDailySnapshot: ResolverTypeWrapper<Arbitrum_FinancialsDailySnapshot>;
  Arbitrum_FinancialsDailySnapshot_filter: Arbitrum_FinancialsDailySnapshot_filter;
  Arbitrum_FinancialsDailySnapshot_orderBy: Arbitrum_FinancialsDailySnapshot_orderBy;
  Arbitrum_Int8: ResolverTypeWrapper<Scalars['Arbitrum_Int8']['output']>;
  Arbitrum_LiquidityPool: ResolverTypeWrapper<Arbitrum_LiquidityPool>;
  Arbitrum_LiquidityPoolDailySnapshot: ResolverTypeWrapper<Arbitrum_LiquidityPoolDailySnapshot>;
  Arbitrum_LiquidityPoolDailySnapshot_filter: Arbitrum_LiquidityPoolDailySnapshot_filter;
  Arbitrum_LiquidityPoolDailySnapshot_orderBy: Arbitrum_LiquidityPoolDailySnapshot_orderBy;
  Arbitrum_LiquidityPoolFee: ResolverTypeWrapper<Arbitrum_LiquidityPoolFee>;
  Arbitrum_LiquidityPoolFeeType: Arbitrum_LiquidityPoolFeeType;
  Arbitrum_LiquidityPoolFee_filter: Arbitrum_LiquidityPoolFee_filter;
  Arbitrum_LiquidityPoolFee_orderBy: Arbitrum_LiquidityPoolFee_orderBy;
  Arbitrum_LiquidityPoolHourlySnapshot: ResolverTypeWrapper<Arbitrum_LiquidityPoolHourlySnapshot>;
  Arbitrum_LiquidityPoolHourlySnapshot_filter: Arbitrum_LiquidityPoolHourlySnapshot_filter;
  Arbitrum_LiquidityPoolHourlySnapshot_orderBy: Arbitrum_LiquidityPoolHourlySnapshot_orderBy;
  Arbitrum_LiquidityPool_filter: Arbitrum_LiquidityPool_filter;
  Arbitrum_LiquidityPool_orderBy: Arbitrum_LiquidityPool_orderBy;
  Arbitrum_Network: Arbitrum_Network;
  Arbitrum_OrderDirection: Arbitrum_OrderDirection;
  Arbitrum_Position: ResolverTypeWrapper<Arbitrum_Position>;
  Arbitrum_PositionSnapshot: ResolverTypeWrapper<Arbitrum_PositionSnapshot>;
  Arbitrum_PositionSnapshot_filter: Arbitrum_PositionSnapshot_filter;
  Arbitrum_PositionSnapshot_orderBy: Arbitrum_PositionSnapshot_orderBy;
  Arbitrum_Position_filter: Arbitrum_Position_filter;
  Arbitrum_Position_orderBy: Arbitrum_Position_orderBy;
  Arbitrum_Protocol: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Arbitrum_Protocol']>;
  Arbitrum_ProtocolType: Arbitrum_ProtocolType;
  Arbitrum_Protocol_filter: Arbitrum_Protocol_filter;
  Arbitrum_Protocol_orderBy: Arbitrum_Protocol_orderBy;
  Arbitrum_RewardToken: ResolverTypeWrapper<Arbitrum_RewardToken>;
  Arbitrum_RewardTokenType: Arbitrum_RewardTokenType;
  Arbitrum_RewardToken_filter: Arbitrum_RewardToken_filter;
  Arbitrum_RewardToken_orderBy: Arbitrum_RewardToken_orderBy;
  Arbitrum_Swap: ResolverTypeWrapper<Arbitrum_Swap>;
  Arbitrum_Swap_filter: Arbitrum_Swap_filter;
  Arbitrum_Swap_orderBy: Arbitrum_Swap_orderBy;
  Arbitrum_Tick: ResolverTypeWrapper<Arbitrum_Tick>;
  Arbitrum_TickDailySnapshot: ResolverTypeWrapper<Arbitrum_TickDailySnapshot>;
  Arbitrum_TickDailySnapshot_filter: Arbitrum_TickDailySnapshot_filter;
  Arbitrum_TickDailySnapshot_orderBy: Arbitrum_TickDailySnapshot_orderBy;
  Arbitrum_TickHourlySnapshot: ResolverTypeWrapper<Arbitrum_TickHourlySnapshot>;
  Arbitrum_TickHourlySnapshot_filter: Arbitrum_TickHourlySnapshot_filter;
  Arbitrum_TickHourlySnapshot_orderBy: Arbitrum_TickHourlySnapshot_orderBy;
  Arbitrum_Tick_filter: Arbitrum_Tick_filter;
  Arbitrum_Tick_orderBy: Arbitrum_Tick_orderBy;
  Arbitrum_Token: ResolverTypeWrapper<Arbitrum_Token>;
  Arbitrum_TokenType: Arbitrum_TokenType;
  Arbitrum_Token_filter: Arbitrum_Token_filter;
  Arbitrum_Token_orderBy: Arbitrum_Token_orderBy;
  Arbitrum_UsageMetricsDailySnapshot: ResolverTypeWrapper<Arbitrum_UsageMetricsDailySnapshot>;
  Arbitrum_UsageMetricsDailySnapshot_filter: Arbitrum_UsageMetricsDailySnapshot_filter;
  Arbitrum_UsageMetricsDailySnapshot_orderBy: Arbitrum_UsageMetricsDailySnapshot_orderBy;
  Arbitrum_UsageMetricsHourlySnapshot: ResolverTypeWrapper<Arbitrum_UsageMetricsHourlySnapshot>;
  Arbitrum_UsageMetricsHourlySnapshot_filter: Arbitrum_UsageMetricsHourlySnapshot_filter;
  Arbitrum_UsageMetricsHourlySnapshot_orderBy: Arbitrum_UsageMetricsHourlySnapshot_orderBy;
  Arbitrum_Withdraw: ResolverTypeWrapper<Arbitrum_Withdraw>;
  Arbitrum_Withdraw_filter: Arbitrum_Withdraw_filter;
  Arbitrum_Withdraw_orderBy: Arbitrum_Withdraw_orderBy;
  Arbitrum__Block_: ResolverTypeWrapper<Arbitrum__Block_>;
  Arbitrum__HelperStore: ResolverTypeWrapper<Arbitrum__HelperStore>;
  Arbitrum__HelperStore_filter: Arbitrum__HelperStore_filter;
  Arbitrum__HelperStore_orderBy: Arbitrum__HelperStore_orderBy;
  Arbitrum__LiquidityPoolAmount: ResolverTypeWrapper<Arbitrum__LiquidityPoolAmount>;
  Arbitrum__LiquidityPoolAmount_filter: Arbitrum__LiquidityPoolAmount_filter;
  Arbitrum__LiquidityPoolAmount_orderBy: Arbitrum__LiquidityPoolAmount_orderBy;
  Arbitrum__Meta_: ResolverTypeWrapper<Arbitrum__Meta_>;
  Arbitrum__SubgraphErrorPolicy_: Arbitrum__SubgraphErrorPolicy_;
  Arbitrum__TokenWhitelist: ResolverTypeWrapper<Arbitrum__TokenWhitelist>;
  Arbitrum__TokenWhitelistSymbol: ResolverTypeWrapper<Arbitrum__TokenWhitelistSymbol>;
  Arbitrum__TokenWhitelistSymbol_filter: Arbitrum__TokenWhitelistSymbol_filter;
  Arbitrum__TokenWhitelistSymbol_orderBy: Arbitrum__TokenWhitelistSymbol_orderBy;
  Arbitrum__TokenWhitelist_filter: Arbitrum__TokenWhitelist_filter;
  Arbitrum__TokenWhitelist_orderBy: Arbitrum__TokenWhitelist_orderBy;
  Base_Account: ResolverTypeWrapper<Base_Account>;
  Base_Account_filter: Base_Account_filter;
  Base_Account_orderBy: Base_Account_orderBy;
  Base_ActiveAccount: ResolverTypeWrapper<Base_ActiveAccount>;
  Base_ActiveAccount_filter: Base_ActiveAccount_filter;
  Base_ActiveAccount_orderBy: Base_ActiveAccount_orderBy;
  Base_Aggregation_interval: Base_Aggregation_interval;
  Base_BigDecimal: ResolverTypeWrapper<Scalars['Base_BigDecimal']['output']>;
  Base_BlockChangedFilter: Base_BlockChangedFilter;
  Base_Block_height: Base_Block_height;
  Base_Bytes: ResolverTypeWrapper<Scalars['Base_Bytes']['output']>;
  Base_Deposit: ResolverTypeWrapper<Base_Deposit>;
  Base_Deposit_filter: Base_Deposit_filter;
  Base_Deposit_orderBy: Base_Deposit_orderBy;
  Base_DexAmmProtocol: ResolverTypeWrapper<Base_DexAmmProtocol>;
  Base_DexAmmProtocol_filter: Base_DexAmmProtocol_filter;
  Base_DexAmmProtocol_orderBy: Base_DexAmmProtocol_orderBy;
  Base_FinancialsDailySnapshot: ResolverTypeWrapper<Base_FinancialsDailySnapshot>;
  Base_FinancialsDailySnapshot_filter: Base_FinancialsDailySnapshot_filter;
  Base_FinancialsDailySnapshot_orderBy: Base_FinancialsDailySnapshot_orderBy;
  Base_Int8: ResolverTypeWrapper<Scalars['Base_Int8']['output']>;
  Base_LiquidityPool: ResolverTypeWrapper<Base_LiquidityPool>;
  Base_LiquidityPoolDailySnapshot: ResolverTypeWrapper<Base_LiquidityPoolDailySnapshot>;
  Base_LiquidityPoolDailySnapshot_filter: Base_LiquidityPoolDailySnapshot_filter;
  Base_LiquidityPoolDailySnapshot_orderBy: Base_LiquidityPoolDailySnapshot_orderBy;
  Base_LiquidityPoolFee: ResolverTypeWrapper<Base_LiquidityPoolFee>;
  Base_LiquidityPoolFeeType: Base_LiquidityPoolFeeType;
  Base_LiquidityPoolFee_filter: Base_LiquidityPoolFee_filter;
  Base_LiquidityPoolFee_orderBy: Base_LiquidityPoolFee_orderBy;
  Base_LiquidityPoolHourlySnapshot: ResolverTypeWrapper<Base_LiquidityPoolHourlySnapshot>;
  Base_LiquidityPoolHourlySnapshot_filter: Base_LiquidityPoolHourlySnapshot_filter;
  Base_LiquidityPoolHourlySnapshot_orderBy: Base_LiquidityPoolHourlySnapshot_orderBy;
  Base_LiquidityPool_filter: Base_LiquidityPool_filter;
  Base_LiquidityPool_orderBy: Base_LiquidityPool_orderBy;
  Base_Network: Base_Network;
  Base_OrderDirection: Base_OrderDirection;
  Base_Position: ResolverTypeWrapper<Base_Position>;
  Base_PositionSnapshot: ResolverTypeWrapper<Base_PositionSnapshot>;
  Base_PositionSnapshot_filter: Base_PositionSnapshot_filter;
  Base_PositionSnapshot_orderBy: Base_PositionSnapshot_orderBy;
  Base_Position_filter: Base_Position_filter;
  Base_Position_orderBy: Base_Position_orderBy;
  Base_Protocol: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Base_Protocol']>;
  Base_ProtocolType: Base_ProtocolType;
  Base_Protocol_filter: Base_Protocol_filter;
  Base_Protocol_orderBy: Base_Protocol_orderBy;
  Base_RewardToken: ResolverTypeWrapper<Base_RewardToken>;
  Base_RewardTokenType: Base_RewardTokenType;
  Base_RewardToken_filter: Base_RewardToken_filter;
  Base_RewardToken_orderBy: Base_RewardToken_orderBy;
  Base_Swap: ResolverTypeWrapper<Base_Swap>;
  Base_Swap_filter: Base_Swap_filter;
  Base_Swap_orderBy: Base_Swap_orderBy;
  Base_Tick: ResolverTypeWrapper<Base_Tick>;
  Base_TickDailySnapshot: ResolverTypeWrapper<Base_TickDailySnapshot>;
  Base_TickDailySnapshot_filter: Base_TickDailySnapshot_filter;
  Base_TickDailySnapshot_orderBy: Base_TickDailySnapshot_orderBy;
  Base_TickHourlySnapshot: ResolverTypeWrapper<Base_TickHourlySnapshot>;
  Base_TickHourlySnapshot_filter: Base_TickHourlySnapshot_filter;
  Base_TickHourlySnapshot_orderBy: Base_TickHourlySnapshot_orderBy;
  Base_Tick_filter: Base_Tick_filter;
  Base_Tick_orderBy: Base_Tick_orderBy;
  Base_Token: ResolverTypeWrapper<Base_Token>;
  Base_TokenType: Base_TokenType;
  Base_Token_filter: Base_Token_filter;
  Base_Token_orderBy: Base_Token_orderBy;
  Base_UsageMetricsDailySnapshot: ResolverTypeWrapper<Base_UsageMetricsDailySnapshot>;
  Base_UsageMetricsDailySnapshot_filter: Base_UsageMetricsDailySnapshot_filter;
  Base_UsageMetricsDailySnapshot_orderBy: Base_UsageMetricsDailySnapshot_orderBy;
  Base_UsageMetricsHourlySnapshot: ResolverTypeWrapper<Base_UsageMetricsHourlySnapshot>;
  Base_UsageMetricsHourlySnapshot_filter: Base_UsageMetricsHourlySnapshot_filter;
  Base_UsageMetricsHourlySnapshot_orderBy: Base_UsageMetricsHourlySnapshot_orderBy;
  Base_Withdraw: ResolverTypeWrapper<Base_Withdraw>;
  Base_Withdraw_filter: Base_Withdraw_filter;
  Base_Withdraw_orderBy: Base_Withdraw_orderBy;
  Base__Block_: ResolverTypeWrapper<Base__Block_>;
  Base__HelperStore: ResolverTypeWrapper<Base__HelperStore>;
  Base__HelperStore_filter: Base__HelperStore_filter;
  Base__HelperStore_orderBy: Base__HelperStore_orderBy;
  Base__LiquidityPoolAmount: ResolverTypeWrapper<Base__LiquidityPoolAmount>;
  Base__LiquidityPoolAmount_filter: Base__LiquidityPoolAmount_filter;
  Base__LiquidityPoolAmount_orderBy: Base__LiquidityPoolAmount_orderBy;
  Base__Meta_: ResolverTypeWrapper<Base__Meta_>;
  Base__SubgraphErrorPolicy_: Base__SubgraphErrorPolicy_;
  Base__TokenWhitelist: ResolverTypeWrapper<Base__TokenWhitelist>;
  Base__TokenWhitelistSymbol: ResolverTypeWrapper<Base__TokenWhitelistSymbol>;
  Base__TokenWhitelistSymbol_filter: Base__TokenWhitelistSymbol_filter;
  Base__TokenWhitelistSymbol_orderBy: Base__TokenWhitelistSymbol_orderBy;
  Base__TokenWhitelist_filter: Base__TokenWhitelist_filter;
  Base__TokenWhitelist_orderBy: Base__TokenWhitelist_orderBy;
}>;

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = ResolversObject<{
  Query: {};
  Subscription: {};
  Ethereum_Account: Ethereum_Account;
  Ethereum_Account_filter: Ethereum_Account_filter;
  Ethereum_ActiveAccount: Ethereum_ActiveAccount;
  Ethereum_ActiveAccount_filter: Ethereum_ActiveAccount_filter;
  Ethereum_BigDecimal: Scalars['Ethereum_BigDecimal']['output'];
  BigInt: Scalars['BigInt']['output'];
  Ethereum_BlockChangedFilter: Ethereum_BlockChangedFilter;
  Ethereum_Block_height: Ethereum_Block_height;
  Boolean: Scalars['Boolean']['output'];
  Ethereum_Bytes: Scalars['Ethereum_Bytes']['output'];
  Ethereum_Deposit: Ethereum_Deposit;
  Ethereum_Deposit_filter: Ethereum_Deposit_filter;
  Ethereum_DexAmmProtocol: Ethereum_DexAmmProtocol;
  Ethereum_DexAmmProtocol_filter: Ethereum_DexAmmProtocol_filter;
  Ethereum_FinancialsDailySnapshot: Ethereum_FinancialsDailySnapshot;
  Ethereum_FinancialsDailySnapshot_filter: Ethereum_FinancialsDailySnapshot_filter;
  Float: Scalars['Float']['output'];
  ID: Scalars['ID']['output'];
  Int: Scalars['Int']['output'];
  Ethereum_Int8: Scalars['Ethereum_Int8']['output'];
  Ethereum_LiquidityPool: Ethereum_LiquidityPool;
  Ethereum_LiquidityPoolDailySnapshot: Ethereum_LiquidityPoolDailySnapshot;
  Ethereum_LiquidityPoolDailySnapshot_filter: Ethereum_LiquidityPoolDailySnapshot_filter;
  Ethereum_LiquidityPoolFee: Ethereum_LiquidityPoolFee;
  Ethereum_LiquidityPoolFee_filter: Ethereum_LiquidityPoolFee_filter;
  Ethereum_LiquidityPoolHourlySnapshot: Ethereum_LiquidityPoolHourlySnapshot;
  Ethereum_LiquidityPoolHourlySnapshot_filter: Ethereum_LiquidityPoolHourlySnapshot_filter;
  Ethereum_LiquidityPool_filter: Ethereum_LiquidityPool_filter;
  Ethereum_Position: Ethereum_Position;
  Ethereum_PositionSnapshot: Ethereum_PositionSnapshot;
  Ethereum_PositionSnapshot_filter: Ethereum_PositionSnapshot_filter;
  Ethereum_Position_filter: Ethereum_Position_filter;
  Ethereum_Protocol: ResolversInterfaceTypes<ResolversParentTypes>['Ethereum_Protocol'];
  Ethereum_Protocol_filter: Ethereum_Protocol_filter;
  Ethereum_RewardToken: Ethereum_RewardToken;
  Ethereum_RewardToken_filter: Ethereum_RewardToken_filter;
  String: Scalars['String']['output'];
  Ethereum_Swap: Ethereum_Swap;
  Ethereum_Swap_filter: Ethereum_Swap_filter;
  Ethereum_Tick: Ethereum_Tick;
  Ethereum_TickDailySnapshot: Ethereum_TickDailySnapshot;
  Ethereum_TickDailySnapshot_filter: Ethereum_TickDailySnapshot_filter;
  Ethereum_TickHourlySnapshot: Ethereum_TickHourlySnapshot;
  Ethereum_TickHourlySnapshot_filter: Ethereum_TickHourlySnapshot_filter;
  Ethereum_Tick_filter: Ethereum_Tick_filter;
  Timestamp: Scalars['Timestamp']['output'];
  Ethereum_Token: Ethereum_Token;
  Ethereum_Token_filter: Ethereum_Token_filter;
  Ethereum_UsageMetricsDailySnapshot: Ethereum_UsageMetricsDailySnapshot;
  Ethereum_UsageMetricsDailySnapshot_filter: Ethereum_UsageMetricsDailySnapshot_filter;
  Ethereum_UsageMetricsHourlySnapshot: Ethereum_UsageMetricsHourlySnapshot;
  Ethereum_UsageMetricsHourlySnapshot_filter: Ethereum_UsageMetricsHourlySnapshot_filter;
  Ethereum_Withdraw: Ethereum_Withdraw;
  Ethereum_Withdraw_filter: Ethereum_Withdraw_filter;
  Ethereum__Block_: Ethereum__Block_;
  Ethereum__HelperStore: Ethereum__HelperStore;
  Ethereum__HelperStore_filter: Ethereum__HelperStore_filter;
  Ethereum__LiquidityPoolAmount: Ethereum__LiquidityPoolAmount;
  Ethereum__LiquidityPoolAmount_filter: Ethereum__LiquidityPoolAmount_filter;
  Ethereum__Meta_: Ethereum__Meta_;
  Ethereum__TokenWhitelist: Ethereum__TokenWhitelist;
  Ethereum__TokenWhitelistSymbol: Ethereum__TokenWhitelistSymbol;
  Ethereum__TokenWhitelistSymbol_filter: Ethereum__TokenWhitelistSymbol_filter;
  Ethereum__TokenWhitelist_filter: Ethereum__TokenWhitelist_filter;
  Optimism_Account: Optimism_Account;
  Optimism_Account_filter: Optimism_Account_filter;
  Optimism_ActiveAccount: Optimism_ActiveAccount;
  Optimism_ActiveAccount_filter: Optimism_ActiveAccount_filter;
  Optimism_BigDecimal: Scalars['Optimism_BigDecimal']['output'];
  Optimism_BlockChangedFilter: Optimism_BlockChangedFilter;
  Optimism_Block_height: Optimism_Block_height;
  Optimism_Bytes: Scalars['Optimism_Bytes']['output'];
  Optimism_Deposit: Optimism_Deposit;
  Optimism_Deposit_filter: Optimism_Deposit_filter;
  Optimism_DexAmmProtocol: Optimism_DexAmmProtocol;
  Optimism_DexAmmProtocol_filter: Optimism_DexAmmProtocol_filter;
  Optimism_FinancialsDailySnapshot: Optimism_FinancialsDailySnapshot;
  Optimism_FinancialsDailySnapshot_filter: Optimism_FinancialsDailySnapshot_filter;
  Optimism_Int8: Scalars['Optimism_Int8']['output'];
  Optimism_LiquidityPool: Optimism_LiquidityPool;
  Optimism_LiquidityPoolDailySnapshot: Optimism_LiquidityPoolDailySnapshot;
  Optimism_LiquidityPoolDailySnapshot_filter: Optimism_LiquidityPoolDailySnapshot_filter;
  Optimism_LiquidityPoolFee: Optimism_LiquidityPoolFee;
  Optimism_LiquidityPoolFee_filter: Optimism_LiquidityPoolFee_filter;
  Optimism_LiquidityPoolHourlySnapshot: Optimism_LiquidityPoolHourlySnapshot;
  Optimism_LiquidityPoolHourlySnapshot_filter: Optimism_LiquidityPoolHourlySnapshot_filter;
  Optimism_LiquidityPool_filter: Optimism_LiquidityPool_filter;
  Optimism_Position: Optimism_Position;
  Optimism_PositionSnapshot: Optimism_PositionSnapshot;
  Optimism_PositionSnapshot_filter: Optimism_PositionSnapshot_filter;
  Optimism_Position_filter: Optimism_Position_filter;
  Optimism_Protocol: ResolversInterfaceTypes<ResolversParentTypes>['Optimism_Protocol'];
  Optimism_Protocol_filter: Optimism_Protocol_filter;
  Optimism_RewardToken: Optimism_RewardToken;
  Optimism_RewardToken_filter: Optimism_RewardToken_filter;
  Optimism_Swap: Optimism_Swap;
  Optimism_Swap_filter: Optimism_Swap_filter;
  Optimism_Tick: Optimism_Tick;
  Optimism_TickDailySnapshot: Optimism_TickDailySnapshot;
  Optimism_TickDailySnapshot_filter: Optimism_TickDailySnapshot_filter;
  Optimism_TickHourlySnapshot: Optimism_TickHourlySnapshot;
  Optimism_TickHourlySnapshot_filter: Optimism_TickHourlySnapshot_filter;
  Optimism_Tick_filter: Optimism_Tick_filter;
  Optimism_Token: Optimism_Token;
  Optimism_Token_filter: Optimism_Token_filter;
  Optimism_UsageMetricsDailySnapshot: Optimism_UsageMetricsDailySnapshot;
  Optimism_UsageMetricsDailySnapshot_filter: Optimism_UsageMetricsDailySnapshot_filter;
  Optimism_UsageMetricsHourlySnapshot: Optimism_UsageMetricsHourlySnapshot;
  Optimism_UsageMetricsHourlySnapshot_filter: Optimism_UsageMetricsHourlySnapshot_filter;
  Optimism_Withdraw: Optimism_Withdraw;
  Optimism_Withdraw_filter: Optimism_Withdraw_filter;
  Optimism__Block_: Optimism__Block_;
  Optimism__HelperStore: Optimism__HelperStore;
  Optimism__HelperStore_filter: Optimism__HelperStore_filter;
  Optimism__LiquidityPoolAmount: Optimism__LiquidityPoolAmount;
  Optimism__LiquidityPoolAmount_filter: Optimism__LiquidityPoolAmount_filter;
  Optimism__Meta_: Optimism__Meta_;
  Optimism__TokenWhitelist: Optimism__TokenWhitelist;
  Optimism__TokenWhitelistSymbol: Optimism__TokenWhitelistSymbol;
  Optimism__TokenWhitelistSymbol_filter: Optimism__TokenWhitelistSymbol_filter;
  Optimism__TokenWhitelist_filter: Optimism__TokenWhitelist_filter;
  Arbitrum_Account: Arbitrum_Account;
  Arbitrum_Account_filter: Arbitrum_Account_filter;
  Arbitrum_ActiveAccount: Arbitrum_ActiveAccount;
  Arbitrum_ActiveAccount_filter: Arbitrum_ActiveAccount_filter;
  Arbitrum_BigDecimal: Scalars['Arbitrum_BigDecimal']['output'];
  Arbitrum_BlockChangedFilter: Arbitrum_BlockChangedFilter;
  Arbitrum_Block_height: Arbitrum_Block_height;
  Arbitrum_Bytes: Scalars['Arbitrum_Bytes']['output'];
  Arbitrum_Deposit: Arbitrum_Deposit;
  Arbitrum_Deposit_filter: Arbitrum_Deposit_filter;
  Arbitrum_DexAmmProtocol: Arbitrum_DexAmmProtocol;
  Arbitrum_DexAmmProtocol_filter: Arbitrum_DexAmmProtocol_filter;
  Arbitrum_FinancialsDailySnapshot: Arbitrum_FinancialsDailySnapshot;
  Arbitrum_FinancialsDailySnapshot_filter: Arbitrum_FinancialsDailySnapshot_filter;
  Arbitrum_Int8: Scalars['Arbitrum_Int8']['output'];
  Arbitrum_LiquidityPool: Arbitrum_LiquidityPool;
  Arbitrum_LiquidityPoolDailySnapshot: Arbitrum_LiquidityPoolDailySnapshot;
  Arbitrum_LiquidityPoolDailySnapshot_filter: Arbitrum_LiquidityPoolDailySnapshot_filter;
  Arbitrum_LiquidityPoolFee: Arbitrum_LiquidityPoolFee;
  Arbitrum_LiquidityPoolFee_filter: Arbitrum_LiquidityPoolFee_filter;
  Arbitrum_LiquidityPoolHourlySnapshot: Arbitrum_LiquidityPoolHourlySnapshot;
  Arbitrum_LiquidityPoolHourlySnapshot_filter: Arbitrum_LiquidityPoolHourlySnapshot_filter;
  Arbitrum_LiquidityPool_filter: Arbitrum_LiquidityPool_filter;
  Arbitrum_Position: Arbitrum_Position;
  Arbitrum_PositionSnapshot: Arbitrum_PositionSnapshot;
  Arbitrum_PositionSnapshot_filter: Arbitrum_PositionSnapshot_filter;
  Arbitrum_Position_filter: Arbitrum_Position_filter;
  Arbitrum_Protocol: ResolversInterfaceTypes<ResolversParentTypes>['Arbitrum_Protocol'];
  Arbitrum_Protocol_filter: Arbitrum_Protocol_filter;
  Arbitrum_RewardToken: Arbitrum_RewardToken;
  Arbitrum_RewardToken_filter: Arbitrum_RewardToken_filter;
  Arbitrum_Swap: Arbitrum_Swap;
  Arbitrum_Swap_filter: Arbitrum_Swap_filter;
  Arbitrum_Tick: Arbitrum_Tick;
  Arbitrum_TickDailySnapshot: Arbitrum_TickDailySnapshot;
  Arbitrum_TickDailySnapshot_filter: Arbitrum_TickDailySnapshot_filter;
  Arbitrum_TickHourlySnapshot: Arbitrum_TickHourlySnapshot;
  Arbitrum_TickHourlySnapshot_filter: Arbitrum_TickHourlySnapshot_filter;
  Arbitrum_Tick_filter: Arbitrum_Tick_filter;
  Arbitrum_Token: Arbitrum_Token;
  Arbitrum_Token_filter: Arbitrum_Token_filter;
  Arbitrum_UsageMetricsDailySnapshot: Arbitrum_UsageMetricsDailySnapshot;
  Arbitrum_UsageMetricsDailySnapshot_filter: Arbitrum_UsageMetricsDailySnapshot_filter;
  Arbitrum_UsageMetricsHourlySnapshot: Arbitrum_UsageMetricsHourlySnapshot;
  Arbitrum_UsageMetricsHourlySnapshot_filter: Arbitrum_UsageMetricsHourlySnapshot_filter;
  Arbitrum_Withdraw: Arbitrum_Withdraw;
  Arbitrum_Withdraw_filter: Arbitrum_Withdraw_filter;
  Arbitrum__Block_: Arbitrum__Block_;
  Arbitrum__HelperStore: Arbitrum__HelperStore;
  Arbitrum__HelperStore_filter: Arbitrum__HelperStore_filter;
  Arbitrum__LiquidityPoolAmount: Arbitrum__LiquidityPoolAmount;
  Arbitrum__LiquidityPoolAmount_filter: Arbitrum__LiquidityPoolAmount_filter;
  Arbitrum__Meta_: Arbitrum__Meta_;
  Arbitrum__TokenWhitelist: Arbitrum__TokenWhitelist;
  Arbitrum__TokenWhitelistSymbol: Arbitrum__TokenWhitelistSymbol;
  Arbitrum__TokenWhitelistSymbol_filter: Arbitrum__TokenWhitelistSymbol_filter;
  Arbitrum__TokenWhitelist_filter: Arbitrum__TokenWhitelist_filter;
  Base_Account: Base_Account;
  Base_Account_filter: Base_Account_filter;
  Base_ActiveAccount: Base_ActiveAccount;
  Base_ActiveAccount_filter: Base_ActiveAccount_filter;
  Base_BigDecimal: Scalars['Base_BigDecimal']['output'];
  Base_BlockChangedFilter: Base_BlockChangedFilter;
  Base_Block_height: Base_Block_height;
  Base_Bytes: Scalars['Base_Bytes']['output'];
  Base_Deposit: Base_Deposit;
  Base_Deposit_filter: Base_Deposit_filter;
  Base_DexAmmProtocol: Base_DexAmmProtocol;
  Base_DexAmmProtocol_filter: Base_DexAmmProtocol_filter;
  Base_FinancialsDailySnapshot: Base_FinancialsDailySnapshot;
  Base_FinancialsDailySnapshot_filter: Base_FinancialsDailySnapshot_filter;
  Base_Int8: Scalars['Base_Int8']['output'];
  Base_LiquidityPool: Base_LiquidityPool;
  Base_LiquidityPoolDailySnapshot: Base_LiquidityPoolDailySnapshot;
  Base_LiquidityPoolDailySnapshot_filter: Base_LiquidityPoolDailySnapshot_filter;
  Base_LiquidityPoolFee: Base_LiquidityPoolFee;
  Base_LiquidityPoolFee_filter: Base_LiquidityPoolFee_filter;
  Base_LiquidityPoolHourlySnapshot: Base_LiquidityPoolHourlySnapshot;
  Base_LiquidityPoolHourlySnapshot_filter: Base_LiquidityPoolHourlySnapshot_filter;
  Base_LiquidityPool_filter: Base_LiquidityPool_filter;
  Base_Position: Base_Position;
  Base_PositionSnapshot: Base_PositionSnapshot;
  Base_PositionSnapshot_filter: Base_PositionSnapshot_filter;
  Base_Position_filter: Base_Position_filter;
  Base_Protocol: ResolversInterfaceTypes<ResolversParentTypes>['Base_Protocol'];
  Base_Protocol_filter: Base_Protocol_filter;
  Base_RewardToken: Base_RewardToken;
  Base_RewardToken_filter: Base_RewardToken_filter;
  Base_Swap: Base_Swap;
  Base_Swap_filter: Base_Swap_filter;
  Base_Tick: Base_Tick;
  Base_TickDailySnapshot: Base_TickDailySnapshot;
  Base_TickDailySnapshot_filter: Base_TickDailySnapshot_filter;
  Base_TickHourlySnapshot: Base_TickHourlySnapshot;
  Base_TickHourlySnapshot_filter: Base_TickHourlySnapshot_filter;
  Base_Tick_filter: Base_Tick_filter;
  Base_Token: Base_Token;
  Base_Token_filter: Base_Token_filter;
  Base_UsageMetricsDailySnapshot: Base_UsageMetricsDailySnapshot;
  Base_UsageMetricsDailySnapshot_filter: Base_UsageMetricsDailySnapshot_filter;
  Base_UsageMetricsHourlySnapshot: Base_UsageMetricsHourlySnapshot;
  Base_UsageMetricsHourlySnapshot_filter: Base_UsageMetricsHourlySnapshot_filter;
  Base_Withdraw: Base_Withdraw;
  Base_Withdraw_filter: Base_Withdraw_filter;
  Base__Block_: Base__Block_;
  Base__HelperStore: Base__HelperStore;
  Base__HelperStore_filter: Base__HelperStore_filter;
  Base__LiquidityPoolAmount: Base__LiquidityPoolAmount;
  Base__LiquidityPoolAmount_filter: Base__LiquidityPoolAmount_filter;
  Base__Meta_: Base__Meta_;
  Base__TokenWhitelist: Base__TokenWhitelist;
  Base__TokenWhitelistSymbol: Base__TokenWhitelistSymbol;
  Base__TokenWhitelistSymbol_filter: Base__TokenWhitelistSymbol_filter;
  Base__TokenWhitelist_filter: Base__TokenWhitelist_filter;
}>;

export type entityDirectiveArgs = { };

export type entityDirectiveResolver<Result, Parent, ContextType = MeshContext & { chainId: number }, Args = entityDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type subgraphIdDirectiveArgs = {
  id: Scalars['String']['input'];
};

export type subgraphIdDirectiveResolver<Result, Parent, ContextType = MeshContext & { chainId: number }, Args = subgraphIdDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type derivedFromDirectiveArgs = {
  field: Scalars['String']['input'];
};

export type derivedFromDirectiveResolver<Result, Parent, ContextType = MeshContext & { chainId: number }, Args = derivedFromDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type QueryResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{
  Ethereum_token?: Resolver<Maybe<ResolversTypes['Ethereum_Token']>, ParentType, ContextType, RequireFields<QueryEthereum_tokenArgs, 'id' | 'subgraphError'>>;
  Ethereum_tokens?: Resolver<Array<ResolversTypes['Ethereum_Token']>, ParentType, ContextType, RequireFields<QueryEthereum_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_rewardToken?: Resolver<Maybe<ResolversTypes['Ethereum_RewardToken']>, ParentType, ContextType, RequireFields<QueryEthereum_rewardTokenArgs, 'id' | 'subgraphError'>>;
  Ethereum_rewardTokens?: Resolver<Array<ResolversTypes['Ethereum_RewardToken']>, ParentType, ContextType, RequireFields<QueryEthereum_rewardTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_liquidityPoolFee?: Resolver<Maybe<ResolversTypes['Ethereum_LiquidityPoolFee']>, ParentType, ContextType, RequireFields<QueryEthereum_liquidityPoolFeeArgs, 'id' | 'subgraphError'>>;
  Ethereum_liquidityPoolFees?: Resolver<Array<ResolversTypes['Ethereum_LiquidityPoolFee']>, ParentType, ContextType, RequireFields<QueryEthereum_liquidityPoolFeesArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_dexAmmProtocol?: Resolver<Maybe<ResolversTypes['Ethereum_DexAmmProtocol']>, ParentType, ContextType, RequireFields<QueryEthereum_dexAmmProtocolArgs, 'id' | 'subgraphError'>>;
  Ethereum_dexAmmProtocols?: Resolver<Array<ResolversTypes['Ethereum_DexAmmProtocol']>, ParentType, ContextType, RequireFields<QueryEthereum_dexAmmProtocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_usageMetricsDailySnapshot?: Resolver<Maybe<ResolversTypes['Ethereum_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_usageMetricsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_usageMetricsDailySnapshots?: Resolver<Array<ResolversTypes['Ethereum_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_usageMetricsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_usageMetricsHourlySnapshot?: Resolver<Maybe<ResolversTypes['Ethereum_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_usageMetricsHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_usageMetricsHourlySnapshots?: Resolver<Array<ResolversTypes['Ethereum_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_usageMetricsHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_financialsDailySnapshot?: Resolver<Maybe<ResolversTypes['Ethereum_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_financialsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_financialsDailySnapshots?: Resolver<Array<ResolversTypes['Ethereum_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_financialsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_liquidityPool?: Resolver<Maybe<ResolversTypes['Ethereum_LiquidityPool']>, ParentType, ContextType, RequireFields<QueryEthereum_liquidityPoolArgs, 'id' | 'subgraphError'>>;
  Ethereum_liquidityPools?: Resolver<Array<ResolversTypes['Ethereum_LiquidityPool']>, ParentType, ContextType, RequireFields<QueryEthereum_liquidityPoolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_liquidityPoolDailySnapshot?: Resolver<Maybe<ResolversTypes['Ethereum_LiquidityPoolDailySnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_liquidityPoolDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_liquidityPoolDailySnapshots?: Resolver<Array<ResolversTypes['Ethereum_LiquidityPoolDailySnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_liquidityPoolDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_liquidityPoolHourlySnapshot?: Resolver<Maybe<ResolversTypes['Ethereum_LiquidityPoolHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_liquidityPoolHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_liquidityPoolHourlySnapshots?: Resolver<Array<ResolversTypes['Ethereum_LiquidityPoolHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_liquidityPoolHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_tick?: Resolver<Maybe<ResolversTypes['Ethereum_Tick']>, ParentType, ContextType, RequireFields<QueryEthereum_tickArgs, 'id' | 'subgraphError'>>;
  Ethereum_ticks?: Resolver<Array<ResolversTypes['Ethereum_Tick']>, ParentType, ContextType, RequireFields<QueryEthereum_ticksArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_tickDailySnapshot?: Resolver<Maybe<ResolversTypes['Ethereum_TickDailySnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_tickDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_tickDailySnapshots?: Resolver<Array<ResolversTypes['Ethereum_TickDailySnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_tickDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_tickHourlySnapshot?: Resolver<Maybe<ResolversTypes['Ethereum_TickHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_tickHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_tickHourlySnapshots?: Resolver<Array<ResolversTypes['Ethereum_TickHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_tickHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_account?: Resolver<Maybe<ResolversTypes['Ethereum_Account']>, ParentType, ContextType, RequireFields<QueryEthereum_accountArgs, 'id' | 'subgraphError'>>;
  Ethereum_accounts?: Resolver<Array<ResolversTypes['Ethereum_Account']>, ParentType, ContextType, RequireFields<QueryEthereum_accountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_position?: Resolver<Maybe<ResolversTypes['Ethereum_Position']>, ParentType, ContextType, RequireFields<QueryEthereum_positionArgs, 'id' | 'subgraphError'>>;
  Ethereum_positions?: Resolver<Array<ResolversTypes['Ethereum_Position']>, ParentType, ContextType, RequireFields<QueryEthereum_positionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_positionSnapshot?: Resolver<Maybe<ResolversTypes['Ethereum_PositionSnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_positionSnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_positionSnapshots?: Resolver<Array<ResolversTypes['Ethereum_PositionSnapshot']>, ParentType, ContextType, RequireFields<QueryEthereum_positionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_deposit?: Resolver<Maybe<ResolversTypes['Ethereum_Deposit']>, ParentType, ContextType, RequireFields<QueryEthereum_depositArgs, 'id' | 'subgraphError'>>;
  Ethereum_deposits?: Resolver<Array<ResolversTypes['Ethereum_Deposit']>, ParentType, ContextType, RequireFields<QueryEthereum_depositsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_withdraw?: Resolver<Maybe<ResolversTypes['Ethereum_Withdraw']>, ParentType, ContextType, RequireFields<QueryEthereum_withdrawArgs, 'id' | 'subgraphError'>>;
  Ethereum_withdraws?: Resolver<Array<ResolversTypes['Ethereum_Withdraw']>, ParentType, ContextType, RequireFields<QueryEthereum_withdrawsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_swap?: Resolver<Maybe<ResolversTypes['Ethereum_Swap']>, ParentType, ContextType, RequireFields<QueryEthereum_swapArgs, 'id' | 'subgraphError'>>;
  Ethereum_swaps?: Resolver<Array<ResolversTypes['Ethereum_Swap']>, ParentType, ContextType, RequireFields<QueryEthereum_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_activeAccount?: Resolver<Maybe<ResolversTypes['Ethereum_ActiveAccount']>, ParentType, ContextType, RequireFields<QueryEthereum_activeAccountArgs, 'id' | 'subgraphError'>>;
  Ethereum_activeAccounts?: Resolver<Array<ResolversTypes['Ethereum_ActiveAccount']>, ParentType, ContextType, RequireFields<QueryEthereum_activeAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_liquidityPoolAmount?: Resolver<Maybe<ResolversTypes['Ethereum__LiquidityPoolAmount']>, ParentType, ContextType, RequireFields<QueryEthereum_liquidityPoolAmountArgs, 'id' | 'subgraphError'>>;
  Ethereum_liquidityPoolAmounts?: Resolver<Array<ResolversTypes['Ethereum__LiquidityPoolAmount']>, ParentType, ContextType, RequireFields<QueryEthereum_liquidityPoolAmountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_helperStore?: Resolver<Maybe<ResolversTypes['Ethereum__HelperStore']>, ParentType, ContextType, RequireFields<QueryEthereum_helperStoreArgs, 'id' | 'subgraphError'>>;
  Ethereum_helperStores?: Resolver<Array<ResolversTypes['Ethereum__HelperStore']>, ParentType, ContextType, RequireFields<QueryEthereum_helperStoresArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_tokenWhitelist?: Resolver<Maybe<ResolversTypes['Ethereum__TokenWhitelist']>, ParentType, ContextType, RequireFields<QueryEthereum_tokenWhitelistArgs, 'id' | 'subgraphError'>>;
  Ethereum_tokenWhitelists?: Resolver<Array<ResolversTypes['Ethereum__TokenWhitelist']>, ParentType, ContextType, RequireFields<QueryEthereum_tokenWhitelistsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_tokenWhitelistSymbol?: Resolver<Maybe<ResolversTypes['Ethereum__TokenWhitelistSymbol']>, ParentType, ContextType, RequireFields<QueryEthereum_tokenWhitelistSymbolArgs, 'id' | 'subgraphError'>>;
  Ethereum_tokenWhitelistSymbols?: Resolver<Array<ResolversTypes['Ethereum__TokenWhitelistSymbol']>, ParentType, ContextType, RequireFields<QueryEthereum_tokenWhitelistSymbolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_protocol?: Resolver<Maybe<ResolversTypes['Ethereum_Protocol']>, ParentType, ContextType, RequireFields<QueryEthereum_protocolArgs, 'id' | 'subgraphError'>>;
  Ethereum_protocols?: Resolver<Array<ResolversTypes['Ethereum_Protocol']>, ParentType, ContextType, RequireFields<QueryEthereum_protocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum__meta?: Resolver<Maybe<ResolversTypes['Ethereum__Meta_']>, ParentType, ContextType, Partial<QueryEthereum__metaArgs>>;
  Optimism_token?: Resolver<Maybe<ResolversTypes['Optimism_Token']>, ParentType, ContextType, RequireFields<QueryOptimism_tokenArgs, 'id' | 'subgraphError'>>;
  Optimism_tokens?: Resolver<Array<ResolversTypes['Optimism_Token']>, ParentType, ContextType, RequireFields<QueryOptimism_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_rewardToken?: Resolver<Maybe<ResolversTypes['Optimism_RewardToken']>, ParentType, ContextType, RequireFields<QueryOptimism_rewardTokenArgs, 'id' | 'subgraphError'>>;
  Optimism_rewardTokens?: Resolver<Array<ResolversTypes['Optimism_RewardToken']>, ParentType, ContextType, RequireFields<QueryOptimism_rewardTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_liquidityPoolFee?: Resolver<Maybe<ResolversTypes['Optimism_LiquidityPoolFee']>, ParentType, ContextType, RequireFields<QueryOptimism_liquidityPoolFeeArgs, 'id' | 'subgraphError'>>;
  Optimism_liquidityPoolFees?: Resolver<Array<ResolversTypes['Optimism_LiquidityPoolFee']>, ParentType, ContextType, RequireFields<QueryOptimism_liquidityPoolFeesArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_dexAmmProtocol?: Resolver<Maybe<ResolversTypes['Optimism_DexAmmProtocol']>, ParentType, ContextType, RequireFields<QueryOptimism_dexAmmProtocolArgs, 'id' | 'subgraphError'>>;
  Optimism_dexAmmProtocols?: Resolver<Array<ResolversTypes['Optimism_DexAmmProtocol']>, ParentType, ContextType, RequireFields<QueryOptimism_dexAmmProtocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_usageMetricsDailySnapshot?: Resolver<Maybe<ResolversTypes['Optimism_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_usageMetricsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_usageMetricsDailySnapshots?: Resolver<Array<ResolversTypes['Optimism_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_usageMetricsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_usageMetricsHourlySnapshot?: Resolver<Maybe<ResolversTypes['Optimism_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_usageMetricsHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_usageMetricsHourlySnapshots?: Resolver<Array<ResolversTypes['Optimism_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_usageMetricsHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_financialsDailySnapshot?: Resolver<Maybe<ResolversTypes['Optimism_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_financialsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_financialsDailySnapshots?: Resolver<Array<ResolversTypes['Optimism_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_financialsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_liquidityPool?: Resolver<Maybe<ResolversTypes['Optimism_LiquidityPool']>, ParentType, ContextType, RequireFields<QueryOptimism_liquidityPoolArgs, 'id' | 'subgraphError'>>;
  Optimism_liquidityPools?: Resolver<Array<ResolversTypes['Optimism_LiquidityPool']>, ParentType, ContextType, RequireFields<QueryOptimism_liquidityPoolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_liquidityPoolDailySnapshot?: Resolver<Maybe<ResolversTypes['Optimism_LiquidityPoolDailySnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_liquidityPoolDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_liquidityPoolDailySnapshots?: Resolver<Array<ResolversTypes['Optimism_LiquidityPoolDailySnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_liquidityPoolDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_liquidityPoolHourlySnapshot?: Resolver<Maybe<ResolversTypes['Optimism_LiquidityPoolHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_liquidityPoolHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_liquidityPoolHourlySnapshots?: Resolver<Array<ResolversTypes['Optimism_LiquidityPoolHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_liquidityPoolHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_tick?: Resolver<Maybe<ResolversTypes['Optimism_Tick']>, ParentType, ContextType, RequireFields<QueryOptimism_tickArgs, 'id' | 'subgraphError'>>;
  Optimism_ticks?: Resolver<Array<ResolversTypes['Optimism_Tick']>, ParentType, ContextType, RequireFields<QueryOptimism_ticksArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_tickDailySnapshot?: Resolver<Maybe<ResolversTypes['Optimism_TickDailySnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_tickDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_tickDailySnapshots?: Resolver<Array<ResolversTypes['Optimism_TickDailySnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_tickDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_tickHourlySnapshot?: Resolver<Maybe<ResolversTypes['Optimism_TickHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_tickHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_tickHourlySnapshots?: Resolver<Array<ResolversTypes['Optimism_TickHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_tickHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_account?: Resolver<Maybe<ResolversTypes['Optimism_Account']>, ParentType, ContextType, RequireFields<QueryOptimism_accountArgs, 'id' | 'subgraphError'>>;
  Optimism_accounts?: Resolver<Array<ResolversTypes['Optimism_Account']>, ParentType, ContextType, RequireFields<QueryOptimism_accountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_position?: Resolver<Maybe<ResolversTypes['Optimism_Position']>, ParentType, ContextType, RequireFields<QueryOptimism_positionArgs, 'id' | 'subgraphError'>>;
  Optimism_positions?: Resolver<Array<ResolversTypes['Optimism_Position']>, ParentType, ContextType, RequireFields<QueryOptimism_positionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_positionSnapshot?: Resolver<Maybe<ResolversTypes['Optimism_PositionSnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_positionSnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_positionSnapshots?: Resolver<Array<ResolversTypes['Optimism_PositionSnapshot']>, ParentType, ContextType, RequireFields<QueryOptimism_positionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_deposit?: Resolver<Maybe<ResolversTypes['Optimism_Deposit']>, ParentType, ContextType, RequireFields<QueryOptimism_depositArgs, 'id' | 'subgraphError'>>;
  Optimism_deposits?: Resolver<Array<ResolversTypes['Optimism_Deposit']>, ParentType, ContextType, RequireFields<QueryOptimism_depositsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_withdraw?: Resolver<Maybe<ResolversTypes['Optimism_Withdraw']>, ParentType, ContextType, RequireFields<QueryOptimism_withdrawArgs, 'id' | 'subgraphError'>>;
  Optimism_withdraws?: Resolver<Array<ResolversTypes['Optimism_Withdraw']>, ParentType, ContextType, RequireFields<QueryOptimism_withdrawsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_swap?: Resolver<Maybe<ResolversTypes['Optimism_Swap']>, ParentType, ContextType, RequireFields<QueryOptimism_swapArgs, 'id' | 'subgraphError'>>;
  Optimism_swaps?: Resolver<Array<ResolversTypes['Optimism_Swap']>, ParentType, ContextType, RequireFields<QueryOptimism_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_activeAccount?: Resolver<Maybe<ResolversTypes['Optimism_ActiveAccount']>, ParentType, ContextType, RequireFields<QueryOptimism_activeAccountArgs, 'id' | 'subgraphError'>>;
  Optimism_activeAccounts?: Resolver<Array<ResolversTypes['Optimism_ActiveAccount']>, ParentType, ContextType, RequireFields<QueryOptimism_activeAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_liquidityPoolAmount?: Resolver<Maybe<ResolversTypes['Optimism__LiquidityPoolAmount']>, ParentType, ContextType, RequireFields<QueryOptimism_liquidityPoolAmountArgs, 'id' | 'subgraphError'>>;
  Optimism_liquidityPoolAmounts?: Resolver<Array<ResolversTypes['Optimism__LiquidityPoolAmount']>, ParentType, ContextType, RequireFields<QueryOptimism_liquidityPoolAmountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_helperStore?: Resolver<Maybe<ResolversTypes['Optimism__HelperStore']>, ParentType, ContextType, RequireFields<QueryOptimism_helperStoreArgs, 'id' | 'subgraphError'>>;
  Optimism_helperStores?: Resolver<Array<ResolversTypes['Optimism__HelperStore']>, ParentType, ContextType, RequireFields<QueryOptimism_helperStoresArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_tokenWhitelist?: Resolver<Maybe<ResolversTypes['Optimism__TokenWhitelist']>, ParentType, ContextType, RequireFields<QueryOptimism_tokenWhitelistArgs, 'id' | 'subgraphError'>>;
  Optimism_tokenWhitelists?: Resolver<Array<ResolversTypes['Optimism__TokenWhitelist']>, ParentType, ContextType, RequireFields<QueryOptimism_tokenWhitelistsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_tokenWhitelistSymbol?: Resolver<Maybe<ResolversTypes['Optimism__TokenWhitelistSymbol']>, ParentType, ContextType, RequireFields<QueryOptimism_tokenWhitelistSymbolArgs, 'id' | 'subgraphError'>>;
  Optimism_tokenWhitelistSymbols?: Resolver<Array<ResolversTypes['Optimism__TokenWhitelistSymbol']>, ParentType, ContextType, RequireFields<QueryOptimism_tokenWhitelistSymbolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_protocol?: Resolver<Maybe<ResolversTypes['Optimism_Protocol']>, ParentType, ContextType, RequireFields<QueryOptimism_protocolArgs, 'id' | 'subgraphError'>>;
  Optimism_protocols?: Resolver<Array<ResolversTypes['Optimism_Protocol']>, ParentType, ContextType, RequireFields<QueryOptimism_protocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism__meta?: Resolver<Maybe<ResolversTypes['Optimism__Meta_']>, ParentType, ContextType, Partial<QueryOptimism__metaArgs>>;
  Arbitrum_token?: Resolver<Maybe<ResolversTypes['Arbitrum_Token']>, ParentType, ContextType, RequireFields<QueryArbitrum_tokenArgs, 'id' | 'subgraphError'>>;
  Arbitrum_tokens?: Resolver<Array<ResolversTypes['Arbitrum_Token']>, ParentType, ContextType, RequireFields<QueryArbitrum_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_rewardToken?: Resolver<Maybe<ResolversTypes['Arbitrum_RewardToken']>, ParentType, ContextType, RequireFields<QueryArbitrum_rewardTokenArgs, 'id' | 'subgraphError'>>;
  Arbitrum_rewardTokens?: Resolver<Array<ResolversTypes['Arbitrum_RewardToken']>, ParentType, ContextType, RequireFields<QueryArbitrum_rewardTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_liquidityPoolFee?: Resolver<Maybe<ResolversTypes['Arbitrum_LiquidityPoolFee']>, ParentType, ContextType, RequireFields<QueryArbitrum_liquidityPoolFeeArgs, 'id' | 'subgraphError'>>;
  Arbitrum_liquidityPoolFees?: Resolver<Array<ResolversTypes['Arbitrum_LiquidityPoolFee']>, ParentType, ContextType, RequireFields<QueryArbitrum_liquidityPoolFeesArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_dexAmmProtocol?: Resolver<Maybe<ResolversTypes['Arbitrum_DexAmmProtocol']>, ParentType, ContextType, RequireFields<QueryArbitrum_dexAmmProtocolArgs, 'id' | 'subgraphError'>>;
  Arbitrum_dexAmmProtocols?: Resolver<Array<ResolversTypes['Arbitrum_DexAmmProtocol']>, ParentType, ContextType, RequireFields<QueryArbitrum_dexAmmProtocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_usageMetricsDailySnapshot?: Resolver<Maybe<ResolversTypes['Arbitrum_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_usageMetricsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_usageMetricsDailySnapshots?: Resolver<Array<ResolversTypes['Arbitrum_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_usageMetricsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_usageMetricsHourlySnapshot?: Resolver<Maybe<ResolversTypes['Arbitrum_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_usageMetricsHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_usageMetricsHourlySnapshots?: Resolver<Array<ResolversTypes['Arbitrum_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_usageMetricsHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_financialsDailySnapshot?: Resolver<Maybe<ResolversTypes['Arbitrum_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_financialsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_financialsDailySnapshots?: Resolver<Array<ResolversTypes['Arbitrum_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_financialsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_liquidityPool?: Resolver<Maybe<ResolversTypes['Arbitrum_LiquidityPool']>, ParentType, ContextType, RequireFields<QueryArbitrum_liquidityPoolArgs, 'id' | 'subgraphError'>>;
  Arbitrum_liquidityPools?: Resolver<Array<ResolversTypes['Arbitrum_LiquidityPool']>, ParentType, ContextType, RequireFields<QueryArbitrum_liquidityPoolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_liquidityPoolDailySnapshot?: Resolver<Maybe<ResolversTypes['Arbitrum_LiquidityPoolDailySnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_liquidityPoolDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_liquidityPoolDailySnapshots?: Resolver<Array<ResolversTypes['Arbitrum_LiquidityPoolDailySnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_liquidityPoolDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_liquidityPoolHourlySnapshot?: Resolver<Maybe<ResolversTypes['Arbitrum_LiquidityPoolHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_liquidityPoolHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_liquidityPoolHourlySnapshots?: Resolver<Array<ResolversTypes['Arbitrum_LiquidityPoolHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_liquidityPoolHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_tick?: Resolver<Maybe<ResolversTypes['Arbitrum_Tick']>, ParentType, ContextType, RequireFields<QueryArbitrum_tickArgs, 'id' | 'subgraphError'>>;
  Arbitrum_ticks?: Resolver<Array<ResolversTypes['Arbitrum_Tick']>, ParentType, ContextType, RequireFields<QueryArbitrum_ticksArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_tickDailySnapshot?: Resolver<Maybe<ResolversTypes['Arbitrum_TickDailySnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_tickDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_tickDailySnapshots?: Resolver<Array<ResolversTypes['Arbitrum_TickDailySnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_tickDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_tickHourlySnapshot?: Resolver<Maybe<ResolversTypes['Arbitrum_TickHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_tickHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_tickHourlySnapshots?: Resolver<Array<ResolversTypes['Arbitrum_TickHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_tickHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_account?: Resolver<Maybe<ResolversTypes['Arbitrum_Account']>, ParentType, ContextType, RequireFields<QueryArbitrum_accountArgs, 'id' | 'subgraphError'>>;
  Arbitrum_accounts?: Resolver<Array<ResolversTypes['Arbitrum_Account']>, ParentType, ContextType, RequireFields<QueryArbitrum_accountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_position?: Resolver<Maybe<ResolversTypes['Arbitrum_Position']>, ParentType, ContextType, RequireFields<QueryArbitrum_positionArgs, 'id' | 'subgraphError'>>;
  Arbitrum_positions?: Resolver<Array<ResolversTypes['Arbitrum_Position']>, ParentType, ContextType, RequireFields<QueryArbitrum_positionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_positionSnapshot?: Resolver<Maybe<ResolversTypes['Arbitrum_PositionSnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_positionSnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_positionSnapshots?: Resolver<Array<ResolversTypes['Arbitrum_PositionSnapshot']>, ParentType, ContextType, RequireFields<QueryArbitrum_positionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_deposit?: Resolver<Maybe<ResolversTypes['Arbitrum_Deposit']>, ParentType, ContextType, RequireFields<QueryArbitrum_depositArgs, 'id' | 'subgraphError'>>;
  Arbitrum_deposits?: Resolver<Array<ResolversTypes['Arbitrum_Deposit']>, ParentType, ContextType, RequireFields<QueryArbitrum_depositsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_withdraw?: Resolver<Maybe<ResolversTypes['Arbitrum_Withdraw']>, ParentType, ContextType, RequireFields<QueryArbitrum_withdrawArgs, 'id' | 'subgraphError'>>;
  Arbitrum_withdraws?: Resolver<Array<ResolversTypes['Arbitrum_Withdraw']>, ParentType, ContextType, RequireFields<QueryArbitrum_withdrawsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_swap?: Resolver<Maybe<ResolversTypes['Arbitrum_Swap']>, ParentType, ContextType, RequireFields<QueryArbitrum_swapArgs, 'id' | 'subgraphError'>>;
  Arbitrum_swaps?: Resolver<Array<ResolversTypes['Arbitrum_Swap']>, ParentType, ContextType, RequireFields<QueryArbitrum_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_activeAccount?: Resolver<Maybe<ResolversTypes['Arbitrum_ActiveAccount']>, ParentType, ContextType, RequireFields<QueryArbitrum_activeAccountArgs, 'id' | 'subgraphError'>>;
  Arbitrum_activeAccounts?: Resolver<Array<ResolversTypes['Arbitrum_ActiveAccount']>, ParentType, ContextType, RequireFields<QueryArbitrum_activeAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_liquidityPoolAmount?: Resolver<Maybe<ResolversTypes['Arbitrum__LiquidityPoolAmount']>, ParentType, ContextType, RequireFields<QueryArbitrum_liquidityPoolAmountArgs, 'id' | 'subgraphError'>>;
  Arbitrum_liquidityPoolAmounts?: Resolver<Array<ResolversTypes['Arbitrum__LiquidityPoolAmount']>, ParentType, ContextType, RequireFields<QueryArbitrum_liquidityPoolAmountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_helperStore?: Resolver<Maybe<ResolversTypes['Arbitrum__HelperStore']>, ParentType, ContextType, RequireFields<QueryArbitrum_helperStoreArgs, 'id' | 'subgraphError'>>;
  Arbitrum_helperStores?: Resolver<Array<ResolversTypes['Arbitrum__HelperStore']>, ParentType, ContextType, RequireFields<QueryArbitrum_helperStoresArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_tokenWhitelist?: Resolver<Maybe<ResolversTypes['Arbitrum__TokenWhitelist']>, ParentType, ContextType, RequireFields<QueryArbitrum_tokenWhitelistArgs, 'id' | 'subgraphError'>>;
  Arbitrum_tokenWhitelists?: Resolver<Array<ResolversTypes['Arbitrum__TokenWhitelist']>, ParentType, ContextType, RequireFields<QueryArbitrum_tokenWhitelistsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_tokenWhitelistSymbol?: Resolver<Maybe<ResolversTypes['Arbitrum__TokenWhitelistSymbol']>, ParentType, ContextType, RequireFields<QueryArbitrum_tokenWhitelistSymbolArgs, 'id' | 'subgraphError'>>;
  Arbitrum_tokenWhitelistSymbols?: Resolver<Array<ResolversTypes['Arbitrum__TokenWhitelistSymbol']>, ParentType, ContextType, RequireFields<QueryArbitrum_tokenWhitelistSymbolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_protocol?: Resolver<Maybe<ResolversTypes['Arbitrum_Protocol']>, ParentType, ContextType, RequireFields<QueryArbitrum_protocolArgs, 'id' | 'subgraphError'>>;
  Arbitrum_protocols?: Resolver<Array<ResolversTypes['Arbitrum_Protocol']>, ParentType, ContextType, RequireFields<QueryArbitrum_protocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum__meta?: Resolver<Maybe<ResolversTypes['Arbitrum__Meta_']>, ParentType, ContextType, Partial<QueryArbitrum__metaArgs>>;
  Base_token?: Resolver<Maybe<ResolversTypes['Base_Token']>, ParentType, ContextType, RequireFields<QueryBase_tokenArgs, 'id' | 'subgraphError'>>;
  Base_tokens?: Resolver<Array<ResolversTypes['Base_Token']>, ParentType, ContextType, RequireFields<QueryBase_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_rewardToken?: Resolver<Maybe<ResolversTypes['Base_RewardToken']>, ParentType, ContextType, RequireFields<QueryBase_rewardTokenArgs, 'id' | 'subgraphError'>>;
  Base_rewardTokens?: Resolver<Array<ResolversTypes['Base_RewardToken']>, ParentType, ContextType, RequireFields<QueryBase_rewardTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_liquidityPoolFee?: Resolver<Maybe<ResolversTypes['Base_LiquidityPoolFee']>, ParentType, ContextType, RequireFields<QueryBase_liquidityPoolFeeArgs, 'id' | 'subgraphError'>>;
  Base_liquidityPoolFees?: Resolver<Array<ResolversTypes['Base_LiquidityPoolFee']>, ParentType, ContextType, RequireFields<QueryBase_liquidityPoolFeesArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_dexAmmProtocol?: Resolver<Maybe<ResolversTypes['Base_DexAmmProtocol']>, ParentType, ContextType, RequireFields<QueryBase_dexAmmProtocolArgs, 'id' | 'subgraphError'>>;
  Base_dexAmmProtocols?: Resolver<Array<ResolversTypes['Base_DexAmmProtocol']>, ParentType, ContextType, RequireFields<QueryBase_dexAmmProtocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_usageMetricsDailySnapshot?: Resolver<Maybe<ResolversTypes['Base_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryBase_usageMetricsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Base_usageMetricsDailySnapshots?: Resolver<Array<ResolversTypes['Base_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryBase_usageMetricsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_usageMetricsHourlySnapshot?: Resolver<Maybe<ResolversTypes['Base_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryBase_usageMetricsHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Base_usageMetricsHourlySnapshots?: Resolver<Array<ResolversTypes['Base_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryBase_usageMetricsHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_financialsDailySnapshot?: Resolver<Maybe<ResolversTypes['Base_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryBase_financialsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Base_financialsDailySnapshots?: Resolver<Array<ResolversTypes['Base_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryBase_financialsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_liquidityPool?: Resolver<Maybe<ResolversTypes['Base_LiquidityPool']>, ParentType, ContextType, RequireFields<QueryBase_liquidityPoolArgs, 'id' | 'subgraphError'>>;
  Base_liquidityPools?: Resolver<Array<ResolversTypes['Base_LiquidityPool']>, ParentType, ContextType, RequireFields<QueryBase_liquidityPoolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_liquidityPoolDailySnapshot?: Resolver<Maybe<ResolversTypes['Base_LiquidityPoolDailySnapshot']>, ParentType, ContextType, RequireFields<QueryBase_liquidityPoolDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Base_liquidityPoolDailySnapshots?: Resolver<Array<ResolversTypes['Base_LiquidityPoolDailySnapshot']>, ParentType, ContextType, RequireFields<QueryBase_liquidityPoolDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_liquidityPoolHourlySnapshot?: Resolver<Maybe<ResolversTypes['Base_LiquidityPoolHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryBase_liquidityPoolHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Base_liquidityPoolHourlySnapshots?: Resolver<Array<ResolversTypes['Base_LiquidityPoolHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryBase_liquidityPoolHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_tick?: Resolver<Maybe<ResolversTypes['Base_Tick']>, ParentType, ContextType, RequireFields<QueryBase_tickArgs, 'id' | 'subgraphError'>>;
  Base_ticks?: Resolver<Array<ResolversTypes['Base_Tick']>, ParentType, ContextType, RequireFields<QueryBase_ticksArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_tickDailySnapshot?: Resolver<Maybe<ResolversTypes['Base_TickDailySnapshot']>, ParentType, ContextType, RequireFields<QueryBase_tickDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Base_tickDailySnapshots?: Resolver<Array<ResolversTypes['Base_TickDailySnapshot']>, ParentType, ContextType, RequireFields<QueryBase_tickDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_tickHourlySnapshot?: Resolver<Maybe<ResolversTypes['Base_TickHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryBase_tickHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Base_tickHourlySnapshots?: Resolver<Array<ResolversTypes['Base_TickHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryBase_tickHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_account?: Resolver<Maybe<ResolversTypes['Base_Account']>, ParentType, ContextType, RequireFields<QueryBase_accountArgs, 'id' | 'subgraphError'>>;
  Base_accounts?: Resolver<Array<ResolversTypes['Base_Account']>, ParentType, ContextType, RequireFields<QueryBase_accountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_position?: Resolver<Maybe<ResolversTypes['Base_Position']>, ParentType, ContextType, RequireFields<QueryBase_positionArgs, 'id' | 'subgraphError'>>;
  Base_positions?: Resolver<Array<ResolversTypes['Base_Position']>, ParentType, ContextType, RequireFields<QueryBase_positionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_positionSnapshot?: Resolver<Maybe<ResolversTypes['Base_PositionSnapshot']>, ParentType, ContextType, RequireFields<QueryBase_positionSnapshotArgs, 'id' | 'subgraphError'>>;
  Base_positionSnapshots?: Resolver<Array<ResolversTypes['Base_PositionSnapshot']>, ParentType, ContextType, RequireFields<QueryBase_positionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_deposit?: Resolver<Maybe<ResolversTypes['Base_Deposit']>, ParentType, ContextType, RequireFields<QueryBase_depositArgs, 'id' | 'subgraphError'>>;
  Base_deposits?: Resolver<Array<ResolversTypes['Base_Deposit']>, ParentType, ContextType, RequireFields<QueryBase_depositsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_withdraw?: Resolver<Maybe<ResolversTypes['Base_Withdraw']>, ParentType, ContextType, RequireFields<QueryBase_withdrawArgs, 'id' | 'subgraphError'>>;
  Base_withdraws?: Resolver<Array<ResolversTypes['Base_Withdraw']>, ParentType, ContextType, RequireFields<QueryBase_withdrawsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_swap?: Resolver<Maybe<ResolversTypes['Base_Swap']>, ParentType, ContextType, RequireFields<QueryBase_swapArgs, 'id' | 'subgraphError'>>;
  Base_swaps?: Resolver<Array<ResolversTypes['Base_Swap']>, ParentType, ContextType, RequireFields<QueryBase_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_activeAccount?: Resolver<Maybe<ResolversTypes['Base_ActiveAccount']>, ParentType, ContextType, RequireFields<QueryBase_activeAccountArgs, 'id' | 'subgraphError'>>;
  Base_activeAccounts?: Resolver<Array<ResolversTypes['Base_ActiveAccount']>, ParentType, ContextType, RequireFields<QueryBase_activeAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_liquidityPoolAmount?: Resolver<Maybe<ResolversTypes['Base__LiquidityPoolAmount']>, ParentType, ContextType, RequireFields<QueryBase_liquidityPoolAmountArgs, 'id' | 'subgraphError'>>;
  Base_liquidityPoolAmounts?: Resolver<Array<ResolversTypes['Base__LiquidityPoolAmount']>, ParentType, ContextType, RequireFields<QueryBase_liquidityPoolAmountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_helperStore?: Resolver<Maybe<ResolversTypes['Base__HelperStore']>, ParentType, ContextType, RequireFields<QueryBase_helperStoreArgs, 'id' | 'subgraphError'>>;
  Base_helperStores?: Resolver<Array<ResolversTypes['Base__HelperStore']>, ParentType, ContextType, RequireFields<QueryBase_helperStoresArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_tokenWhitelist?: Resolver<Maybe<ResolversTypes['Base__TokenWhitelist']>, ParentType, ContextType, RequireFields<QueryBase_tokenWhitelistArgs, 'id' | 'subgraphError'>>;
  Base_tokenWhitelists?: Resolver<Array<ResolversTypes['Base__TokenWhitelist']>, ParentType, ContextType, RequireFields<QueryBase_tokenWhitelistsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_tokenWhitelistSymbol?: Resolver<Maybe<ResolversTypes['Base__TokenWhitelistSymbol']>, ParentType, ContextType, RequireFields<QueryBase_tokenWhitelistSymbolArgs, 'id' | 'subgraphError'>>;
  Base_tokenWhitelistSymbols?: Resolver<Array<ResolversTypes['Base__TokenWhitelistSymbol']>, ParentType, ContextType, RequireFields<QueryBase_tokenWhitelistSymbolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_protocol?: Resolver<Maybe<ResolversTypes['Base_Protocol']>, ParentType, ContextType, RequireFields<QueryBase_protocolArgs, 'id' | 'subgraphError'>>;
  Base_protocols?: Resolver<Array<ResolversTypes['Base_Protocol']>, ParentType, ContextType, RequireFields<QueryBase_protocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base__meta?: Resolver<Maybe<ResolversTypes['Base__Meta_']>, ParentType, ContextType, Partial<QueryBase__metaArgs>>;
  uniswapV3Ethereum?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  uniswapV3Optimism?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  uniswapV3Arbitrum?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  uniswapV3Base?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
}>;

export type SubscriptionResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']> = ResolversObject<{
  Ethereum_token?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_Token']>, "Ethereum_token", ParentType, ContextType, RequireFields<SubscriptionEthereum_tokenArgs, 'id' | 'subgraphError'>>;
  Ethereum_tokens?: SubscriptionResolver<Array<ResolversTypes['Ethereum_Token']>, "Ethereum_tokens", ParentType, ContextType, RequireFields<SubscriptionEthereum_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_rewardToken?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_RewardToken']>, "Ethereum_rewardToken", ParentType, ContextType, RequireFields<SubscriptionEthereum_rewardTokenArgs, 'id' | 'subgraphError'>>;
  Ethereum_rewardTokens?: SubscriptionResolver<Array<ResolversTypes['Ethereum_RewardToken']>, "Ethereum_rewardTokens", ParentType, ContextType, RequireFields<SubscriptionEthereum_rewardTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_liquidityPoolFee?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_LiquidityPoolFee']>, "Ethereum_liquidityPoolFee", ParentType, ContextType, RequireFields<SubscriptionEthereum_liquidityPoolFeeArgs, 'id' | 'subgraphError'>>;
  Ethereum_liquidityPoolFees?: SubscriptionResolver<Array<ResolversTypes['Ethereum_LiquidityPoolFee']>, "Ethereum_liquidityPoolFees", ParentType, ContextType, RequireFields<SubscriptionEthereum_liquidityPoolFeesArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_dexAmmProtocol?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_DexAmmProtocol']>, "Ethereum_dexAmmProtocol", ParentType, ContextType, RequireFields<SubscriptionEthereum_dexAmmProtocolArgs, 'id' | 'subgraphError'>>;
  Ethereum_dexAmmProtocols?: SubscriptionResolver<Array<ResolversTypes['Ethereum_DexAmmProtocol']>, "Ethereum_dexAmmProtocols", ParentType, ContextType, RequireFields<SubscriptionEthereum_dexAmmProtocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_usageMetricsDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_UsageMetricsDailySnapshot']>, "Ethereum_usageMetricsDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionEthereum_usageMetricsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_usageMetricsDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Ethereum_UsageMetricsDailySnapshot']>, "Ethereum_usageMetricsDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionEthereum_usageMetricsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_usageMetricsHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_UsageMetricsHourlySnapshot']>, "Ethereum_usageMetricsHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptionEthereum_usageMetricsHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_usageMetricsHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['Ethereum_UsageMetricsHourlySnapshot']>, "Ethereum_usageMetricsHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptionEthereum_usageMetricsHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_financialsDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_FinancialsDailySnapshot']>, "Ethereum_financialsDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionEthereum_financialsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_financialsDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Ethereum_FinancialsDailySnapshot']>, "Ethereum_financialsDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionEthereum_financialsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_liquidityPool?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_LiquidityPool']>, "Ethereum_liquidityPool", ParentType, ContextType, RequireFields<SubscriptionEthereum_liquidityPoolArgs, 'id' | 'subgraphError'>>;
  Ethereum_liquidityPools?: SubscriptionResolver<Array<ResolversTypes['Ethereum_LiquidityPool']>, "Ethereum_liquidityPools", ParentType, ContextType, RequireFields<SubscriptionEthereum_liquidityPoolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_liquidityPoolDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_LiquidityPoolDailySnapshot']>, "Ethereum_liquidityPoolDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionEthereum_liquidityPoolDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_liquidityPoolDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Ethereum_LiquidityPoolDailySnapshot']>, "Ethereum_liquidityPoolDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionEthereum_liquidityPoolDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_liquidityPoolHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_LiquidityPoolHourlySnapshot']>, "Ethereum_liquidityPoolHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptionEthereum_liquidityPoolHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_liquidityPoolHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['Ethereum_LiquidityPoolHourlySnapshot']>, "Ethereum_liquidityPoolHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptionEthereum_liquidityPoolHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_tick?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_Tick']>, "Ethereum_tick", ParentType, ContextType, RequireFields<SubscriptionEthereum_tickArgs, 'id' | 'subgraphError'>>;
  Ethereum_ticks?: SubscriptionResolver<Array<ResolversTypes['Ethereum_Tick']>, "Ethereum_ticks", ParentType, ContextType, RequireFields<SubscriptionEthereum_ticksArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_tickDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_TickDailySnapshot']>, "Ethereum_tickDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionEthereum_tickDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_tickDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Ethereum_TickDailySnapshot']>, "Ethereum_tickDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionEthereum_tickDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_tickHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_TickHourlySnapshot']>, "Ethereum_tickHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptionEthereum_tickHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_tickHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['Ethereum_TickHourlySnapshot']>, "Ethereum_tickHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptionEthereum_tickHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_account?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_Account']>, "Ethereum_account", ParentType, ContextType, RequireFields<SubscriptionEthereum_accountArgs, 'id' | 'subgraphError'>>;
  Ethereum_accounts?: SubscriptionResolver<Array<ResolversTypes['Ethereum_Account']>, "Ethereum_accounts", ParentType, ContextType, RequireFields<SubscriptionEthereum_accountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_position?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_Position']>, "Ethereum_position", ParentType, ContextType, RequireFields<SubscriptionEthereum_positionArgs, 'id' | 'subgraphError'>>;
  Ethereum_positions?: SubscriptionResolver<Array<ResolversTypes['Ethereum_Position']>, "Ethereum_positions", ParentType, ContextType, RequireFields<SubscriptionEthereum_positionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_positionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_PositionSnapshot']>, "Ethereum_positionSnapshot", ParentType, ContextType, RequireFields<SubscriptionEthereum_positionSnapshotArgs, 'id' | 'subgraphError'>>;
  Ethereum_positionSnapshots?: SubscriptionResolver<Array<ResolversTypes['Ethereum_PositionSnapshot']>, "Ethereum_positionSnapshots", ParentType, ContextType, RequireFields<SubscriptionEthereum_positionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_deposit?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_Deposit']>, "Ethereum_deposit", ParentType, ContextType, RequireFields<SubscriptionEthereum_depositArgs, 'id' | 'subgraphError'>>;
  Ethereum_deposits?: SubscriptionResolver<Array<ResolversTypes['Ethereum_Deposit']>, "Ethereum_deposits", ParentType, ContextType, RequireFields<SubscriptionEthereum_depositsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_withdraw?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_Withdraw']>, "Ethereum_withdraw", ParentType, ContextType, RequireFields<SubscriptionEthereum_withdrawArgs, 'id' | 'subgraphError'>>;
  Ethereum_withdraws?: SubscriptionResolver<Array<ResolversTypes['Ethereum_Withdraw']>, "Ethereum_withdraws", ParentType, ContextType, RequireFields<SubscriptionEthereum_withdrawsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_swap?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_Swap']>, "Ethereum_swap", ParentType, ContextType, RequireFields<SubscriptionEthereum_swapArgs, 'id' | 'subgraphError'>>;
  Ethereum_swaps?: SubscriptionResolver<Array<ResolversTypes['Ethereum_Swap']>, "Ethereum_swaps", ParentType, ContextType, RequireFields<SubscriptionEthereum_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_activeAccount?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_ActiveAccount']>, "Ethereum_activeAccount", ParentType, ContextType, RequireFields<SubscriptionEthereum_activeAccountArgs, 'id' | 'subgraphError'>>;
  Ethereum_activeAccounts?: SubscriptionResolver<Array<ResolversTypes['Ethereum_ActiveAccount']>, "Ethereum_activeAccounts", ParentType, ContextType, RequireFields<SubscriptionEthereum_activeAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_liquidityPoolAmount?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum__LiquidityPoolAmount']>, "Ethereum_liquidityPoolAmount", ParentType, ContextType, RequireFields<SubscriptionEthereum_liquidityPoolAmountArgs, 'id' | 'subgraphError'>>;
  Ethereum_liquidityPoolAmounts?: SubscriptionResolver<Array<ResolversTypes['Ethereum__LiquidityPoolAmount']>, "Ethereum_liquidityPoolAmounts", ParentType, ContextType, RequireFields<SubscriptionEthereum_liquidityPoolAmountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_helperStore?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum__HelperStore']>, "Ethereum_helperStore", ParentType, ContextType, RequireFields<SubscriptionEthereum_helperStoreArgs, 'id' | 'subgraphError'>>;
  Ethereum_helperStores?: SubscriptionResolver<Array<ResolversTypes['Ethereum__HelperStore']>, "Ethereum_helperStores", ParentType, ContextType, RequireFields<SubscriptionEthereum_helperStoresArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_tokenWhitelist?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum__TokenWhitelist']>, "Ethereum_tokenWhitelist", ParentType, ContextType, RequireFields<SubscriptionEthereum_tokenWhitelistArgs, 'id' | 'subgraphError'>>;
  Ethereum_tokenWhitelists?: SubscriptionResolver<Array<ResolversTypes['Ethereum__TokenWhitelist']>, "Ethereum_tokenWhitelists", ParentType, ContextType, RequireFields<SubscriptionEthereum_tokenWhitelistsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_tokenWhitelistSymbol?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum__TokenWhitelistSymbol']>, "Ethereum_tokenWhitelistSymbol", ParentType, ContextType, RequireFields<SubscriptionEthereum_tokenWhitelistSymbolArgs, 'id' | 'subgraphError'>>;
  Ethereum_tokenWhitelistSymbols?: SubscriptionResolver<Array<ResolversTypes['Ethereum__TokenWhitelistSymbol']>, "Ethereum_tokenWhitelistSymbols", ParentType, ContextType, RequireFields<SubscriptionEthereum_tokenWhitelistSymbolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum_protocol?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum_Protocol']>, "Ethereum_protocol", ParentType, ContextType, RequireFields<SubscriptionEthereum_protocolArgs, 'id' | 'subgraphError'>>;
  Ethereum_protocols?: SubscriptionResolver<Array<ResolversTypes['Ethereum_Protocol']>, "Ethereum_protocols", ParentType, ContextType, RequireFields<SubscriptionEthereum_protocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Ethereum__meta?: SubscriptionResolver<Maybe<ResolversTypes['Ethereum__Meta_']>, "Ethereum__meta", ParentType, ContextType, Partial<SubscriptionEthereum__metaArgs>>;
  Optimism_token?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_Token']>, "Optimism_token", ParentType, ContextType, RequireFields<SubscriptionOptimism_tokenArgs, 'id' | 'subgraphError'>>;
  Optimism_tokens?: SubscriptionResolver<Array<ResolversTypes['Optimism_Token']>, "Optimism_tokens", ParentType, ContextType, RequireFields<SubscriptionOptimism_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_rewardToken?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_RewardToken']>, "Optimism_rewardToken", ParentType, ContextType, RequireFields<SubscriptionOptimism_rewardTokenArgs, 'id' | 'subgraphError'>>;
  Optimism_rewardTokens?: SubscriptionResolver<Array<ResolversTypes['Optimism_RewardToken']>, "Optimism_rewardTokens", ParentType, ContextType, RequireFields<SubscriptionOptimism_rewardTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_liquidityPoolFee?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_LiquidityPoolFee']>, "Optimism_liquidityPoolFee", ParentType, ContextType, RequireFields<SubscriptionOptimism_liquidityPoolFeeArgs, 'id' | 'subgraphError'>>;
  Optimism_liquidityPoolFees?: SubscriptionResolver<Array<ResolversTypes['Optimism_LiquidityPoolFee']>, "Optimism_liquidityPoolFees", ParentType, ContextType, RequireFields<SubscriptionOptimism_liquidityPoolFeesArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_dexAmmProtocol?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_DexAmmProtocol']>, "Optimism_dexAmmProtocol", ParentType, ContextType, RequireFields<SubscriptionOptimism_dexAmmProtocolArgs, 'id' | 'subgraphError'>>;
  Optimism_dexAmmProtocols?: SubscriptionResolver<Array<ResolversTypes['Optimism_DexAmmProtocol']>, "Optimism_dexAmmProtocols", ParentType, ContextType, RequireFields<SubscriptionOptimism_dexAmmProtocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_usageMetricsDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_UsageMetricsDailySnapshot']>, "Optimism_usageMetricsDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionOptimism_usageMetricsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_usageMetricsDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Optimism_UsageMetricsDailySnapshot']>, "Optimism_usageMetricsDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionOptimism_usageMetricsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_usageMetricsHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_UsageMetricsHourlySnapshot']>, "Optimism_usageMetricsHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptionOptimism_usageMetricsHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_usageMetricsHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['Optimism_UsageMetricsHourlySnapshot']>, "Optimism_usageMetricsHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptionOptimism_usageMetricsHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_financialsDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_FinancialsDailySnapshot']>, "Optimism_financialsDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionOptimism_financialsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_financialsDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Optimism_FinancialsDailySnapshot']>, "Optimism_financialsDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionOptimism_financialsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_liquidityPool?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_LiquidityPool']>, "Optimism_liquidityPool", ParentType, ContextType, RequireFields<SubscriptionOptimism_liquidityPoolArgs, 'id' | 'subgraphError'>>;
  Optimism_liquidityPools?: SubscriptionResolver<Array<ResolversTypes['Optimism_LiquidityPool']>, "Optimism_liquidityPools", ParentType, ContextType, RequireFields<SubscriptionOptimism_liquidityPoolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_liquidityPoolDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_LiquidityPoolDailySnapshot']>, "Optimism_liquidityPoolDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionOptimism_liquidityPoolDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_liquidityPoolDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Optimism_LiquidityPoolDailySnapshot']>, "Optimism_liquidityPoolDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionOptimism_liquidityPoolDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_liquidityPoolHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_LiquidityPoolHourlySnapshot']>, "Optimism_liquidityPoolHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptionOptimism_liquidityPoolHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_liquidityPoolHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['Optimism_LiquidityPoolHourlySnapshot']>, "Optimism_liquidityPoolHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptionOptimism_liquidityPoolHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_tick?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_Tick']>, "Optimism_tick", ParentType, ContextType, RequireFields<SubscriptionOptimism_tickArgs, 'id' | 'subgraphError'>>;
  Optimism_ticks?: SubscriptionResolver<Array<ResolversTypes['Optimism_Tick']>, "Optimism_ticks", ParentType, ContextType, RequireFields<SubscriptionOptimism_ticksArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_tickDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_TickDailySnapshot']>, "Optimism_tickDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionOptimism_tickDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_tickDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Optimism_TickDailySnapshot']>, "Optimism_tickDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionOptimism_tickDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_tickHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_TickHourlySnapshot']>, "Optimism_tickHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptionOptimism_tickHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_tickHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['Optimism_TickHourlySnapshot']>, "Optimism_tickHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptionOptimism_tickHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_account?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_Account']>, "Optimism_account", ParentType, ContextType, RequireFields<SubscriptionOptimism_accountArgs, 'id' | 'subgraphError'>>;
  Optimism_accounts?: SubscriptionResolver<Array<ResolversTypes['Optimism_Account']>, "Optimism_accounts", ParentType, ContextType, RequireFields<SubscriptionOptimism_accountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_position?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_Position']>, "Optimism_position", ParentType, ContextType, RequireFields<SubscriptionOptimism_positionArgs, 'id' | 'subgraphError'>>;
  Optimism_positions?: SubscriptionResolver<Array<ResolversTypes['Optimism_Position']>, "Optimism_positions", ParentType, ContextType, RequireFields<SubscriptionOptimism_positionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_positionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_PositionSnapshot']>, "Optimism_positionSnapshot", ParentType, ContextType, RequireFields<SubscriptionOptimism_positionSnapshotArgs, 'id' | 'subgraphError'>>;
  Optimism_positionSnapshots?: SubscriptionResolver<Array<ResolversTypes['Optimism_PositionSnapshot']>, "Optimism_positionSnapshots", ParentType, ContextType, RequireFields<SubscriptionOptimism_positionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_deposit?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_Deposit']>, "Optimism_deposit", ParentType, ContextType, RequireFields<SubscriptionOptimism_depositArgs, 'id' | 'subgraphError'>>;
  Optimism_deposits?: SubscriptionResolver<Array<ResolversTypes['Optimism_Deposit']>, "Optimism_deposits", ParentType, ContextType, RequireFields<SubscriptionOptimism_depositsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_withdraw?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_Withdraw']>, "Optimism_withdraw", ParentType, ContextType, RequireFields<SubscriptionOptimism_withdrawArgs, 'id' | 'subgraphError'>>;
  Optimism_withdraws?: SubscriptionResolver<Array<ResolversTypes['Optimism_Withdraw']>, "Optimism_withdraws", ParentType, ContextType, RequireFields<SubscriptionOptimism_withdrawsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_swap?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_Swap']>, "Optimism_swap", ParentType, ContextType, RequireFields<SubscriptionOptimism_swapArgs, 'id' | 'subgraphError'>>;
  Optimism_swaps?: SubscriptionResolver<Array<ResolversTypes['Optimism_Swap']>, "Optimism_swaps", ParentType, ContextType, RequireFields<SubscriptionOptimism_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_activeAccount?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_ActiveAccount']>, "Optimism_activeAccount", ParentType, ContextType, RequireFields<SubscriptionOptimism_activeAccountArgs, 'id' | 'subgraphError'>>;
  Optimism_activeAccounts?: SubscriptionResolver<Array<ResolversTypes['Optimism_ActiveAccount']>, "Optimism_activeAccounts", ParentType, ContextType, RequireFields<SubscriptionOptimism_activeAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_liquidityPoolAmount?: SubscriptionResolver<Maybe<ResolversTypes['Optimism__LiquidityPoolAmount']>, "Optimism_liquidityPoolAmount", ParentType, ContextType, RequireFields<SubscriptionOptimism_liquidityPoolAmountArgs, 'id' | 'subgraphError'>>;
  Optimism_liquidityPoolAmounts?: SubscriptionResolver<Array<ResolversTypes['Optimism__LiquidityPoolAmount']>, "Optimism_liquidityPoolAmounts", ParentType, ContextType, RequireFields<SubscriptionOptimism_liquidityPoolAmountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_helperStore?: SubscriptionResolver<Maybe<ResolversTypes['Optimism__HelperStore']>, "Optimism_helperStore", ParentType, ContextType, RequireFields<SubscriptionOptimism_helperStoreArgs, 'id' | 'subgraphError'>>;
  Optimism_helperStores?: SubscriptionResolver<Array<ResolversTypes['Optimism__HelperStore']>, "Optimism_helperStores", ParentType, ContextType, RequireFields<SubscriptionOptimism_helperStoresArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_tokenWhitelist?: SubscriptionResolver<Maybe<ResolversTypes['Optimism__TokenWhitelist']>, "Optimism_tokenWhitelist", ParentType, ContextType, RequireFields<SubscriptionOptimism_tokenWhitelistArgs, 'id' | 'subgraphError'>>;
  Optimism_tokenWhitelists?: SubscriptionResolver<Array<ResolversTypes['Optimism__TokenWhitelist']>, "Optimism_tokenWhitelists", ParentType, ContextType, RequireFields<SubscriptionOptimism_tokenWhitelistsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_tokenWhitelistSymbol?: SubscriptionResolver<Maybe<ResolversTypes['Optimism__TokenWhitelistSymbol']>, "Optimism_tokenWhitelistSymbol", ParentType, ContextType, RequireFields<SubscriptionOptimism_tokenWhitelistSymbolArgs, 'id' | 'subgraphError'>>;
  Optimism_tokenWhitelistSymbols?: SubscriptionResolver<Array<ResolversTypes['Optimism__TokenWhitelistSymbol']>, "Optimism_tokenWhitelistSymbols", ParentType, ContextType, RequireFields<SubscriptionOptimism_tokenWhitelistSymbolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism_protocol?: SubscriptionResolver<Maybe<ResolversTypes['Optimism_Protocol']>, "Optimism_protocol", ParentType, ContextType, RequireFields<SubscriptionOptimism_protocolArgs, 'id' | 'subgraphError'>>;
  Optimism_protocols?: SubscriptionResolver<Array<ResolversTypes['Optimism_Protocol']>, "Optimism_protocols", ParentType, ContextType, RequireFields<SubscriptionOptimism_protocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Optimism__meta?: SubscriptionResolver<Maybe<ResolversTypes['Optimism__Meta_']>, "Optimism__meta", ParentType, ContextType, Partial<SubscriptionOptimism__metaArgs>>;
  Arbitrum_token?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_Token']>, "Arbitrum_token", ParentType, ContextType, RequireFields<SubscriptionArbitrum_tokenArgs, 'id' | 'subgraphError'>>;
  Arbitrum_tokens?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_Token']>, "Arbitrum_tokens", ParentType, ContextType, RequireFields<SubscriptionArbitrum_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_rewardToken?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_RewardToken']>, "Arbitrum_rewardToken", ParentType, ContextType, RequireFields<SubscriptionArbitrum_rewardTokenArgs, 'id' | 'subgraphError'>>;
  Arbitrum_rewardTokens?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_RewardToken']>, "Arbitrum_rewardTokens", ParentType, ContextType, RequireFields<SubscriptionArbitrum_rewardTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_liquidityPoolFee?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_LiquidityPoolFee']>, "Arbitrum_liquidityPoolFee", ParentType, ContextType, RequireFields<SubscriptionArbitrum_liquidityPoolFeeArgs, 'id' | 'subgraphError'>>;
  Arbitrum_liquidityPoolFees?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_LiquidityPoolFee']>, "Arbitrum_liquidityPoolFees", ParentType, ContextType, RequireFields<SubscriptionArbitrum_liquidityPoolFeesArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_dexAmmProtocol?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_DexAmmProtocol']>, "Arbitrum_dexAmmProtocol", ParentType, ContextType, RequireFields<SubscriptionArbitrum_dexAmmProtocolArgs, 'id' | 'subgraphError'>>;
  Arbitrum_dexAmmProtocols?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_DexAmmProtocol']>, "Arbitrum_dexAmmProtocols", ParentType, ContextType, RequireFields<SubscriptionArbitrum_dexAmmProtocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_usageMetricsDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_UsageMetricsDailySnapshot']>, "Arbitrum_usageMetricsDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionArbitrum_usageMetricsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_usageMetricsDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_UsageMetricsDailySnapshot']>, "Arbitrum_usageMetricsDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionArbitrum_usageMetricsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_usageMetricsHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_UsageMetricsHourlySnapshot']>, "Arbitrum_usageMetricsHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptionArbitrum_usageMetricsHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_usageMetricsHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_UsageMetricsHourlySnapshot']>, "Arbitrum_usageMetricsHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptionArbitrum_usageMetricsHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_financialsDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_FinancialsDailySnapshot']>, "Arbitrum_financialsDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionArbitrum_financialsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_financialsDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_FinancialsDailySnapshot']>, "Arbitrum_financialsDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionArbitrum_financialsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_liquidityPool?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_LiquidityPool']>, "Arbitrum_liquidityPool", ParentType, ContextType, RequireFields<SubscriptionArbitrum_liquidityPoolArgs, 'id' | 'subgraphError'>>;
  Arbitrum_liquidityPools?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_LiquidityPool']>, "Arbitrum_liquidityPools", ParentType, ContextType, RequireFields<SubscriptionArbitrum_liquidityPoolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_liquidityPoolDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_LiquidityPoolDailySnapshot']>, "Arbitrum_liquidityPoolDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionArbitrum_liquidityPoolDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_liquidityPoolDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_LiquidityPoolDailySnapshot']>, "Arbitrum_liquidityPoolDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionArbitrum_liquidityPoolDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_liquidityPoolHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_LiquidityPoolHourlySnapshot']>, "Arbitrum_liquidityPoolHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptionArbitrum_liquidityPoolHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_liquidityPoolHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_LiquidityPoolHourlySnapshot']>, "Arbitrum_liquidityPoolHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptionArbitrum_liquidityPoolHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_tick?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_Tick']>, "Arbitrum_tick", ParentType, ContextType, RequireFields<SubscriptionArbitrum_tickArgs, 'id' | 'subgraphError'>>;
  Arbitrum_ticks?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_Tick']>, "Arbitrum_ticks", ParentType, ContextType, RequireFields<SubscriptionArbitrum_ticksArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_tickDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_TickDailySnapshot']>, "Arbitrum_tickDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionArbitrum_tickDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_tickDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_TickDailySnapshot']>, "Arbitrum_tickDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionArbitrum_tickDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_tickHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_TickHourlySnapshot']>, "Arbitrum_tickHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptionArbitrum_tickHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_tickHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_TickHourlySnapshot']>, "Arbitrum_tickHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptionArbitrum_tickHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_account?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_Account']>, "Arbitrum_account", ParentType, ContextType, RequireFields<SubscriptionArbitrum_accountArgs, 'id' | 'subgraphError'>>;
  Arbitrum_accounts?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_Account']>, "Arbitrum_accounts", ParentType, ContextType, RequireFields<SubscriptionArbitrum_accountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_position?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_Position']>, "Arbitrum_position", ParentType, ContextType, RequireFields<SubscriptionArbitrum_positionArgs, 'id' | 'subgraphError'>>;
  Arbitrum_positions?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_Position']>, "Arbitrum_positions", ParentType, ContextType, RequireFields<SubscriptionArbitrum_positionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_positionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_PositionSnapshot']>, "Arbitrum_positionSnapshot", ParentType, ContextType, RequireFields<SubscriptionArbitrum_positionSnapshotArgs, 'id' | 'subgraphError'>>;
  Arbitrum_positionSnapshots?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_PositionSnapshot']>, "Arbitrum_positionSnapshots", ParentType, ContextType, RequireFields<SubscriptionArbitrum_positionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_deposit?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_Deposit']>, "Arbitrum_deposit", ParentType, ContextType, RequireFields<SubscriptionArbitrum_depositArgs, 'id' | 'subgraphError'>>;
  Arbitrum_deposits?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_Deposit']>, "Arbitrum_deposits", ParentType, ContextType, RequireFields<SubscriptionArbitrum_depositsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_withdraw?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_Withdraw']>, "Arbitrum_withdraw", ParentType, ContextType, RequireFields<SubscriptionArbitrum_withdrawArgs, 'id' | 'subgraphError'>>;
  Arbitrum_withdraws?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_Withdraw']>, "Arbitrum_withdraws", ParentType, ContextType, RequireFields<SubscriptionArbitrum_withdrawsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_swap?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_Swap']>, "Arbitrum_swap", ParentType, ContextType, RequireFields<SubscriptionArbitrum_swapArgs, 'id' | 'subgraphError'>>;
  Arbitrum_swaps?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_Swap']>, "Arbitrum_swaps", ParentType, ContextType, RequireFields<SubscriptionArbitrum_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_activeAccount?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_ActiveAccount']>, "Arbitrum_activeAccount", ParentType, ContextType, RequireFields<SubscriptionArbitrum_activeAccountArgs, 'id' | 'subgraphError'>>;
  Arbitrum_activeAccounts?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_ActiveAccount']>, "Arbitrum_activeAccounts", ParentType, ContextType, RequireFields<SubscriptionArbitrum_activeAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_liquidityPoolAmount?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum__LiquidityPoolAmount']>, "Arbitrum_liquidityPoolAmount", ParentType, ContextType, RequireFields<SubscriptionArbitrum_liquidityPoolAmountArgs, 'id' | 'subgraphError'>>;
  Arbitrum_liquidityPoolAmounts?: SubscriptionResolver<Array<ResolversTypes['Arbitrum__LiquidityPoolAmount']>, "Arbitrum_liquidityPoolAmounts", ParentType, ContextType, RequireFields<SubscriptionArbitrum_liquidityPoolAmountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_helperStore?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum__HelperStore']>, "Arbitrum_helperStore", ParentType, ContextType, RequireFields<SubscriptionArbitrum_helperStoreArgs, 'id' | 'subgraphError'>>;
  Arbitrum_helperStores?: SubscriptionResolver<Array<ResolversTypes['Arbitrum__HelperStore']>, "Arbitrum_helperStores", ParentType, ContextType, RequireFields<SubscriptionArbitrum_helperStoresArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_tokenWhitelist?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum__TokenWhitelist']>, "Arbitrum_tokenWhitelist", ParentType, ContextType, RequireFields<SubscriptionArbitrum_tokenWhitelistArgs, 'id' | 'subgraphError'>>;
  Arbitrum_tokenWhitelists?: SubscriptionResolver<Array<ResolversTypes['Arbitrum__TokenWhitelist']>, "Arbitrum_tokenWhitelists", ParentType, ContextType, RequireFields<SubscriptionArbitrum_tokenWhitelistsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_tokenWhitelistSymbol?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum__TokenWhitelistSymbol']>, "Arbitrum_tokenWhitelistSymbol", ParentType, ContextType, RequireFields<SubscriptionArbitrum_tokenWhitelistSymbolArgs, 'id' | 'subgraphError'>>;
  Arbitrum_tokenWhitelistSymbols?: SubscriptionResolver<Array<ResolversTypes['Arbitrum__TokenWhitelistSymbol']>, "Arbitrum_tokenWhitelistSymbols", ParentType, ContextType, RequireFields<SubscriptionArbitrum_tokenWhitelistSymbolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum_protocol?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum_Protocol']>, "Arbitrum_protocol", ParentType, ContextType, RequireFields<SubscriptionArbitrum_protocolArgs, 'id' | 'subgraphError'>>;
  Arbitrum_protocols?: SubscriptionResolver<Array<ResolversTypes['Arbitrum_Protocol']>, "Arbitrum_protocols", ParentType, ContextType, RequireFields<SubscriptionArbitrum_protocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Arbitrum__meta?: SubscriptionResolver<Maybe<ResolversTypes['Arbitrum__Meta_']>, "Arbitrum__meta", ParentType, ContextType, Partial<SubscriptionArbitrum__metaArgs>>;
  Base_token?: SubscriptionResolver<Maybe<ResolversTypes['Base_Token']>, "Base_token", ParentType, ContextType, RequireFields<SubscriptionBase_tokenArgs, 'id' | 'subgraphError'>>;
  Base_tokens?: SubscriptionResolver<Array<ResolversTypes['Base_Token']>, "Base_tokens", ParentType, ContextType, RequireFields<SubscriptionBase_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_rewardToken?: SubscriptionResolver<Maybe<ResolversTypes['Base_RewardToken']>, "Base_rewardToken", ParentType, ContextType, RequireFields<SubscriptionBase_rewardTokenArgs, 'id' | 'subgraphError'>>;
  Base_rewardTokens?: SubscriptionResolver<Array<ResolversTypes['Base_RewardToken']>, "Base_rewardTokens", ParentType, ContextType, RequireFields<SubscriptionBase_rewardTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_liquidityPoolFee?: SubscriptionResolver<Maybe<ResolversTypes['Base_LiquidityPoolFee']>, "Base_liquidityPoolFee", ParentType, ContextType, RequireFields<SubscriptionBase_liquidityPoolFeeArgs, 'id' | 'subgraphError'>>;
  Base_liquidityPoolFees?: SubscriptionResolver<Array<ResolversTypes['Base_LiquidityPoolFee']>, "Base_liquidityPoolFees", ParentType, ContextType, RequireFields<SubscriptionBase_liquidityPoolFeesArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_dexAmmProtocol?: SubscriptionResolver<Maybe<ResolversTypes['Base_DexAmmProtocol']>, "Base_dexAmmProtocol", ParentType, ContextType, RequireFields<SubscriptionBase_dexAmmProtocolArgs, 'id' | 'subgraphError'>>;
  Base_dexAmmProtocols?: SubscriptionResolver<Array<ResolversTypes['Base_DexAmmProtocol']>, "Base_dexAmmProtocols", ParentType, ContextType, RequireFields<SubscriptionBase_dexAmmProtocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_usageMetricsDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Base_UsageMetricsDailySnapshot']>, "Base_usageMetricsDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionBase_usageMetricsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Base_usageMetricsDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Base_UsageMetricsDailySnapshot']>, "Base_usageMetricsDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionBase_usageMetricsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_usageMetricsHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Base_UsageMetricsHourlySnapshot']>, "Base_usageMetricsHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptionBase_usageMetricsHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Base_usageMetricsHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['Base_UsageMetricsHourlySnapshot']>, "Base_usageMetricsHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptionBase_usageMetricsHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_financialsDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Base_FinancialsDailySnapshot']>, "Base_financialsDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionBase_financialsDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Base_financialsDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Base_FinancialsDailySnapshot']>, "Base_financialsDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionBase_financialsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_liquidityPool?: SubscriptionResolver<Maybe<ResolversTypes['Base_LiquidityPool']>, "Base_liquidityPool", ParentType, ContextType, RequireFields<SubscriptionBase_liquidityPoolArgs, 'id' | 'subgraphError'>>;
  Base_liquidityPools?: SubscriptionResolver<Array<ResolversTypes['Base_LiquidityPool']>, "Base_liquidityPools", ParentType, ContextType, RequireFields<SubscriptionBase_liquidityPoolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_liquidityPoolDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Base_LiquidityPoolDailySnapshot']>, "Base_liquidityPoolDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionBase_liquidityPoolDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Base_liquidityPoolDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Base_LiquidityPoolDailySnapshot']>, "Base_liquidityPoolDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionBase_liquidityPoolDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_liquidityPoolHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Base_LiquidityPoolHourlySnapshot']>, "Base_liquidityPoolHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptionBase_liquidityPoolHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Base_liquidityPoolHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['Base_LiquidityPoolHourlySnapshot']>, "Base_liquidityPoolHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptionBase_liquidityPoolHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_tick?: SubscriptionResolver<Maybe<ResolversTypes['Base_Tick']>, "Base_tick", ParentType, ContextType, RequireFields<SubscriptionBase_tickArgs, 'id' | 'subgraphError'>>;
  Base_ticks?: SubscriptionResolver<Array<ResolversTypes['Base_Tick']>, "Base_ticks", ParentType, ContextType, RequireFields<SubscriptionBase_ticksArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_tickDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Base_TickDailySnapshot']>, "Base_tickDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionBase_tickDailySnapshotArgs, 'id' | 'subgraphError'>>;
  Base_tickDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['Base_TickDailySnapshot']>, "Base_tickDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionBase_tickDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_tickHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Base_TickHourlySnapshot']>, "Base_tickHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptionBase_tickHourlySnapshotArgs, 'id' | 'subgraphError'>>;
  Base_tickHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['Base_TickHourlySnapshot']>, "Base_tickHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptionBase_tickHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_account?: SubscriptionResolver<Maybe<ResolversTypes['Base_Account']>, "Base_account", ParentType, ContextType, RequireFields<SubscriptionBase_accountArgs, 'id' | 'subgraphError'>>;
  Base_accounts?: SubscriptionResolver<Array<ResolversTypes['Base_Account']>, "Base_accounts", ParentType, ContextType, RequireFields<SubscriptionBase_accountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_position?: SubscriptionResolver<Maybe<ResolversTypes['Base_Position']>, "Base_position", ParentType, ContextType, RequireFields<SubscriptionBase_positionArgs, 'id' | 'subgraphError'>>;
  Base_positions?: SubscriptionResolver<Array<ResolversTypes['Base_Position']>, "Base_positions", ParentType, ContextType, RequireFields<SubscriptionBase_positionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_positionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Base_PositionSnapshot']>, "Base_positionSnapshot", ParentType, ContextType, RequireFields<SubscriptionBase_positionSnapshotArgs, 'id' | 'subgraphError'>>;
  Base_positionSnapshots?: SubscriptionResolver<Array<ResolversTypes['Base_PositionSnapshot']>, "Base_positionSnapshots", ParentType, ContextType, RequireFields<SubscriptionBase_positionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_deposit?: SubscriptionResolver<Maybe<ResolversTypes['Base_Deposit']>, "Base_deposit", ParentType, ContextType, RequireFields<SubscriptionBase_depositArgs, 'id' | 'subgraphError'>>;
  Base_deposits?: SubscriptionResolver<Array<ResolversTypes['Base_Deposit']>, "Base_deposits", ParentType, ContextType, RequireFields<SubscriptionBase_depositsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_withdraw?: SubscriptionResolver<Maybe<ResolversTypes['Base_Withdraw']>, "Base_withdraw", ParentType, ContextType, RequireFields<SubscriptionBase_withdrawArgs, 'id' | 'subgraphError'>>;
  Base_withdraws?: SubscriptionResolver<Array<ResolversTypes['Base_Withdraw']>, "Base_withdraws", ParentType, ContextType, RequireFields<SubscriptionBase_withdrawsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_swap?: SubscriptionResolver<Maybe<ResolversTypes['Base_Swap']>, "Base_swap", ParentType, ContextType, RequireFields<SubscriptionBase_swapArgs, 'id' | 'subgraphError'>>;
  Base_swaps?: SubscriptionResolver<Array<ResolversTypes['Base_Swap']>, "Base_swaps", ParentType, ContextType, RequireFields<SubscriptionBase_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_activeAccount?: SubscriptionResolver<Maybe<ResolversTypes['Base_ActiveAccount']>, "Base_activeAccount", ParentType, ContextType, RequireFields<SubscriptionBase_activeAccountArgs, 'id' | 'subgraphError'>>;
  Base_activeAccounts?: SubscriptionResolver<Array<ResolversTypes['Base_ActiveAccount']>, "Base_activeAccounts", ParentType, ContextType, RequireFields<SubscriptionBase_activeAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_liquidityPoolAmount?: SubscriptionResolver<Maybe<ResolversTypes['Base__LiquidityPoolAmount']>, "Base_liquidityPoolAmount", ParentType, ContextType, RequireFields<SubscriptionBase_liquidityPoolAmountArgs, 'id' | 'subgraphError'>>;
  Base_liquidityPoolAmounts?: SubscriptionResolver<Array<ResolversTypes['Base__LiquidityPoolAmount']>, "Base_liquidityPoolAmounts", ParentType, ContextType, RequireFields<SubscriptionBase_liquidityPoolAmountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_helperStore?: SubscriptionResolver<Maybe<ResolversTypes['Base__HelperStore']>, "Base_helperStore", ParentType, ContextType, RequireFields<SubscriptionBase_helperStoreArgs, 'id' | 'subgraphError'>>;
  Base_helperStores?: SubscriptionResolver<Array<ResolversTypes['Base__HelperStore']>, "Base_helperStores", ParentType, ContextType, RequireFields<SubscriptionBase_helperStoresArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_tokenWhitelist?: SubscriptionResolver<Maybe<ResolversTypes['Base__TokenWhitelist']>, "Base_tokenWhitelist", ParentType, ContextType, RequireFields<SubscriptionBase_tokenWhitelistArgs, 'id' | 'subgraphError'>>;
  Base_tokenWhitelists?: SubscriptionResolver<Array<ResolversTypes['Base__TokenWhitelist']>, "Base_tokenWhitelists", ParentType, ContextType, RequireFields<SubscriptionBase_tokenWhitelistsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_tokenWhitelistSymbol?: SubscriptionResolver<Maybe<ResolversTypes['Base__TokenWhitelistSymbol']>, "Base_tokenWhitelistSymbol", ParentType, ContextType, RequireFields<SubscriptionBase_tokenWhitelistSymbolArgs, 'id' | 'subgraphError'>>;
  Base_tokenWhitelistSymbols?: SubscriptionResolver<Array<ResolversTypes['Base__TokenWhitelistSymbol']>, "Base_tokenWhitelistSymbols", ParentType, ContextType, RequireFields<SubscriptionBase_tokenWhitelistSymbolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base_protocol?: SubscriptionResolver<Maybe<ResolversTypes['Base_Protocol']>, "Base_protocol", ParentType, ContextType, RequireFields<SubscriptionBase_protocolArgs, 'id' | 'subgraphError'>>;
  Base_protocols?: SubscriptionResolver<Array<ResolversTypes['Base_Protocol']>, "Base_protocols", ParentType, ContextType, RequireFields<SubscriptionBase_protocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  Base__meta?: SubscriptionResolver<Maybe<ResolversTypes['Base__Meta_']>, "Base__meta", ParentType, ContextType, Partial<SubscriptionBase__metaArgs>>;
}>;

export type Ethereum_AccountResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_Account'] = ResolversParentTypes['Ethereum_Account']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positions?: Resolver<Array<ResolversTypes['Ethereum_Position']>, ParentType, ContextType, RequireFields<Ethereum_AccountpositionsArgs, 'skip' | 'first'>>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  deposits?: Resolver<Array<ResolversTypes['Ethereum_Deposit']>, ParentType, ContextType, RequireFields<Ethereum_AccountdepositsArgs, 'skip' | 'first'>>;
  withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  withdraws?: Resolver<Array<ResolversTypes['Ethereum_Withdraw']>, ParentType, ContextType, RequireFields<Ethereum_AccountwithdrawsArgs, 'skip' | 'first'>>;
  swapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  swaps?: Resolver<Array<ResolversTypes['Ethereum_Swap']>, ParentType, ContextType, RequireFields<Ethereum_AccountswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_ActiveAccountResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_ActiveAccount'] = ResolversParentTypes['Ethereum_ActiveAccount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface Ethereum_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Ethereum_BigDecimal'], any> {
  name: 'Ethereum_BigDecimal';
}

export interface BigIntScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BigInt'], any> {
  name: 'BigInt';
}

export interface Ethereum_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Ethereum_Bytes'], any> {
  name: 'Ethereum_Bytes';
}

export type Ethereum_DepositResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_Deposit'] = ResolversParentTypes['Ethereum_Deposit']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Ethereum_DexAmmProtocol'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Ethereum_Account'], ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Ethereum_Position']>, ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Ethereum_LiquidityPool'], ParentType, ContextType>;
  tickLower?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tickUpper?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Ethereum_Token']>, ParentType, ContextType, RequireFields<Ethereum_DepositinputTokensArgs, 'skip' | 'first'>>;
  inputTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reserveAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_DexAmmProtocolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_DexAmmProtocol'] = ResolversParentTypes['Ethereum_DexAmmProtocol']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  schemaVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  subgraphVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  methodologyVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  network?: Resolver<ResolversTypes['Ethereum_Network'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Ethereum_ProtocolType'], ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideValueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  uncollectedSupplySideValueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueLPs?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueTraders?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativePositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotDayID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastUpdateTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lastUpdateBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dailyUsageMetrics?: Resolver<Array<ResolversTypes['Ethereum_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<Ethereum_DexAmmProtocoldailyUsageMetricsArgs, 'skip' | 'first'>>;
  hourlyUsageMetrics?: Resolver<Array<ResolversTypes['Ethereum_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<Ethereum_DexAmmProtocolhourlyUsageMetricsArgs, 'skip' | 'first'>>;
  financialMetrics?: Resolver<Array<ResolversTypes['Ethereum_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<Ethereum_DexAmmProtocolfinancialMetricsArgs, 'skip' | 'first'>>;
  pools?: Resolver<Array<ResolversTypes['Ethereum_LiquidityPool']>, ParentType, ContextType, RequireFields<Ethereum_DexAmmProtocolpoolsArgs, 'skip' | 'first'>>;
  _regenesis?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_FinancialsDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_FinancialsDailySnapshot'] = ResolversParentTypes['Ethereum_FinancialsDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Ethereum_DexAmmProtocol'], ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideValueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  uncollectedSupplySideValueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  dailyVolumeUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  dailySupplySideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  dailyProtocolSideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  dailyTotalRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface Ethereum_Int8ScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Ethereum_Int8'], any> {
  name: 'Ethereum_Int8';
}

export type Ethereum_LiquidityPoolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_LiquidityPool'] = ResolversParentTypes['Ethereum_LiquidityPool']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Ethereum_DexAmmProtocol'], ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  symbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  liquidityToken?: Resolver<Maybe<ResolversTypes['Ethereum_Token']>, ParentType, ContextType>;
  liquidityTokenType?: Resolver<Maybe<ResolversTypes['Ethereum_TokenType']>, ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Ethereum_Token']>, ParentType, ContextType, RequireFields<Ethereum_LiquidityPoolinputTokensArgs, 'skip' | 'first'>>;
  rewardTokens?: Resolver<Maybe<Array<ResolversTypes['Ethereum_RewardToken']>>, ParentType, ContextType, RequireFields<Ethereum_LiquidityPoolrewardTokensArgs, 'skip' | 'first'>>;
  fees?: Resolver<Array<ResolversTypes['Ethereum_LiquidityPoolFee']>, ParentType, ContextType, RequireFields<Ethereum_LiquidityPoolfeesArgs, 'skip' | 'first'>>;
  isSingleSided?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  createdTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  totalLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  activeLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedProtocolSideValuesUSD?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  uncollectedSupplySideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedSupplySideValuesUSD?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  inputTokenBalancesUSD?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  inputTokenWeights?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['Ethereum_BigDecimal']>>, ParentType, ContextType>;
  cumulativeDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeSwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positions?: Resolver<Array<ResolversTypes['Ethereum_Position']>, ParentType, ContextType, RequireFields<Ethereum_LiquidityPoolpositionsArgs, 'skip' | 'first'>>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotDayID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotHourID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastUpdateTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lastUpdateBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dailySnapshots?: Resolver<Array<ResolversTypes['Ethereum_LiquidityPoolDailySnapshot']>, ParentType, ContextType, RequireFields<Ethereum_LiquidityPooldailySnapshotsArgs, 'skip' | 'first'>>;
  hourlySnapshots?: Resolver<Array<ResolversTypes['Ethereum_LiquidityPoolHourlySnapshot']>, ParentType, ContextType, RequireFields<Ethereum_LiquidityPoolhourlySnapshotsArgs, 'skip' | 'first'>>;
  deposits?: Resolver<Array<ResolversTypes['Ethereum_Deposit']>, ParentType, ContextType, RequireFields<Ethereum_LiquidityPooldepositsArgs, 'skip' | 'first'>>;
  withdraws?: Resolver<Array<ResolversTypes['Ethereum_Withdraw']>, ParentType, ContextType, RequireFields<Ethereum_LiquidityPoolwithdrawsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<ResolversTypes['Ethereum_Swap']>, ParentType, ContextType, RequireFields<Ethereum_LiquidityPoolswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_LiquidityPoolDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_LiquidityPoolDailySnapshot'] = ResolversParentTypes['Ethereum_LiquidityPoolDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Ethereum_DexAmmProtocol'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Ethereum_LiquidityPool'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  totalLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  activeLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedProtocolSideValuesUSD?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  uncollectedSupplySideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedSupplySideValuesUSD?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  dailySupplySideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  dailyProtocolSideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  dailyTotalRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  dailyVolumeUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  dailyVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  dailyVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  inputTokenBalancesUSD?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  inputTokenWeights?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['Ethereum_BigDecimal']>>, ParentType, ContextType>;
  cumulativeDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeSwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_LiquidityPoolFeeResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_LiquidityPoolFee'] = ResolversParentTypes['Ethereum_LiquidityPoolFee']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  feePercentage?: Resolver<Maybe<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  feeType?: Resolver<ResolversTypes['Ethereum_LiquidityPoolFeeType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_LiquidityPoolHourlySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_LiquidityPoolHourlySnapshot'] = ResolversParentTypes['Ethereum_LiquidityPoolHourlySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  hour?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Ethereum_DexAmmProtocol'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Ethereum_LiquidityPool'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  totalLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  activeLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedProtocolSideValuesUSD?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  uncollectedSupplySideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedSupplySideValuesUSD?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  hourlySupplySideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  hourlyProtocolSideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  hourlyTotalRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  hourlyVolumeUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hourlyVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  hourlyVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  inputTokenBalancesUSD?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  inputTokenWeights?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['Ethereum_BigDecimal']>>, ParentType, ContextType>;
  cumulativeDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeSwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_PositionResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_Position'] = ResolversParentTypes['Ethereum_Position']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Ethereum_Account'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Ethereum_LiquidityPool'], ParentType, ContextType>;
  hashOpened?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  hashClosed?: Resolver<Maybe<ResolversTypes['Ethereum_Bytes']>, ParentType, ContextType>;
  blockNumberOpened?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestampOpened?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumberClosed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  timestampClosed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tickLower?: Resolver<Maybe<ResolversTypes['Ethereum_Tick']>, ParentType, ContextType>;
  tickUpper?: Resolver<Maybe<ResolversTypes['Ethereum_Tick']>, ParentType, ContextType>;
  liquidityToken?: Resolver<Maybe<ResolversTypes['Ethereum_Token']>, ParentType, ContextType>;
  liquidityTokenType?: Resolver<Maybe<ResolversTypes['Ethereum_TokenType']>, ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeDepositTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeDepositUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeWithdrawTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeWithdrawUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeRewardUSD?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  deposits?: Resolver<Array<ResolversTypes['Ethereum_Deposit']>, ParentType, ContextType, RequireFields<Ethereum_PositiondepositsArgs, 'skip' | 'first'>>;
  withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  withdraws?: Resolver<Array<ResolversTypes['Ethereum_Withdraw']>, ParentType, ContextType, RequireFields<Ethereum_PositionwithdrawsArgs, 'skip' | 'first'>>;
  snapshots?: Resolver<Array<ResolversTypes['Ethereum_PositionSnapshot']>, ParentType, ContextType, RequireFields<Ethereum_PositionsnapshotsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_PositionSnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_PositionSnapshot'] = ResolversParentTypes['Ethereum_PositionSnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  position?: Resolver<ResolversTypes['Ethereum_Position'], ParentType, ContextType>;
  liquidityTokenType?: Resolver<Maybe<ResolversTypes['Ethereum_TokenType']>, ParentType, ContextType>;
  liquidity?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  liquidityUSD?: Resolver<Maybe<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  cumulativeDepositTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeDepositUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeWithdrawTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeWithdrawUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeRewardTokenAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  cumulativeRewardUSD?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_ProtocolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_Protocol'] = ResolversParentTypes['Ethereum_Protocol']> = ResolversObject<{
  __resolveType: TypeResolveFn<'Ethereum_DexAmmProtocol', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  schemaVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  subgraphVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  methodologyVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  network?: Resolver<ResolversTypes['Ethereum_Network'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Ethereum_ProtocolType'], ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyUsageMetrics?: Resolver<Array<ResolversTypes['Ethereum_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<Ethereum_ProtocoldailyUsageMetricsArgs, 'skip' | 'first'>>;
  hourlyUsageMetrics?: Resolver<Array<ResolversTypes['Ethereum_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<Ethereum_ProtocolhourlyUsageMetricsArgs, 'skip' | 'first'>>;
  financialMetrics?: Resolver<Array<ResolversTypes['Ethereum_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<Ethereum_ProtocolfinancialMetricsArgs, 'skip' | 'first'>>;
}>;

export type Ethereum_RewardTokenResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_RewardToken'] = ResolversParentTypes['Ethereum_RewardToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['Ethereum_Token'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Ethereum_RewardTokenType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_SwapResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_Swap'] = ResolversParentTypes['Ethereum_Swap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Ethereum_DexAmmProtocol'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Ethereum_Account'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Ethereum_LiquidityPool'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tokenIn?: Resolver<ResolversTypes['Ethereum_Token'], ParentType, ContextType>;
  amountIn?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amountInUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  tokenOut?: Resolver<ResolversTypes['Ethereum_Token'], ParentType, ContextType>;
  amountOut?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amountOutUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  reserveAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_TickResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_Tick'] = ResolversParentTypes['Ethereum_Tick']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  index?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Ethereum_LiquidityPool'], ParentType, ContextType>;
  createdTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  prices?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  liquidityGross?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityGrossUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  liquidityNet?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityNetUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  lastSnapshotDayID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotHourID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastUpdateTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lastUpdateBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_TickDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_TickDailySnapshot'] = ResolversParentTypes['Ethereum_TickDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  tick?: Resolver<ResolversTypes['Ethereum_Tick'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Ethereum_LiquidityPool'], ParentType, ContextType>;
  liquidityGross?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityGrossUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  liquidityNet?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityNetUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_TickHourlySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_TickHourlySnapshot'] = ResolversParentTypes['Ethereum_TickHourlySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  hour?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  tick?: Resolver<ResolversTypes['Ethereum_Tick'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Ethereum_LiquidityPool'], ParentType, ContextType>;
  liquidityGross?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityGrossUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  liquidityNet?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityNetUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface TimestampScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Timestamp'], any> {
  name: 'Timestamp';
}

export type Ethereum_TokenResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_Token'] = ResolversParentTypes['Ethereum_Token']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  decimals?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastPriceUSD?: Resolver<Maybe<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  lastPriceBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  _lastPricePool?: Resolver<Maybe<ResolversTypes['Ethereum_Bytes']>, ParentType, ContextType>;
  _totalSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  _totalValueLockedUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  _largePriceChangeBuffer?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  _largeTVLImpactBuffer?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_UsageMetricsDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_UsageMetricsDailySnapshot'] = ResolversParentTypes['Ethereum_UsageMetricsDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Ethereum_DexAmmProtocol'], ParentType, ContextType>;
  dailyActiveUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyTransactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_UsageMetricsHourlySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_UsageMetricsHourlySnapshot'] = ResolversParentTypes['Ethereum_UsageMetricsHourlySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  hour?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Ethereum_DexAmmProtocol'], ParentType, ContextType>;
  hourlyActiveUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyTransactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum_WithdrawResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum_Withdraw'] = ResolversParentTypes['Ethereum_Withdraw']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Ethereum_DexAmmProtocol'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Ethereum_Account'], ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Ethereum_Position']>, ParentType, ContextType>;
  tickLower?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tickUpper?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Ethereum_LiquidityPool'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Ethereum_Token']>, ParentType, ContextType, RequireFields<Ethereum_WithdrawinputTokensArgs, 'skip' | 'first'>>;
  inputTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reserveAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['Ethereum_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum__Block_Resolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum__Block_'] = ResolversParentTypes['Ethereum__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['Ethereum_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  parentHash?: Resolver<Maybe<ResolversTypes['Ethereum_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum__HelperStoreResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum__HelperStore'] = ResolversParentTypes['Ethereum__HelperStore']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  valueDecimalList?: Resolver<Maybe<Array<ResolversTypes['Ethereum_BigDecimal']>>, ParentType, ContextType>;
  valueDecimal?: Resolver<Maybe<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  valueInt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum__LiquidityPoolAmountResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum__LiquidityPoolAmount'] = ResolversParentTypes['Ethereum__LiquidityPoolAmount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Ethereum_Token']>, ParentType, ContextType, RequireFields<Ethereum__LiquidityPoolAmountinputTokensArgs, 'skip' | 'first'>>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  tokenPrices?: Resolver<Array<ResolversTypes['Ethereum_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum__Meta_Resolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum__Meta_'] = ResolversParentTypes['Ethereum__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['Ethereum__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum__TokenWhitelistResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum__TokenWhitelist'] = ResolversParentTypes['Ethereum__TokenWhitelist']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  whitelistPools?: Resolver<Array<ResolversTypes['Ethereum_LiquidityPool']>, ParentType, ContextType, RequireFields<Ethereum__TokenWhitelistwhitelistPoolsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ethereum__TokenWhitelistSymbolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Ethereum__TokenWhitelistSymbol'] = ResolversParentTypes['Ethereum__TokenWhitelistSymbol']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  address?: Resolver<ResolversTypes['Ethereum_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_AccountResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_Account'] = ResolversParentTypes['Optimism_Account']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positions?: Resolver<Array<ResolversTypes['Optimism_Position']>, ParentType, ContextType, RequireFields<Optimism_AccountpositionsArgs, 'skip' | 'first'>>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  deposits?: Resolver<Array<ResolversTypes['Optimism_Deposit']>, ParentType, ContextType, RequireFields<Optimism_AccountdepositsArgs, 'skip' | 'first'>>;
  withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  withdraws?: Resolver<Array<ResolversTypes['Optimism_Withdraw']>, ParentType, ContextType, RequireFields<Optimism_AccountwithdrawsArgs, 'skip' | 'first'>>;
  swapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  swaps?: Resolver<Array<ResolversTypes['Optimism_Swap']>, ParentType, ContextType, RequireFields<Optimism_AccountswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_ActiveAccountResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_ActiveAccount'] = ResolversParentTypes['Optimism_ActiveAccount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface Optimism_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Optimism_BigDecimal'], any> {
  name: 'Optimism_BigDecimal';
}

export interface Optimism_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Optimism_Bytes'], any> {
  name: 'Optimism_Bytes';
}

export type Optimism_DepositResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_Deposit'] = ResolversParentTypes['Optimism_Deposit']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Optimism_DexAmmProtocol'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Optimism_Account'], ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Optimism_Position']>, ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Optimism_LiquidityPool'], ParentType, ContextType>;
  tickLower?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tickUpper?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Optimism_Token']>, ParentType, ContextType, RequireFields<Optimism_DepositinputTokensArgs, 'skip' | 'first'>>;
  inputTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reserveAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_DexAmmProtocolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_DexAmmProtocol'] = ResolversParentTypes['Optimism_DexAmmProtocol']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  schemaVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  subgraphVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  methodologyVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  network?: Resolver<ResolversTypes['Optimism_Network'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Optimism_ProtocolType'], ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideValueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  uncollectedSupplySideValueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueLPs?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueTraders?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativePositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotDayID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastUpdateTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lastUpdateBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dailyUsageMetrics?: Resolver<Array<ResolversTypes['Optimism_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<Optimism_DexAmmProtocoldailyUsageMetricsArgs, 'skip' | 'first'>>;
  hourlyUsageMetrics?: Resolver<Array<ResolversTypes['Optimism_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<Optimism_DexAmmProtocolhourlyUsageMetricsArgs, 'skip' | 'first'>>;
  financialMetrics?: Resolver<Array<ResolversTypes['Optimism_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<Optimism_DexAmmProtocolfinancialMetricsArgs, 'skip' | 'first'>>;
  pools?: Resolver<Array<ResolversTypes['Optimism_LiquidityPool']>, ParentType, ContextType, RequireFields<Optimism_DexAmmProtocolpoolsArgs, 'skip' | 'first'>>;
  _regenesis?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_FinancialsDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_FinancialsDailySnapshot'] = ResolversParentTypes['Optimism_FinancialsDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Optimism_DexAmmProtocol'], ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideValueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  uncollectedSupplySideValueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  dailyVolumeUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  dailySupplySideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  dailyProtocolSideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  dailyTotalRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface Optimism_Int8ScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Optimism_Int8'], any> {
  name: 'Optimism_Int8';
}

export type Optimism_LiquidityPoolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_LiquidityPool'] = ResolversParentTypes['Optimism_LiquidityPool']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Optimism_DexAmmProtocol'], ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  symbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  liquidityToken?: Resolver<Maybe<ResolversTypes['Optimism_Token']>, ParentType, ContextType>;
  liquidityTokenType?: Resolver<Maybe<ResolversTypes['Optimism_TokenType']>, ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Optimism_Token']>, ParentType, ContextType, RequireFields<Optimism_LiquidityPoolinputTokensArgs, 'skip' | 'first'>>;
  rewardTokens?: Resolver<Maybe<Array<ResolversTypes['Optimism_RewardToken']>>, ParentType, ContextType, RequireFields<Optimism_LiquidityPoolrewardTokensArgs, 'skip' | 'first'>>;
  fees?: Resolver<Array<ResolversTypes['Optimism_LiquidityPoolFee']>, ParentType, ContextType, RequireFields<Optimism_LiquidityPoolfeesArgs, 'skip' | 'first'>>;
  isSingleSided?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  createdTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  totalLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  activeLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedProtocolSideValuesUSD?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  uncollectedSupplySideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedSupplySideValuesUSD?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  inputTokenBalancesUSD?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  inputTokenWeights?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['Optimism_BigDecimal']>>, ParentType, ContextType>;
  cumulativeDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeSwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positions?: Resolver<Array<ResolversTypes['Optimism_Position']>, ParentType, ContextType, RequireFields<Optimism_LiquidityPoolpositionsArgs, 'skip' | 'first'>>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotDayID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotHourID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastUpdateTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lastUpdateBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dailySnapshots?: Resolver<Array<ResolversTypes['Optimism_LiquidityPoolDailySnapshot']>, ParentType, ContextType, RequireFields<Optimism_LiquidityPooldailySnapshotsArgs, 'skip' | 'first'>>;
  hourlySnapshots?: Resolver<Array<ResolversTypes['Optimism_LiquidityPoolHourlySnapshot']>, ParentType, ContextType, RequireFields<Optimism_LiquidityPoolhourlySnapshotsArgs, 'skip' | 'first'>>;
  deposits?: Resolver<Array<ResolversTypes['Optimism_Deposit']>, ParentType, ContextType, RequireFields<Optimism_LiquidityPooldepositsArgs, 'skip' | 'first'>>;
  withdraws?: Resolver<Array<ResolversTypes['Optimism_Withdraw']>, ParentType, ContextType, RequireFields<Optimism_LiquidityPoolwithdrawsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<ResolversTypes['Optimism_Swap']>, ParentType, ContextType, RequireFields<Optimism_LiquidityPoolswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_LiquidityPoolDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_LiquidityPoolDailySnapshot'] = ResolversParentTypes['Optimism_LiquidityPoolDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Optimism_DexAmmProtocol'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Optimism_LiquidityPool'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  totalLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  activeLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedProtocolSideValuesUSD?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  uncollectedSupplySideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedSupplySideValuesUSD?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  dailySupplySideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  dailyProtocolSideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  dailyTotalRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  dailyVolumeUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  dailyVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  dailyVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  inputTokenBalancesUSD?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  inputTokenWeights?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['Optimism_BigDecimal']>>, ParentType, ContextType>;
  cumulativeDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeSwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_LiquidityPoolFeeResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_LiquidityPoolFee'] = ResolversParentTypes['Optimism_LiquidityPoolFee']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  feePercentage?: Resolver<Maybe<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  feeType?: Resolver<ResolversTypes['Optimism_LiquidityPoolFeeType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_LiquidityPoolHourlySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_LiquidityPoolHourlySnapshot'] = ResolversParentTypes['Optimism_LiquidityPoolHourlySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  hour?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Optimism_DexAmmProtocol'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Optimism_LiquidityPool'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  totalLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  activeLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedProtocolSideValuesUSD?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  uncollectedSupplySideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedSupplySideValuesUSD?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  hourlySupplySideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  hourlyProtocolSideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  hourlyTotalRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  hourlyVolumeUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hourlyVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  hourlyVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  inputTokenBalancesUSD?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  inputTokenWeights?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['Optimism_BigDecimal']>>, ParentType, ContextType>;
  cumulativeDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeSwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_PositionResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_Position'] = ResolversParentTypes['Optimism_Position']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Optimism_Account'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Optimism_LiquidityPool'], ParentType, ContextType>;
  hashOpened?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  hashClosed?: Resolver<Maybe<ResolversTypes['Optimism_Bytes']>, ParentType, ContextType>;
  blockNumberOpened?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestampOpened?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumberClosed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  timestampClosed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tickLower?: Resolver<Maybe<ResolversTypes['Optimism_Tick']>, ParentType, ContextType>;
  tickUpper?: Resolver<Maybe<ResolversTypes['Optimism_Tick']>, ParentType, ContextType>;
  liquidityToken?: Resolver<Maybe<ResolversTypes['Optimism_Token']>, ParentType, ContextType>;
  liquidityTokenType?: Resolver<Maybe<ResolversTypes['Optimism_TokenType']>, ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeDepositTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeDepositUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeWithdrawTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeWithdrawUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeRewardUSD?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  deposits?: Resolver<Array<ResolversTypes['Optimism_Deposit']>, ParentType, ContextType, RequireFields<Optimism_PositiondepositsArgs, 'skip' | 'first'>>;
  withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  withdraws?: Resolver<Array<ResolversTypes['Optimism_Withdraw']>, ParentType, ContextType, RequireFields<Optimism_PositionwithdrawsArgs, 'skip' | 'first'>>;
  snapshots?: Resolver<Array<ResolversTypes['Optimism_PositionSnapshot']>, ParentType, ContextType, RequireFields<Optimism_PositionsnapshotsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_PositionSnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_PositionSnapshot'] = ResolversParentTypes['Optimism_PositionSnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  position?: Resolver<ResolversTypes['Optimism_Position'], ParentType, ContextType>;
  liquidityTokenType?: Resolver<Maybe<ResolversTypes['Optimism_TokenType']>, ParentType, ContextType>;
  liquidity?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  liquidityUSD?: Resolver<Maybe<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  cumulativeDepositTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeDepositUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeWithdrawTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeWithdrawUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeRewardTokenAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  cumulativeRewardUSD?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_ProtocolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_Protocol'] = ResolversParentTypes['Optimism_Protocol']> = ResolversObject<{
  __resolveType: TypeResolveFn<'Optimism_DexAmmProtocol', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  schemaVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  subgraphVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  methodologyVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  network?: Resolver<ResolversTypes['Optimism_Network'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Optimism_ProtocolType'], ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyUsageMetrics?: Resolver<Array<ResolversTypes['Optimism_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<Optimism_ProtocoldailyUsageMetricsArgs, 'skip' | 'first'>>;
  hourlyUsageMetrics?: Resolver<Array<ResolversTypes['Optimism_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<Optimism_ProtocolhourlyUsageMetricsArgs, 'skip' | 'first'>>;
  financialMetrics?: Resolver<Array<ResolversTypes['Optimism_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<Optimism_ProtocolfinancialMetricsArgs, 'skip' | 'first'>>;
}>;

export type Optimism_RewardTokenResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_RewardToken'] = ResolversParentTypes['Optimism_RewardToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['Optimism_Token'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Optimism_RewardTokenType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_SwapResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_Swap'] = ResolversParentTypes['Optimism_Swap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Optimism_DexAmmProtocol'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Optimism_Account'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Optimism_LiquidityPool'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tokenIn?: Resolver<ResolversTypes['Optimism_Token'], ParentType, ContextType>;
  amountIn?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amountInUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  tokenOut?: Resolver<ResolversTypes['Optimism_Token'], ParentType, ContextType>;
  amountOut?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amountOutUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  reserveAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_TickResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_Tick'] = ResolversParentTypes['Optimism_Tick']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  index?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Optimism_LiquidityPool'], ParentType, ContextType>;
  createdTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  prices?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  liquidityGross?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityGrossUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  liquidityNet?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityNetUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  lastSnapshotDayID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotHourID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastUpdateTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lastUpdateBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_TickDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_TickDailySnapshot'] = ResolversParentTypes['Optimism_TickDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  tick?: Resolver<ResolversTypes['Optimism_Tick'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Optimism_LiquidityPool'], ParentType, ContextType>;
  liquidityGross?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityGrossUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  liquidityNet?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityNetUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_TickHourlySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_TickHourlySnapshot'] = ResolversParentTypes['Optimism_TickHourlySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  hour?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  tick?: Resolver<ResolversTypes['Optimism_Tick'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Optimism_LiquidityPool'], ParentType, ContextType>;
  liquidityGross?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityGrossUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  liquidityNet?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityNetUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_TokenResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_Token'] = ResolversParentTypes['Optimism_Token']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  decimals?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastPriceUSD?: Resolver<Maybe<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  lastPriceBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  _lastPricePool?: Resolver<Maybe<ResolversTypes['Optimism_Bytes']>, ParentType, ContextType>;
  _totalSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  _totalValueLockedUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  _largePriceChangeBuffer?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  _largeTVLImpactBuffer?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_UsageMetricsDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_UsageMetricsDailySnapshot'] = ResolversParentTypes['Optimism_UsageMetricsDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Optimism_DexAmmProtocol'], ParentType, ContextType>;
  dailyActiveUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyTransactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_UsageMetricsHourlySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_UsageMetricsHourlySnapshot'] = ResolversParentTypes['Optimism_UsageMetricsHourlySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  hour?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Optimism_DexAmmProtocol'], ParentType, ContextType>;
  hourlyActiveUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyTransactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism_WithdrawResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism_Withdraw'] = ResolversParentTypes['Optimism_Withdraw']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Optimism_DexAmmProtocol'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Optimism_Account'], ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Optimism_Position']>, ParentType, ContextType>;
  tickLower?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tickUpper?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Optimism_LiquidityPool'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Optimism_Token']>, ParentType, ContextType, RequireFields<Optimism_WithdrawinputTokensArgs, 'skip' | 'first'>>;
  inputTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reserveAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['Optimism_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism__Block_Resolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism__Block_'] = ResolversParentTypes['Optimism__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['Optimism_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  parentHash?: Resolver<Maybe<ResolversTypes['Optimism_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism__HelperStoreResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism__HelperStore'] = ResolversParentTypes['Optimism__HelperStore']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  valueDecimalList?: Resolver<Maybe<Array<ResolversTypes['Optimism_BigDecimal']>>, ParentType, ContextType>;
  valueDecimal?: Resolver<Maybe<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  valueInt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism__LiquidityPoolAmountResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism__LiquidityPoolAmount'] = ResolversParentTypes['Optimism__LiquidityPoolAmount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Optimism_Token']>, ParentType, ContextType, RequireFields<Optimism__LiquidityPoolAmountinputTokensArgs, 'skip' | 'first'>>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  tokenPrices?: Resolver<Array<ResolversTypes['Optimism_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism__Meta_Resolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism__Meta_'] = ResolversParentTypes['Optimism__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['Optimism__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism__TokenWhitelistResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism__TokenWhitelist'] = ResolversParentTypes['Optimism__TokenWhitelist']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  whitelistPools?: Resolver<Array<ResolversTypes['Optimism_LiquidityPool']>, ParentType, ContextType, RequireFields<Optimism__TokenWhitelistwhitelistPoolsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Optimism__TokenWhitelistSymbolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Optimism__TokenWhitelistSymbol'] = ResolversParentTypes['Optimism__TokenWhitelistSymbol']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  address?: Resolver<ResolversTypes['Optimism_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_AccountResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_Account'] = ResolversParentTypes['Arbitrum_Account']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positions?: Resolver<Array<ResolversTypes['Arbitrum_Position']>, ParentType, ContextType, RequireFields<Arbitrum_AccountpositionsArgs, 'skip' | 'first'>>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  deposits?: Resolver<Array<ResolversTypes['Arbitrum_Deposit']>, ParentType, ContextType, RequireFields<Arbitrum_AccountdepositsArgs, 'skip' | 'first'>>;
  withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  withdraws?: Resolver<Array<ResolversTypes['Arbitrum_Withdraw']>, ParentType, ContextType, RequireFields<Arbitrum_AccountwithdrawsArgs, 'skip' | 'first'>>;
  swapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  swaps?: Resolver<Array<ResolversTypes['Arbitrum_Swap']>, ParentType, ContextType, RequireFields<Arbitrum_AccountswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_ActiveAccountResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_ActiveAccount'] = ResolversParentTypes['Arbitrum_ActiveAccount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface Arbitrum_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Arbitrum_BigDecimal'], any> {
  name: 'Arbitrum_BigDecimal';
}

export interface Arbitrum_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Arbitrum_Bytes'], any> {
  name: 'Arbitrum_Bytes';
}

export type Arbitrum_DepositResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_Deposit'] = ResolversParentTypes['Arbitrum_Deposit']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Arbitrum_DexAmmProtocol'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Arbitrum_Account'], ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Arbitrum_Position']>, ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Arbitrum_LiquidityPool'], ParentType, ContextType>;
  tickLower?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tickUpper?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Arbitrum_Token']>, ParentType, ContextType, RequireFields<Arbitrum_DepositinputTokensArgs, 'skip' | 'first'>>;
  inputTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reserveAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_DexAmmProtocolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_DexAmmProtocol'] = ResolversParentTypes['Arbitrum_DexAmmProtocol']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  schemaVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  subgraphVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  methodologyVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  network?: Resolver<ResolversTypes['Arbitrum_Network'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Arbitrum_ProtocolType'], ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideValueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  uncollectedSupplySideValueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueLPs?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueTraders?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativePositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotDayID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastUpdateTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lastUpdateBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dailyUsageMetrics?: Resolver<Array<ResolversTypes['Arbitrum_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<Arbitrum_DexAmmProtocoldailyUsageMetricsArgs, 'skip' | 'first'>>;
  hourlyUsageMetrics?: Resolver<Array<ResolversTypes['Arbitrum_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<Arbitrum_DexAmmProtocolhourlyUsageMetricsArgs, 'skip' | 'first'>>;
  financialMetrics?: Resolver<Array<ResolversTypes['Arbitrum_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<Arbitrum_DexAmmProtocolfinancialMetricsArgs, 'skip' | 'first'>>;
  pools?: Resolver<Array<ResolversTypes['Arbitrum_LiquidityPool']>, ParentType, ContextType, RequireFields<Arbitrum_DexAmmProtocolpoolsArgs, 'skip' | 'first'>>;
  _regenesis?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_FinancialsDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_FinancialsDailySnapshot'] = ResolversParentTypes['Arbitrum_FinancialsDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Arbitrum_DexAmmProtocol'], ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideValueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  uncollectedSupplySideValueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  dailyVolumeUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  dailySupplySideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  dailyProtocolSideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  dailyTotalRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface Arbitrum_Int8ScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Arbitrum_Int8'], any> {
  name: 'Arbitrum_Int8';
}

export type Arbitrum_LiquidityPoolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_LiquidityPool'] = ResolversParentTypes['Arbitrum_LiquidityPool']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Arbitrum_DexAmmProtocol'], ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  symbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  liquidityToken?: Resolver<Maybe<ResolversTypes['Arbitrum_Token']>, ParentType, ContextType>;
  liquidityTokenType?: Resolver<Maybe<ResolversTypes['Arbitrum_TokenType']>, ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Arbitrum_Token']>, ParentType, ContextType, RequireFields<Arbitrum_LiquidityPoolinputTokensArgs, 'skip' | 'first'>>;
  rewardTokens?: Resolver<Maybe<Array<ResolversTypes['Arbitrum_RewardToken']>>, ParentType, ContextType, RequireFields<Arbitrum_LiquidityPoolrewardTokensArgs, 'skip' | 'first'>>;
  fees?: Resolver<Array<ResolversTypes['Arbitrum_LiquidityPoolFee']>, ParentType, ContextType, RequireFields<Arbitrum_LiquidityPoolfeesArgs, 'skip' | 'first'>>;
  isSingleSided?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  createdTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  totalLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  activeLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedProtocolSideValuesUSD?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  uncollectedSupplySideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedSupplySideValuesUSD?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  inputTokenBalancesUSD?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  inputTokenWeights?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['Arbitrum_BigDecimal']>>, ParentType, ContextType>;
  cumulativeDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeSwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positions?: Resolver<Array<ResolversTypes['Arbitrum_Position']>, ParentType, ContextType, RequireFields<Arbitrum_LiquidityPoolpositionsArgs, 'skip' | 'first'>>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotDayID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotHourID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastUpdateTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lastUpdateBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dailySnapshots?: Resolver<Array<ResolversTypes['Arbitrum_LiquidityPoolDailySnapshot']>, ParentType, ContextType, RequireFields<Arbitrum_LiquidityPooldailySnapshotsArgs, 'skip' | 'first'>>;
  hourlySnapshots?: Resolver<Array<ResolversTypes['Arbitrum_LiquidityPoolHourlySnapshot']>, ParentType, ContextType, RequireFields<Arbitrum_LiquidityPoolhourlySnapshotsArgs, 'skip' | 'first'>>;
  deposits?: Resolver<Array<ResolversTypes['Arbitrum_Deposit']>, ParentType, ContextType, RequireFields<Arbitrum_LiquidityPooldepositsArgs, 'skip' | 'first'>>;
  withdraws?: Resolver<Array<ResolversTypes['Arbitrum_Withdraw']>, ParentType, ContextType, RequireFields<Arbitrum_LiquidityPoolwithdrawsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<ResolversTypes['Arbitrum_Swap']>, ParentType, ContextType, RequireFields<Arbitrum_LiquidityPoolswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_LiquidityPoolDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_LiquidityPoolDailySnapshot'] = ResolversParentTypes['Arbitrum_LiquidityPoolDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Arbitrum_DexAmmProtocol'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Arbitrum_LiquidityPool'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  totalLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  activeLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedProtocolSideValuesUSD?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  uncollectedSupplySideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedSupplySideValuesUSD?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  dailySupplySideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  dailyProtocolSideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  dailyTotalRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  dailyVolumeUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  dailyVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  dailyVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  inputTokenBalancesUSD?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  inputTokenWeights?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['Arbitrum_BigDecimal']>>, ParentType, ContextType>;
  cumulativeDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeSwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_LiquidityPoolFeeResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_LiquidityPoolFee'] = ResolversParentTypes['Arbitrum_LiquidityPoolFee']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  feePercentage?: Resolver<Maybe<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  feeType?: Resolver<ResolversTypes['Arbitrum_LiquidityPoolFeeType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_LiquidityPoolHourlySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_LiquidityPoolHourlySnapshot'] = ResolversParentTypes['Arbitrum_LiquidityPoolHourlySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  hour?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Arbitrum_DexAmmProtocol'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Arbitrum_LiquidityPool'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  totalLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  activeLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedProtocolSideValuesUSD?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  uncollectedSupplySideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedSupplySideValuesUSD?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  hourlySupplySideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  hourlyProtocolSideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  hourlyTotalRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  hourlyVolumeUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hourlyVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  hourlyVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  inputTokenBalancesUSD?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  inputTokenWeights?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['Arbitrum_BigDecimal']>>, ParentType, ContextType>;
  cumulativeDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeSwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_PositionResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_Position'] = ResolversParentTypes['Arbitrum_Position']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Arbitrum_Account'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Arbitrum_LiquidityPool'], ParentType, ContextType>;
  hashOpened?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  hashClosed?: Resolver<Maybe<ResolversTypes['Arbitrum_Bytes']>, ParentType, ContextType>;
  blockNumberOpened?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestampOpened?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumberClosed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  timestampClosed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tickLower?: Resolver<Maybe<ResolversTypes['Arbitrum_Tick']>, ParentType, ContextType>;
  tickUpper?: Resolver<Maybe<ResolversTypes['Arbitrum_Tick']>, ParentType, ContextType>;
  liquidityToken?: Resolver<Maybe<ResolversTypes['Arbitrum_Token']>, ParentType, ContextType>;
  liquidityTokenType?: Resolver<Maybe<ResolversTypes['Arbitrum_TokenType']>, ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeDepositTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeDepositUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeWithdrawTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeWithdrawUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeRewardUSD?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  deposits?: Resolver<Array<ResolversTypes['Arbitrum_Deposit']>, ParentType, ContextType, RequireFields<Arbitrum_PositiondepositsArgs, 'skip' | 'first'>>;
  withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  withdraws?: Resolver<Array<ResolversTypes['Arbitrum_Withdraw']>, ParentType, ContextType, RequireFields<Arbitrum_PositionwithdrawsArgs, 'skip' | 'first'>>;
  snapshots?: Resolver<Array<ResolversTypes['Arbitrum_PositionSnapshot']>, ParentType, ContextType, RequireFields<Arbitrum_PositionsnapshotsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_PositionSnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_PositionSnapshot'] = ResolversParentTypes['Arbitrum_PositionSnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  position?: Resolver<ResolversTypes['Arbitrum_Position'], ParentType, ContextType>;
  liquidityTokenType?: Resolver<Maybe<ResolversTypes['Arbitrum_TokenType']>, ParentType, ContextType>;
  liquidity?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  liquidityUSD?: Resolver<Maybe<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  cumulativeDepositTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeDepositUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeWithdrawTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeWithdrawUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeRewardTokenAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  cumulativeRewardUSD?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_ProtocolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_Protocol'] = ResolversParentTypes['Arbitrum_Protocol']> = ResolversObject<{
  __resolveType: TypeResolveFn<'Arbitrum_DexAmmProtocol', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  schemaVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  subgraphVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  methodologyVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  network?: Resolver<ResolversTypes['Arbitrum_Network'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Arbitrum_ProtocolType'], ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyUsageMetrics?: Resolver<Array<ResolversTypes['Arbitrum_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<Arbitrum_ProtocoldailyUsageMetricsArgs, 'skip' | 'first'>>;
  hourlyUsageMetrics?: Resolver<Array<ResolversTypes['Arbitrum_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<Arbitrum_ProtocolhourlyUsageMetricsArgs, 'skip' | 'first'>>;
  financialMetrics?: Resolver<Array<ResolversTypes['Arbitrum_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<Arbitrum_ProtocolfinancialMetricsArgs, 'skip' | 'first'>>;
}>;

export type Arbitrum_RewardTokenResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_RewardToken'] = ResolversParentTypes['Arbitrum_RewardToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['Arbitrum_Token'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Arbitrum_RewardTokenType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_SwapResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_Swap'] = ResolversParentTypes['Arbitrum_Swap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Arbitrum_DexAmmProtocol'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Arbitrum_Account'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Arbitrum_LiquidityPool'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tokenIn?: Resolver<ResolversTypes['Arbitrum_Token'], ParentType, ContextType>;
  amountIn?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amountInUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  tokenOut?: Resolver<ResolversTypes['Arbitrum_Token'], ParentType, ContextType>;
  amountOut?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amountOutUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  reserveAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_TickResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_Tick'] = ResolversParentTypes['Arbitrum_Tick']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  index?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Arbitrum_LiquidityPool'], ParentType, ContextType>;
  createdTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  prices?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  liquidityGross?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityGrossUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  liquidityNet?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityNetUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  lastSnapshotDayID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotHourID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastUpdateTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lastUpdateBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_TickDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_TickDailySnapshot'] = ResolversParentTypes['Arbitrum_TickDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  tick?: Resolver<ResolversTypes['Arbitrum_Tick'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Arbitrum_LiquidityPool'], ParentType, ContextType>;
  liquidityGross?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityGrossUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  liquidityNet?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityNetUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_TickHourlySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_TickHourlySnapshot'] = ResolversParentTypes['Arbitrum_TickHourlySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  hour?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  tick?: Resolver<ResolversTypes['Arbitrum_Tick'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Arbitrum_LiquidityPool'], ParentType, ContextType>;
  liquidityGross?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityGrossUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  liquidityNet?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityNetUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_TokenResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_Token'] = ResolversParentTypes['Arbitrum_Token']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  decimals?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastPriceUSD?: Resolver<Maybe<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  lastPriceBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  _lastPricePool?: Resolver<Maybe<ResolversTypes['Arbitrum_Bytes']>, ParentType, ContextType>;
  _totalSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  _totalValueLockedUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  _largePriceChangeBuffer?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  _largeTVLImpactBuffer?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_UsageMetricsDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_UsageMetricsDailySnapshot'] = ResolversParentTypes['Arbitrum_UsageMetricsDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Arbitrum_DexAmmProtocol'], ParentType, ContextType>;
  dailyActiveUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyTransactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_UsageMetricsHourlySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_UsageMetricsHourlySnapshot'] = ResolversParentTypes['Arbitrum_UsageMetricsHourlySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  hour?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Arbitrum_DexAmmProtocol'], ParentType, ContextType>;
  hourlyActiveUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyTransactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum_WithdrawResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum_Withdraw'] = ResolversParentTypes['Arbitrum_Withdraw']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Arbitrum_DexAmmProtocol'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Arbitrum_Account'], ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Arbitrum_Position']>, ParentType, ContextType>;
  tickLower?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tickUpper?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Arbitrum_LiquidityPool'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Arbitrum_Token']>, ParentType, ContextType, RequireFields<Arbitrum_WithdrawinputTokensArgs, 'skip' | 'first'>>;
  inputTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reserveAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['Arbitrum_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum__Block_Resolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum__Block_'] = ResolversParentTypes['Arbitrum__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['Arbitrum_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  parentHash?: Resolver<Maybe<ResolversTypes['Arbitrum_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum__HelperStoreResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum__HelperStore'] = ResolversParentTypes['Arbitrum__HelperStore']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  valueDecimalList?: Resolver<Maybe<Array<ResolversTypes['Arbitrum_BigDecimal']>>, ParentType, ContextType>;
  valueDecimal?: Resolver<Maybe<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  valueInt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum__LiquidityPoolAmountResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum__LiquidityPoolAmount'] = ResolversParentTypes['Arbitrum__LiquidityPoolAmount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Arbitrum_Token']>, ParentType, ContextType, RequireFields<Arbitrum__LiquidityPoolAmountinputTokensArgs, 'skip' | 'first'>>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  tokenPrices?: Resolver<Array<ResolversTypes['Arbitrum_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum__Meta_Resolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum__Meta_'] = ResolversParentTypes['Arbitrum__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['Arbitrum__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum__TokenWhitelistResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum__TokenWhitelist'] = ResolversParentTypes['Arbitrum__TokenWhitelist']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  whitelistPools?: Resolver<Array<ResolversTypes['Arbitrum_LiquidityPool']>, ParentType, ContextType, RequireFields<Arbitrum__TokenWhitelistwhitelistPoolsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Arbitrum__TokenWhitelistSymbolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Arbitrum__TokenWhitelistSymbol'] = ResolversParentTypes['Arbitrum__TokenWhitelistSymbol']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  address?: Resolver<ResolversTypes['Arbitrum_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_AccountResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_Account'] = ResolversParentTypes['Base_Account']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positions?: Resolver<Array<ResolversTypes['Base_Position']>, ParentType, ContextType, RequireFields<Base_AccountpositionsArgs, 'skip' | 'first'>>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  deposits?: Resolver<Array<ResolversTypes['Base_Deposit']>, ParentType, ContextType, RequireFields<Base_AccountdepositsArgs, 'skip' | 'first'>>;
  withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  withdraws?: Resolver<Array<ResolversTypes['Base_Withdraw']>, ParentType, ContextType, RequireFields<Base_AccountwithdrawsArgs, 'skip' | 'first'>>;
  swapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  swaps?: Resolver<Array<ResolversTypes['Base_Swap']>, ParentType, ContextType, RequireFields<Base_AccountswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_ActiveAccountResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_ActiveAccount'] = ResolversParentTypes['Base_ActiveAccount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface Base_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Base_BigDecimal'], any> {
  name: 'Base_BigDecimal';
}

export interface Base_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Base_Bytes'], any> {
  name: 'Base_Bytes';
}

export type Base_DepositResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_Deposit'] = ResolversParentTypes['Base_Deposit']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Base_DexAmmProtocol'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Base_Account'], ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Base_Position']>, ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Base_LiquidityPool'], ParentType, ContextType>;
  tickLower?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tickUpper?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Base_Token']>, ParentType, ContextType, RequireFields<Base_DepositinputTokensArgs, 'skip' | 'first'>>;
  inputTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reserveAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_DexAmmProtocolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_DexAmmProtocol'] = ResolversParentTypes['Base_DexAmmProtocol']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  schemaVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  subgraphVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  methodologyVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  network?: Resolver<ResolversTypes['Base_Network'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Base_ProtocolType'], ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideValueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  uncollectedSupplySideValueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueLPs?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueTraders?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativePositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotDayID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastUpdateTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lastUpdateBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dailyUsageMetrics?: Resolver<Array<ResolversTypes['Base_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<Base_DexAmmProtocoldailyUsageMetricsArgs, 'skip' | 'first'>>;
  hourlyUsageMetrics?: Resolver<Array<ResolversTypes['Base_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<Base_DexAmmProtocolhourlyUsageMetricsArgs, 'skip' | 'first'>>;
  financialMetrics?: Resolver<Array<ResolversTypes['Base_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<Base_DexAmmProtocolfinancialMetricsArgs, 'skip' | 'first'>>;
  pools?: Resolver<Array<ResolversTypes['Base_LiquidityPool']>, ParentType, ContextType, RequireFields<Base_DexAmmProtocolpoolsArgs, 'skip' | 'first'>>;
  _regenesis?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_FinancialsDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_FinancialsDailySnapshot'] = ResolversParentTypes['Base_FinancialsDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Base_DexAmmProtocol'], ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideValueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  uncollectedSupplySideValueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  dailyVolumeUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  dailySupplySideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  dailyProtocolSideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  dailyTotalRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface Base_Int8ScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Base_Int8'], any> {
  name: 'Base_Int8';
}

export type Base_LiquidityPoolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_LiquidityPool'] = ResolversParentTypes['Base_LiquidityPool']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Base_DexAmmProtocol'], ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  symbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  liquidityToken?: Resolver<Maybe<ResolversTypes['Base_Token']>, ParentType, ContextType>;
  liquidityTokenType?: Resolver<Maybe<ResolversTypes['Base_TokenType']>, ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Base_Token']>, ParentType, ContextType, RequireFields<Base_LiquidityPoolinputTokensArgs, 'skip' | 'first'>>;
  rewardTokens?: Resolver<Maybe<Array<ResolversTypes['Base_RewardToken']>>, ParentType, ContextType, RequireFields<Base_LiquidityPoolrewardTokensArgs, 'skip' | 'first'>>;
  fees?: Resolver<Array<ResolversTypes['Base_LiquidityPoolFee']>, ParentType, ContextType, RequireFields<Base_LiquidityPoolfeesArgs, 'skip' | 'first'>>;
  isSingleSided?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  createdTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  totalLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  activeLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedProtocolSideValuesUSD?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  uncollectedSupplySideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedSupplySideValuesUSD?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  inputTokenBalancesUSD?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  inputTokenWeights?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['Base_BigDecimal']>>, ParentType, ContextType>;
  cumulativeDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeSwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positions?: Resolver<Array<ResolversTypes['Base_Position']>, ParentType, ContextType, RequireFields<Base_LiquidityPoolpositionsArgs, 'skip' | 'first'>>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotDayID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotHourID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastUpdateTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lastUpdateBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dailySnapshots?: Resolver<Array<ResolversTypes['Base_LiquidityPoolDailySnapshot']>, ParentType, ContextType, RequireFields<Base_LiquidityPooldailySnapshotsArgs, 'skip' | 'first'>>;
  hourlySnapshots?: Resolver<Array<ResolversTypes['Base_LiquidityPoolHourlySnapshot']>, ParentType, ContextType, RequireFields<Base_LiquidityPoolhourlySnapshotsArgs, 'skip' | 'first'>>;
  deposits?: Resolver<Array<ResolversTypes['Base_Deposit']>, ParentType, ContextType, RequireFields<Base_LiquidityPooldepositsArgs, 'skip' | 'first'>>;
  withdraws?: Resolver<Array<ResolversTypes['Base_Withdraw']>, ParentType, ContextType, RequireFields<Base_LiquidityPoolwithdrawsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<ResolversTypes['Base_Swap']>, ParentType, ContextType, RequireFields<Base_LiquidityPoolswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_LiquidityPoolDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_LiquidityPoolDailySnapshot'] = ResolversParentTypes['Base_LiquidityPoolDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Base_DexAmmProtocol'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Base_LiquidityPool'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  totalLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  activeLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedProtocolSideValuesUSD?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  uncollectedSupplySideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedSupplySideValuesUSD?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  dailySupplySideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  dailyProtocolSideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  dailyTotalRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  dailyVolumeUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  dailyVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  dailyVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  inputTokenBalancesUSD?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  inputTokenWeights?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['Base_BigDecimal']>>, ParentType, ContextType>;
  cumulativeDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeSwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_LiquidityPoolFeeResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_LiquidityPoolFee'] = ResolversParentTypes['Base_LiquidityPoolFee']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  feePercentage?: Resolver<Maybe<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  feeType?: Resolver<ResolversTypes['Base_LiquidityPoolFeeType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_LiquidityPoolHourlySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_LiquidityPoolHourlySnapshot'] = ResolversParentTypes['Base_LiquidityPoolHourlySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  hour?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Base_DexAmmProtocol'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Base_LiquidityPool'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  totalLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalLiquidityUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  activeLiquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  activeLiquidityUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  uncollectedProtocolSideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedProtocolSideValuesUSD?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  uncollectedSupplySideTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  uncollectedSupplySideValuesUSD?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  hourlySupplySideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  hourlyProtocolSideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  hourlyTotalRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  hourlyVolumeUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hourlyVolumeByTokenAmount?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  hourlyVolumeByTokenUSD?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  inputTokenBalancesUSD?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  inputTokenWeights?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['Base_BigDecimal']>>, ParentType, ContextType>;
  cumulativeDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeSwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_PositionResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_Position'] = ResolversParentTypes['Base_Position']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Base_Account'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Base_LiquidityPool'], ParentType, ContextType>;
  hashOpened?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  hashClosed?: Resolver<Maybe<ResolversTypes['Base_Bytes']>, ParentType, ContextType>;
  blockNumberOpened?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestampOpened?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumberClosed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  timestampClosed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tickLower?: Resolver<Maybe<ResolversTypes['Base_Tick']>, ParentType, ContextType>;
  tickUpper?: Resolver<Maybe<ResolversTypes['Base_Tick']>, ParentType, ContextType>;
  liquidityToken?: Resolver<Maybe<ResolversTypes['Base_Token']>, ParentType, ContextType>;
  liquidityTokenType?: Resolver<Maybe<ResolversTypes['Base_TokenType']>, ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeDepositTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeDepositUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeWithdrawTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeWithdrawUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeRewardUSD?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  deposits?: Resolver<Array<ResolversTypes['Base_Deposit']>, ParentType, ContextType, RequireFields<Base_PositiondepositsArgs, 'skip' | 'first'>>;
  withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  withdraws?: Resolver<Array<ResolversTypes['Base_Withdraw']>, ParentType, ContextType, RequireFields<Base_PositionwithdrawsArgs, 'skip' | 'first'>>;
  snapshots?: Resolver<Array<ResolversTypes['Base_PositionSnapshot']>, ParentType, ContextType, RequireFields<Base_PositionsnapshotsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_PositionSnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_PositionSnapshot'] = ResolversParentTypes['Base_PositionSnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  position?: Resolver<ResolversTypes['Base_Position'], ParentType, ContextType>;
  liquidityTokenType?: Resolver<Maybe<ResolversTypes['Base_TokenType']>, ParentType, ContextType>;
  liquidity?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  liquidityUSD?: Resolver<Maybe<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  cumulativeDepositTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeDepositUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeWithdrawTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  cumulativeWithdrawUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeRewardTokenAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  cumulativeRewardUSD?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_ProtocolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_Protocol'] = ResolversParentTypes['Base_Protocol']> = ResolversObject<{
  __resolveType: TypeResolveFn<'Base_DexAmmProtocol', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  schemaVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  subgraphVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  methodologyVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  network?: Resolver<ResolversTypes['Base_Network'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Base_ProtocolType'], ParentType, ContextType>;
  totalValueLockedUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyUsageMetrics?: Resolver<Array<ResolversTypes['Base_UsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<Base_ProtocoldailyUsageMetricsArgs, 'skip' | 'first'>>;
  hourlyUsageMetrics?: Resolver<Array<ResolversTypes['Base_UsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<Base_ProtocolhourlyUsageMetricsArgs, 'skip' | 'first'>>;
  financialMetrics?: Resolver<Array<ResolversTypes['Base_FinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<Base_ProtocolfinancialMetricsArgs, 'skip' | 'first'>>;
}>;

export type Base_RewardTokenResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_RewardToken'] = ResolversParentTypes['Base_RewardToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['Base_Token'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Base_RewardTokenType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_SwapResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_Swap'] = ResolversParentTypes['Base_Swap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Base_DexAmmProtocol'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Base_Account'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Base_LiquidityPool'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tick?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tokenIn?: Resolver<ResolversTypes['Base_Token'], ParentType, ContextType>;
  amountIn?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amountInUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  tokenOut?: Resolver<ResolversTypes['Base_Token'], ParentType, ContextType>;
  amountOut?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amountOutUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  reserveAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_TickResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_Tick'] = ResolversParentTypes['Base_Tick']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  index?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Base_LiquidityPool'], ParentType, ContextType>;
  createdTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  prices?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  liquidityGross?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityGrossUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  liquidityNet?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityNetUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  lastSnapshotDayID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastSnapshotHourID?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastUpdateTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lastUpdateBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_TickDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_TickDailySnapshot'] = ResolversParentTypes['Base_TickDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  tick?: Resolver<ResolversTypes['Base_Tick'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Base_LiquidityPool'], ParentType, ContextType>;
  liquidityGross?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityGrossUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  liquidityNet?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityNetUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_TickHourlySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_TickHourlySnapshot'] = ResolversParentTypes['Base_TickHourlySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  hour?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  tick?: Resolver<ResolversTypes['Base_Tick'], ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Base_LiquidityPool'], ParentType, ContextType>;
  liquidityGross?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityGrossUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  liquidityNet?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityNetUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_TokenResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_Token'] = ResolversParentTypes['Base_Token']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  decimals?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastPriceUSD?: Resolver<Maybe<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  lastPriceBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  _lastPricePool?: Resolver<Maybe<ResolversTypes['Base_Bytes']>, ParentType, ContextType>;
  _totalSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  _totalValueLockedUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  _largePriceChangeBuffer?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  _largeTVLImpactBuffer?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_UsageMetricsDailySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_UsageMetricsDailySnapshot'] = ResolversParentTypes['Base_UsageMetricsDailySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  day?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Base_DexAmmProtocol'], ParentType, ContextType>;
  dailyActiveUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyTransactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_UsageMetricsHourlySnapshotResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_UsageMetricsHourlySnapshot'] = ResolversParentTypes['Base_UsageMetricsHourlySnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  hour?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Base_DexAmmProtocol'], ParentType, ContextType>;
  hourlyActiveUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyTransactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hourlySwapCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base_WithdrawResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base_Withdraw'] = ResolversParentTypes['Base_Withdraw']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  protocol?: Resolver<ResolversTypes['Base_DexAmmProtocol'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['Base_Account'], ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Base_Position']>, ParentType, ContextType>;
  tickLower?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  tickUpper?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pool?: Resolver<ResolversTypes['Base_LiquidityPool'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Base_Token']>, ParentType, ContextType, RequireFields<Base_WithdrawinputTokensArgs, 'skip' | 'first'>>;
  inputTokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reserveAmounts?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['Base_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base__Block_Resolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base__Block_'] = ResolversParentTypes['Base__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['Base_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  parentHash?: Resolver<Maybe<ResolversTypes['Base_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base__HelperStoreResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base__HelperStore'] = ResolversParentTypes['Base__HelperStore']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  valueDecimalList?: Resolver<Maybe<Array<ResolversTypes['Base_BigDecimal']>>, ParentType, ContextType>;
  valueDecimal?: Resolver<Maybe<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  valueInt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base__LiquidityPoolAmountResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base__LiquidityPoolAmount'] = ResolversParentTypes['Base__LiquidityPoolAmount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  inputTokens?: Resolver<Array<ResolversTypes['Base_Token']>, ParentType, ContextType, RequireFields<Base__LiquidityPoolAmountinputTokensArgs, 'skip' | 'first'>>;
  inputTokenBalances?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  tokenPrices?: Resolver<Array<ResolversTypes['Base_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base__Meta_Resolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base__Meta_'] = ResolversParentTypes['Base__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['Base__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base__TokenWhitelistResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base__TokenWhitelist'] = ResolversParentTypes['Base__TokenWhitelist']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  whitelistPools?: Resolver<Array<ResolversTypes['Base_LiquidityPool']>, ParentType, ContextType, RequireFields<Base__TokenWhitelistwhitelistPoolsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Base__TokenWhitelistSymbolResolvers<ContextType = MeshContext & { chainId: number }, ParentType extends ResolversParentTypes['Base__TokenWhitelistSymbol'] = ResolversParentTypes['Base__TokenWhitelistSymbol']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  address?: Resolver<ResolversTypes['Base_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Resolvers<ContextType = MeshContext & { chainId: number }> = ResolversObject<{
  Query?: QueryResolvers<ContextType>;
  Subscription?: SubscriptionResolvers<ContextType>;
  Ethereum_Account?: Ethereum_AccountResolvers<ContextType>;
  Ethereum_ActiveAccount?: Ethereum_ActiveAccountResolvers<ContextType>;
  Ethereum_BigDecimal?: GraphQLScalarType;
  BigInt?: GraphQLScalarType;
  Ethereum_Bytes?: GraphQLScalarType;
  Ethereum_Deposit?: Ethereum_DepositResolvers<ContextType>;
  Ethereum_DexAmmProtocol?: Ethereum_DexAmmProtocolResolvers<ContextType>;
  Ethereum_FinancialsDailySnapshot?: Ethereum_FinancialsDailySnapshotResolvers<ContextType>;
  Ethereum_Int8?: GraphQLScalarType;
  Ethereum_LiquidityPool?: Ethereum_LiquidityPoolResolvers<ContextType>;
  Ethereum_LiquidityPoolDailySnapshot?: Ethereum_LiquidityPoolDailySnapshotResolvers<ContextType>;
  Ethereum_LiquidityPoolFee?: Ethereum_LiquidityPoolFeeResolvers<ContextType>;
  Ethereum_LiquidityPoolHourlySnapshot?: Ethereum_LiquidityPoolHourlySnapshotResolvers<ContextType>;
  Ethereum_Position?: Ethereum_PositionResolvers<ContextType>;
  Ethereum_PositionSnapshot?: Ethereum_PositionSnapshotResolvers<ContextType>;
  Ethereum_Protocol?: Ethereum_ProtocolResolvers<ContextType>;
  Ethereum_RewardToken?: Ethereum_RewardTokenResolvers<ContextType>;
  Ethereum_Swap?: Ethereum_SwapResolvers<ContextType>;
  Ethereum_Tick?: Ethereum_TickResolvers<ContextType>;
  Ethereum_TickDailySnapshot?: Ethereum_TickDailySnapshotResolvers<ContextType>;
  Ethereum_TickHourlySnapshot?: Ethereum_TickHourlySnapshotResolvers<ContextType>;
  Timestamp?: GraphQLScalarType;
  Ethereum_Token?: Ethereum_TokenResolvers<ContextType>;
  Ethereum_UsageMetricsDailySnapshot?: Ethereum_UsageMetricsDailySnapshotResolvers<ContextType>;
  Ethereum_UsageMetricsHourlySnapshot?: Ethereum_UsageMetricsHourlySnapshotResolvers<ContextType>;
  Ethereum_Withdraw?: Ethereum_WithdrawResolvers<ContextType>;
  Ethereum__Block_?: Ethereum__Block_Resolvers<ContextType>;
  Ethereum__HelperStore?: Ethereum__HelperStoreResolvers<ContextType>;
  Ethereum__LiquidityPoolAmount?: Ethereum__LiquidityPoolAmountResolvers<ContextType>;
  Ethereum__Meta_?: Ethereum__Meta_Resolvers<ContextType>;
  Ethereum__TokenWhitelist?: Ethereum__TokenWhitelistResolvers<ContextType>;
  Ethereum__TokenWhitelistSymbol?: Ethereum__TokenWhitelistSymbolResolvers<ContextType>;
  Optimism_Account?: Optimism_AccountResolvers<ContextType>;
  Optimism_ActiveAccount?: Optimism_ActiveAccountResolvers<ContextType>;
  Optimism_BigDecimal?: GraphQLScalarType;
  Optimism_Bytes?: GraphQLScalarType;
  Optimism_Deposit?: Optimism_DepositResolvers<ContextType>;
  Optimism_DexAmmProtocol?: Optimism_DexAmmProtocolResolvers<ContextType>;
  Optimism_FinancialsDailySnapshot?: Optimism_FinancialsDailySnapshotResolvers<ContextType>;
  Optimism_Int8?: GraphQLScalarType;
  Optimism_LiquidityPool?: Optimism_LiquidityPoolResolvers<ContextType>;
  Optimism_LiquidityPoolDailySnapshot?: Optimism_LiquidityPoolDailySnapshotResolvers<ContextType>;
  Optimism_LiquidityPoolFee?: Optimism_LiquidityPoolFeeResolvers<ContextType>;
  Optimism_LiquidityPoolHourlySnapshot?: Optimism_LiquidityPoolHourlySnapshotResolvers<ContextType>;
  Optimism_Position?: Optimism_PositionResolvers<ContextType>;
  Optimism_PositionSnapshot?: Optimism_PositionSnapshotResolvers<ContextType>;
  Optimism_Protocol?: Optimism_ProtocolResolvers<ContextType>;
  Optimism_RewardToken?: Optimism_RewardTokenResolvers<ContextType>;
  Optimism_Swap?: Optimism_SwapResolvers<ContextType>;
  Optimism_Tick?: Optimism_TickResolvers<ContextType>;
  Optimism_TickDailySnapshot?: Optimism_TickDailySnapshotResolvers<ContextType>;
  Optimism_TickHourlySnapshot?: Optimism_TickHourlySnapshotResolvers<ContextType>;
  Optimism_Token?: Optimism_TokenResolvers<ContextType>;
  Optimism_UsageMetricsDailySnapshot?: Optimism_UsageMetricsDailySnapshotResolvers<ContextType>;
  Optimism_UsageMetricsHourlySnapshot?: Optimism_UsageMetricsHourlySnapshotResolvers<ContextType>;
  Optimism_Withdraw?: Optimism_WithdrawResolvers<ContextType>;
  Optimism__Block_?: Optimism__Block_Resolvers<ContextType>;
  Optimism__HelperStore?: Optimism__HelperStoreResolvers<ContextType>;
  Optimism__LiquidityPoolAmount?: Optimism__LiquidityPoolAmountResolvers<ContextType>;
  Optimism__Meta_?: Optimism__Meta_Resolvers<ContextType>;
  Optimism__TokenWhitelist?: Optimism__TokenWhitelistResolvers<ContextType>;
  Optimism__TokenWhitelistSymbol?: Optimism__TokenWhitelistSymbolResolvers<ContextType>;
  Arbitrum_Account?: Arbitrum_AccountResolvers<ContextType>;
  Arbitrum_ActiveAccount?: Arbitrum_ActiveAccountResolvers<ContextType>;
  Arbitrum_BigDecimal?: GraphQLScalarType;
  Arbitrum_Bytes?: GraphQLScalarType;
  Arbitrum_Deposit?: Arbitrum_DepositResolvers<ContextType>;
  Arbitrum_DexAmmProtocol?: Arbitrum_DexAmmProtocolResolvers<ContextType>;
  Arbitrum_FinancialsDailySnapshot?: Arbitrum_FinancialsDailySnapshotResolvers<ContextType>;
  Arbitrum_Int8?: GraphQLScalarType;
  Arbitrum_LiquidityPool?: Arbitrum_LiquidityPoolResolvers<ContextType>;
  Arbitrum_LiquidityPoolDailySnapshot?: Arbitrum_LiquidityPoolDailySnapshotResolvers<ContextType>;
  Arbitrum_LiquidityPoolFee?: Arbitrum_LiquidityPoolFeeResolvers<ContextType>;
  Arbitrum_LiquidityPoolHourlySnapshot?: Arbitrum_LiquidityPoolHourlySnapshotResolvers<ContextType>;
  Arbitrum_Position?: Arbitrum_PositionResolvers<ContextType>;
  Arbitrum_PositionSnapshot?: Arbitrum_PositionSnapshotResolvers<ContextType>;
  Arbitrum_Protocol?: Arbitrum_ProtocolResolvers<ContextType>;
  Arbitrum_RewardToken?: Arbitrum_RewardTokenResolvers<ContextType>;
  Arbitrum_Swap?: Arbitrum_SwapResolvers<ContextType>;
  Arbitrum_Tick?: Arbitrum_TickResolvers<ContextType>;
  Arbitrum_TickDailySnapshot?: Arbitrum_TickDailySnapshotResolvers<ContextType>;
  Arbitrum_TickHourlySnapshot?: Arbitrum_TickHourlySnapshotResolvers<ContextType>;
  Arbitrum_Token?: Arbitrum_TokenResolvers<ContextType>;
  Arbitrum_UsageMetricsDailySnapshot?: Arbitrum_UsageMetricsDailySnapshotResolvers<ContextType>;
  Arbitrum_UsageMetricsHourlySnapshot?: Arbitrum_UsageMetricsHourlySnapshotResolvers<ContextType>;
  Arbitrum_Withdraw?: Arbitrum_WithdrawResolvers<ContextType>;
  Arbitrum__Block_?: Arbitrum__Block_Resolvers<ContextType>;
  Arbitrum__HelperStore?: Arbitrum__HelperStoreResolvers<ContextType>;
  Arbitrum__LiquidityPoolAmount?: Arbitrum__LiquidityPoolAmountResolvers<ContextType>;
  Arbitrum__Meta_?: Arbitrum__Meta_Resolvers<ContextType>;
  Arbitrum__TokenWhitelist?: Arbitrum__TokenWhitelistResolvers<ContextType>;
  Arbitrum__TokenWhitelistSymbol?: Arbitrum__TokenWhitelistSymbolResolvers<ContextType>;
  Base_Account?: Base_AccountResolvers<ContextType>;
  Base_ActiveAccount?: Base_ActiveAccountResolvers<ContextType>;
  Base_BigDecimal?: GraphQLScalarType;
  Base_Bytes?: GraphQLScalarType;
  Base_Deposit?: Base_DepositResolvers<ContextType>;
  Base_DexAmmProtocol?: Base_DexAmmProtocolResolvers<ContextType>;
  Base_FinancialsDailySnapshot?: Base_FinancialsDailySnapshotResolvers<ContextType>;
  Base_Int8?: GraphQLScalarType;
  Base_LiquidityPool?: Base_LiquidityPoolResolvers<ContextType>;
  Base_LiquidityPoolDailySnapshot?: Base_LiquidityPoolDailySnapshotResolvers<ContextType>;
  Base_LiquidityPoolFee?: Base_LiquidityPoolFeeResolvers<ContextType>;
  Base_LiquidityPoolHourlySnapshot?: Base_LiquidityPoolHourlySnapshotResolvers<ContextType>;
  Base_Position?: Base_PositionResolvers<ContextType>;
  Base_PositionSnapshot?: Base_PositionSnapshotResolvers<ContextType>;
  Base_Protocol?: Base_ProtocolResolvers<ContextType>;
  Base_RewardToken?: Base_RewardTokenResolvers<ContextType>;
  Base_Swap?: Base_SwapResolvers<ContextType>;
  Base_Tick?: Base_TickResolvers<ContextType>;
  Base_TickDailySnapshot?: Base_TickDailySnapshotResolvers<ContextType>;
  Base_TickHourlySnapshot?: Base_TickHourlySnapshotResolvers<ContextType>;
  Base_Token?: Base_TokenResolvers<ContextType>;
  Base_UsageMetricsDailySnapshot?: Base_UsageMetricsDailySnapshotResolvers<ContextType>;
  Base_UsageMetricsHourlySnapshot?: Base_UsageMetricsHourlySnapshotResolvers<ContextType>;
  Base_Withdraw?: Base_WithdrawResolvers<ContextType>;
  Base__Block_?: Base__Block_Resolvers<ContextType>;
  Base__HelperStore?: Base__HelperStoreResolvers<ContextType>;
  Base__LiquidityPoolAmount?: Base__LiquidityPoolAmountResolvers<ContextType>;
  Base__Meta_?: Base__Meta_Resolvers<ContextType>;
  Base__TokenWhitelist?: Base__TokenWhitelistResolvers<ContextType>;
  Base__TokenWhitelistSymbol?: Base__TokenWhitelistSymbolResolvers<ContextType>;
}>;

export type DirectiveResolvers<ContextType = MeshContext & { chainId: number }> = ResolversObject<{
  entity?: entityDirectiveResolver<any, any, ContextType>;
  subgraphId?: subgraphIdDirectiveResolver<any, any, ContextType>;
  derivedFrom?: derivedFromDirectiveResolver<any, any, ContextType>;
}>;

export type MeshContext = Uniswapv3EthereumTypes.Context & Uniswapv3OptimismTypes.Context & Uniswapv3ArbitrumTypes.Context & Uniswapv3BaseTypes.Context & BaseMeshContext;


const baseDir = pathModule.join(typeof __dirname === 'string' ? __dirname : '/', '..');

const importFn: ImportFn = <T>(moduleId: string) => {
  const relativeModuleId = (pathModule.isAbsolute(moduleId) ? pathModule.relative(baseDir, moduleId) : moduleId).split('\\').join('/').replace(baseDir + '/', '');
  switch(relativeModuleId) {
    default:
      return Promise.reject(new Error(`Cannot find module '${relativeModuleId}'.`));
  }
};

const rootStore = new MeshStore('.graphclient', new FsStoreStorageAdapter({
  cwd: baseDir,
  importFn,
  fileType: "ts",
}), {
  readonly: true,
  validate: false
});

export function getMeshOptions() {
  console.warn('WARNING: These artifacts are built for development mode. Please run "graphclient build" to build production artifacts');
  return findAndParseConfig({
    dir: baseDir,
    artifactsDir: ".graphclient",
    configName: "graphclient",
    additionalPackagePrefixes: ["@graphprotocol/client-"],
    initialLoggerPrefix: "GraphClient",
  });
}

export function createBuiltMeshHTTPHandler<TServerContext = {}>(): MeshHTTPHandler<TServerContext> {
  return createMeshHTTPHandler<TServerContext>({
    baseDir,
    getBuiltMesh: getBuiltGraphClient,
    rawServeConfig: undefined,
  })
}

let meshInstance$: Promise<MeshInstance> | undefined;

export const pollingInterval = null;

export function getBuiltGraphClient(): Promise<MeshInstance> {
  if (meshInstance$ == null) {
    if (pollingInterval) {
      setInterval(() => {
        getMeshOptions()
        .then(meshOptions => getMesh(meshOptions))
        .then(newMesh =>
          meshInstance$.then(oldMesh => {
            oldMesh.destroy()
            meshInstance$ = Promise.resolve(newMesh)
          })
        ).catch(err => {
          console.error("Mesh polling failed so the existing version will be used:", err);
        });
      }, pollingInterval)
    }
    meshInstance$ = getMeshOptions().then(meshOptions => getMesh(meshOptions)).then(mesh => {
      const id = mesh.pubsub.subscribe('destroy', () => {
        meshInstance$ = undefined;
        mesh.pubsub.unsubscribe(id);
      });
      return mesh;
    });
  }
  return meshInstance$;
}

export const execute: ExecuteMeshFn = (...args) => getBuiltGraphClient().then(({ execute }) => execute(...args));

export const subscribe: SubscribeMeshFn = (...args) => getBuiltGraphClient().then(({ subscribe }) => subscribe(...args));
export function getBuiltGraphSDK<TGlobalContext = any, TOperationContext = any>(globalContext?: TGlobalContext) {
  const sdkRequester$ = getBuiltGraphClient().then(({ sdkRequesterFactory }) => sdkRequesterFactory(globalContext));
  return getSdk<TOperationContext, TGlobalContext>((...args) => sdkRequester$.then(sdkRequester => sdkRequester(...args)));
}
export type GetAllTicksEthereumQueryVariables = Exact<{
  poolAddress: Scalars['String']['input'];
  skip: Scalars['Int']['input'];
}>;


export type GetAllTicksEthereumQuery = { Ethereum_ticks: Array<Pick<Ethereum_Tick, 'index' | 'liquidityGross' | 'liquidityNet'>> };

export type GetAllTicksBaseQueryVariables = Exact<{
  poolAddress: Scalars['String']['input'];
  skip: Scalars['Int']['input'];
}>;


export type GetAllTicksBaseQuery = { Base_ticks: Array<Pick<Base_Tick, 'index' | 'liquidityGross' | 'liquidityNet'>> };

export type GetAllTicksOptimismQueryVariables = Exact<{
  poolAddress: Scalars['String']['input'];
  skip: Scalars['Int']['input'];
}>;


export type GetAllTicksOptimismQuery = { Optimism_ticks: Array<Pick<Optimism_Tick, 'index' | 'liquidityGross' | 'liquidityNet'>> };

export type GetAllTicksArbitrumQueryVariables = Exact<{
  poolAddress: Scalars['String']['input'];
  skip: Scalars['Int']['input'];
}>;


export type GetAllTicksArbitrumQuery = { Arbitrum_ticks: Array<Pick<Arbitrum_Tick, 'index' | 'liquidityGross' | 'liquidityNet'>> };


export const GetAllTicksEthereumDocument = gql`
    query GetAllTicksEthereum($poolAddress: String!, $skip: Int!) {
  Ethereum_ticks(
    where: {pool: $poolAddress, liquidityNet_not: 0}
    skip: $skip
    first: 1000
    orderBy: index
    orderDirection: asc
  ) {
    index
    liquidityGross
    liquidityNet
  }
}
    ` as unknown as DocumentNode<GetAllTicksEthereumQuery, GetAllTicksEthereumQueryVariables>;
export const GetAllTicksBaseDocument = gql`
    query GetAllTicksBase($poolAddress: String!, $skip: Int!) {
  Base_ticks(
    where: {pool: $poolAddress, liquidityNet_not: 0}
    skip: $skip
    first: 1000
    orderBy: index
    orderDirection: asc
  ) {
    index
    liquidityGross
    liquidityNet
  }
}
    ` as unknown as DocumentNode<GetAllTicksBaseQuery, GetAllTicksBaseQueryVariables>;
export const GetAllTicksOptimismDocument = gql`
    query GetAllTicksOptimism($poolAddress: String!, $skip: Int!) {
  Optimism_ticks(
    where: {pool: $poolAddress, liquidityNet_not: 0}
    skip: $skip
    first: 1000
    orderBy: index
    orderDirection: asc
  ) {
    index
    liquidityGross
    liquidityNet
  }
}
    ` as unknown as DocumentNode<GetAllTicksOptimismQuery, GetAllTicksOptimismQueryVariables>;
export const GetAllTicksArbitrumDocument = gql`
    query GetAllTicksArbitrum($poolAddress: String!, $skip: Int!) {
  Arbitrum_ticks(
    where: {pool: $poolAddress, liquidityNet_not: 0}
    skip: $skip
    first: 1000
    orderBy: index
    orderDirection: asc
  ) {
    index
    liquidityGross
    liquidityNet
  }
}
    ` as unknown as DocumentNode<GetAllTicksArbitrumQuery, GetAllTicksArbitrumQueryVariables>;





export type Requester<C = {}, E = unknown> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R> | AsyncIterable<R>
export function getSdk<C, E>(requester: Requester<C, E>) {
  return {
    GetAllTicksEthereum(variables: GetAllTicksEthereumQueryVariables, options?: C): Promise<GetAllTicksEthereumQuery> {
      return requester<GetAllTicksEthereumQuery, GetAllTicksEthereumQueryVariables>(GetAllTicksEthereumDocument, variables, options) as Promise<GetAllTicksEthereumQuery>;
    },
    GetAllTicksBase(variables: GetAllTicksBaseQueryVariables, options?: C): Promise<GetAllTicksBaseQuery> {
      return requester<GetAllTicksBaseQuery, GetAllTicksBaseQueryVariables>(GetAllTicksBaseDocument, variables, options) as Promise<GetAllTicksBaseQuery>;
    },
    GetAllTicksOptimism(variables: GetAllTicksOptimismQueryVariables, options?: C): Promise<GetAllTicksOptimismQuery> {
      return requester<GetAllTicksOptimismQuery, GetAllTicksOptimismQueryVariables>(GetAllTicksOptimismDocument, variables, options) as Promise<GetAllTicksOptimismQuery>;
    },
    GetAllTicksArbitrum(variables: GetAllTicksArbitrumQueryVariables, options?: C): Promise<GetAllTicksArbitrumQuery> {
      return requester<GetAllTicksArbitrumQuery, GetAllTicksArbitrumQueryVariables>(GetAllTicksArbitrumDocument, variables, options) as Promise<GetAllTicksArbitrumQuery>;
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;